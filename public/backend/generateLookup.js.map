//Developed by Sy Le. Coprighted by Salesforce.com 2015
{"version":3,"sources":["generateLookup.js"],"names":[],"mappings":"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","file":"generateLookup.js","sourcesContent":["//external\nimport cheerio from 'cheerio';\nimport path from 'path';\nimport colors from 'colors';\nimport _ from 'lodash';\nimport Q from 'q';\n\n\n//internal\nimport logger from './logger';\nimport util from './util';\n\n\n//exports\nexport default (componentFileNames, baseDirAuraUpstream, outputDirDataPath) => {\n\tconst promises = [];\n\n\tconst interestedFiles = _.merge(\n\t\t_.values(componentFileNames.cmp),\n\t\t_.values(componentFileNames.app)\n\t);\n\n\n\tconst dependenciesMap = {};//which component I use\n\t// {\n\t// \tnameSpace : {\n\t// \t\tcontrolName : {\n\t// \t\t\tattributes : {\n\t// \t\t\t\t...\n\t// \t\t\t\tattributeName1 : {name, type, default, description, access}\n\t// \t\t\t\t...\n\t// \t\t\t},\n\t// \t\t\timports    : {\n\t// \t\t\t\t...\n\t// \t\t\t\timportLibName1 : {library, property}\n\t// \t\t\t\t...\n\t// \t\t\t},\n\t// \t\t\tevents     : {\n\t// \t\t\t\t...\n\t// \t\t\t\teventName1 : {name, type, description}\n\t// \t\t\t\t...\n\t// \t\t\t},\n\t// \t\t\thandlers   : {\n\t// \t\t\t\t...\n\t// \t\t\t\thandlerName1 : {name, value, action}\n\t// \t\t\t\t...\n\t// \t\t\t},\n\t// \t\t\tmethods    : {\n\t// \t\t\t\t...\n\t// \t\t\t\tmethodName1  : {name, action, access, description}\n\t// \t\t\t\t...\n\t// \t\t\t}\n\t// \t\t} \n\t// \t}\n\t// }\n\t\n\tconst usageMap = {};//which component uses me\n\t\n\tconst namespaceCountMap = {};//count the important of namespace\n\t// {\n\t// \tui:stuff: [\n\t// \t\t{controlNameSpace, controlName, attribs}\n\t// \t]\n\t// }\n\t\n\n\tconst controlCountMap = {};//count how many a component is used\n\n\tconst controlLocationMap = {};//used for autocomplete\n\t//flat map of <namespace:control> : relative_location\n\n\n\t//loop through interested files\n\t_.each(\n\t\tinterestedFiles,\n\t\tfileName => {\n\t\t\tconst defer = Q.defer();\n\t        promises.push(defer.promise);\n\n\t        const [controlNameSpace, controlName] = util.getComponentNamesFromPath(fileName);\n\t        const controlFullName = `${controlNameSpace}:${controlName}`;\n\n\t        const curControlObj = {\n\t        \tattributes : {},\n\t\t\t\timports : {},\n\t\t\t\tevents : {},\n\t\t\t\thandlers : {},\n\t\t\t\tmethods : {},\n\t\t\t\tdependencies : {}\n\t        };\n\n\t        //increment namespace count map\n\t        namespaceCountMap[controlNameSpace] = namespaceCountMap[controlNameSpace] || 0;\n\t        namespaceCountMap[controlNameSpace]++;\n\n\t        //update the dependencies stuffs\n\t        dependenciesMap[controlNameSpace] = dependenciesMap[controlNameSpace] || {};\n\t        dependenciesMap[controlNameSpace][controlName] = curControlObj;\n\n\t        //update it for autocomplete\n\t        let relativeControlPath = fileName.substr(fileName.indexOf('aura_upstream/'));//substring to aura_upstream\n\t        relativeControlPath = relativeControlPath.substr(0, relativeControlPath.lastIndexOf('/'));\n\t        controlLocationMap[controlFullName] = relativeControlPath;\n\n\t        //read and parse\n\t        util.readFromFileAsync(fileName).then( fileContent => {\n\t            //success\n\t            //parsing xml\n\t            const $ = cheerio.load(fileContent, {\n\t                xmlMode: true\n\t            });\n\n\n\t            _.each(\n\t            \t$('*'),\n\t            \t(attribute) => {\n\t            \t\tconst {name, attribs, children} = attribute;\n\n\n\t            \t\t//populate the parent hier...\n\t            \t\tusageMap[name] = usageMap[name] || {};\n\t            \t\tusageMap[name][controlFullName] = usageMap[name][controlFullName] || [];\n\t            \t\tusageMap[name][controlFullName].push({\n\t            \t\t\tcontrolNameSpace,\n\t            \t\t\tcontrolName,\n\t            \t\t\tcontrolFullName,\n\t            \t\t\tattribs\n\t            \t\t})\n\n\t            \t\t//populate the use a ...\n\t            \t\tif(name.indexOf('aura:') === 0){\n\t            \t\t\t//only interest in aura:*\n\t            \t\t\tswitch(name){\n\t            \t\t\t\tcase 'aura:attribute'://{name, type, default, description, access}\n\t            \t\t\t\t\tconst [curAttrName, curAttrAttributes] = util.getKeyValFromCheerioDom(attribute);\n\t            \t\t\t\t\tcurControlObj.attributes[curAttrName] = curAttrAttributes;\n\t            \t\t\t\t\tbreak;\n\n            \t\t\t\t\tcase 'aura:import'://{library, property}\n            \t\t\t\t\t\tconst {library} = attribs;\n            \t\t\t\t\t\tcurControlObj.imports[library] = attribs;\n\t            \t\t\t\t\tbreak;\n\n            \t\t\t\t\tcase 'aura:registerevent'://{name, type, description}\n            \t\t\t\t\t\tconst eventName = attribs.name;\n            \t\t\t\t\t\tcurControlObj.events[eventName] = attribs;\n        \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 'aura:handler'://{name, value, action}\n    \t\t\t\t\t\t\t\tconst handlerName = attribs.name;\n            \t\t\t\t\t\tcurControlObj.handlers[handlerName] = attribs;\n        \t\t\t\t\t\t\tbreak;\n\n    \t\t\t\t\t\t\tcase 'aura:method'://{name, action, access, description}\n    \t\t\t\t\t\t\t\tconst methodName = attribs.name;\n\n    \t\t\t\t\t\t\t\tconst childrenAttrs = _.reduce(\n    \t\t\t\t\t\t\t\t\tchildren || [],\n    \t\t\t\t\t\t\t\t\t(resChildAttrs, curChildAttr) => {\n    \t\t\t\t\t\t\t\t\t\tif (curChildAttr.name === 'aura:attribute' && attribs){\n\t    \t\t\t\t\t\t\t\t\t\tconst [childAttrName, childAttrAttributes] = util.getKeyValFromCheerioDom(curChildAttr);\n\t    \t\t\t\t\t\t\t\t\t\tresChildAttrs[childAttrName] = childAttrAttributes;\n    \t\t\t\t\t\t\t\t\t\t}\n\n    \t\t\t\t\t\t\t\t\t\treturn resChildAttrs;\n    \t\t\t\t\t\t\t\t\t},\n    \t\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tcurControlObj.methods[methodName] = childrenAttrs;\n    \t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'aura:component'://to ignore\n\t\t\t\t\t\t\t\t\tbreak;\n\n            \t\t\t\t\tdefault:\n            \t\t\t\t\t\tconst depdenciesName = name;\n            \t\t\t\t\t\t//list of dependenceis\n            \t\t\t\t\t\tcurControlObj.dependencies[depdenciesName] = curControlObj.dependencies[depdenciesName] || [];\n            \t\t\t\t\t\tcurControlObj.dependencies[depdenciesName].push(attribs);\n\n\n            \t\t\t\t\t\t//count control usage\n            \t\t\t\t\t\tcontrolCountMap[depdenciesName] = controlCountMap[depdenciesName] || 0;\n            \t\t\t\t\t\tcontrolCountMap[depdenciesName]++;\n            \t\t\t\t\t\tbreak;\n\t            \t\t\t}\n\t            \t\t} else if(name.indexOf(':') > 0){\n\t            \t\t\t//only interested in stuffs with a :\n\t            \t\t\tconst depdenciesName = name;\n    \t\t\t\t\t\t//list of dependenceis\n    \t\t\t\t\t\tcurControlObj.dependencies[depdenciesName] = curControlObj.dependencies[depdenciesName] || [];\n    \t\t\t\t\t\tcurControlObj.dependencies[depdenciesName].push(attribs);\n\n\n    \t\t\t\t\t\t//count control usage\n    \t\t\t\t\t\tcontrolCountMap[depdenciesName] = controlCountMap[depdenciesName] || 0;\n    \t\t\t\t\t\tcontrolCountMap[depdenciesName]++;\n\t            \t\t}\n\t            \t}\n            \t);\n\n\t            //resolved\n\t            defer.resolve();\n\t        });\n\t\t}\n\t);\n\n\n\t//when all things are done, lets prepare to print\n\tQ.all(promises).then( () => {\n\t\tutil.writeToFile(\n            util.serializeJsonObject( dependenciesMap ),\n            path.join(\n                outputDirDataPath,\n                'dependenciesMap.json'\n            )\n        );\n\n        util.writeToFile(\n            util.serializeJsonObject( usageMap ),\n            path.join(\n                outputDirDataPath,\n                'usageMap.json'\n            )\n        );\n\n        util.writeToFile(\n            util.serializeJsonObject( namespaceCountMap ),\n            path.join(\n                outputDirDataPath,\n                'namespaceCountMap.json'\n            )\n        );\n\n\n\n        const remappedControlCountMap = _.reduce(\n        \tcontrolCountMap,\n        \t(res, controlReferencesCount, controlName) => {\n        \t\tconst fullControlName = controlCountMap[`${controlName}.app`]\n        \t\t\t? `${controlName}.app`\n        \t\t\t: `${controlName}.cmp`;\n        \t\tres[fullControlName] = controlReferencesCount;\n\n        \t\treturn res;\n        \t},\n        \t{}\n    \t);\n\n        //let's do a map to get the name\n        util.writeToFile(\n            util.serializeJsonObject( remappedControlCountMap ),\n            path.join(\n                outputDirDataPath,\n                'controlCountMap.json'\n            )\n        );\n\n\n\n        util.writeToFile(\n            util.serializeJsonObject( _.keys(controlLocationMap) ),\n            path.join(\n                outputDirDataPath,\n                'autoCompleteControlMap.json'\n            )\n        );\n\n\n        util.writeToFile(\n            util.serializeJsonObject( controlLocationMap ),\n            path.join(\n                outputDirDataPath,\n                'controlLocationMap.json'\n            )\n        );\n\n\n        //write the aura_upstream_pom\n        util.readFromFileAsync(path.join(baseDirAuraUpstream,'pom.xml'))\n        .done( fileContent => {\n        \tutil.writeToFile(\n\t        \tfileContent,\n\t        \tpath.join(\n\t                outputDirDataPath,\n\t                'aura_upstream_pom.xml'\n\t            )\n\t        );\n        });\n\t});\n};"],"sourceRoot":"/source/"}