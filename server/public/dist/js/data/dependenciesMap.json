{
 "__artifactId__": {
  "__artifactId__.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ]
   }
  }
 },
 "aura": {
  "application.app": {
   "attributes": {
    "body": {
     "name": "body",
     "access": "GLOBAL",
     "type": "Aura.Component[]",
     "description": "The components to render within this application."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "abstract": "true",
      "extensible": "true",
      "locationChangeEvent": "aura:locationChange",
      "template": "aura:template",
      "renderer": "js://aura.component, java://org.auraframework.renderer.ComponentRenderer",
      "access": "UNAUTHENTICATED",
      "implements": "aura:rootComponent",
      "support": "GA",
      "useAppcache": "false",
      "description": "The root of the application hierarchy."
     }
    ]
   }
  },
  "integrationServiceApp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "extensible": "true",
      "access": "global",
      "template": "aura:integrationServiceTemplate",
      "render": "CLIENT"
     }
    ],
    "aura:dependency": [
     {
      "resource": "aura:*"
     },
     {
      "resource": "ui:message"
     },
     {
      "resource": "ui:outputText"
     }
    ]
   }
  }
 },
 "auraadmin": {
  "admin.app": {
   "attributes": {
    "mbeans": {
     "name": "mbeans",
     "type": "boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.impl.admin.AdminModel",
      "controller": "java://org.auraframework.impl.admin.AdminController"
     }
    ],
    "auraadmin:cacheView": [
     {
      "data": "{!m.defsData}",
      "name": "Definitions",
      "showDefs": "true"
     },
     {
      "data": "{!m.existsData}",
      "name": "Existence"
     },
     {
      "data": "{!m.stringsData}",
      "name": "Strings"
     },
     {
      "data": "{!m.descriptorFilterData}",
      "name": "Descriptor Filter"
     }
    ],
    "aura:iteration": [
     {
      "var": "reg",
      "items": "{!m.registryData}"
     }
    ],
    "auraadmin:registryView": [
     {
      "registry": "{!reg}"
     }
    ],
    "aura:renderif": [
     {
      "isTrue": "{!v.mbeans}"
     }
    ],
    "auraadmin:counterBeans": [
     {
      "beans": "{!m.beanData}"
     }
    ]
   }
  },
  "catalog.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.auraadmin.CatalogModel"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!m.components}",
      "var": "cmp",
      "indexVar": "index"
     }
    ]
   }
  },
  "unused.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.auraadmin.UnusedModel"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!m.components}",
      "var": "cmp",
      "indexVar": "index"
     }
    ]
   }
  }
 },
 "auradev": {
  "autocompleteExample.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "ui:autocomplete": [
     {
      "aura:id": "autoComplete",
      "optionVar": "row",
      "matchDone": "{!c.handleMatchDone}",
      "inputChange": "{!c.handleInputChange}",
      "selectListOption": "{!c.handleSelectOption}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     }
    ],
    "auradev:testDataProvider": [
     {}
    ],
    "auradev:testDataProvider2": [
     {}
    ],
    "ui:autocompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     }
    ]
   }
  },
  "dependencies.app": {
   "attributes": {
    "component": {
     "type": "String",
     "name": "component",
     "default": "aura:application"
    },
    "clearPreloads": {
     "type": "Boolean",
     "name": "clearPreloads",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "auradev:showDependencies": [
     {
      "component": "{!v.component}"
     }
    ]
   }
  },
  "lint.app": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "ui:message": [
     {
      "title": "Usage:",
      "severity": "info"
     }
    ],
    "auradev:lintc": [
     {
      "name": "{!v.name}",
      "aura:load": "lazy"
     }
    ]
   }
  },
  "serializeRegistry.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "controller": "java://org.auraframework.components.auradev.SerializeRegistryController"
     }
    ],
    "ui:button": [
     {
      "aura:id": "serializeBtn",
      "press": "{!c.serialize}",
      "label": "Serialize!",
      "disabled": "false"
     }
    ]
   }
  }
 },
 "auradocs": {
  "docs.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "auradocs:locationChange",
     "action": "{!c.locationChange}"
    },
    "refreshBegin": {
     "name": "refreshBegin",
     "action": "{!c.refreshBegin}"
    },
    "refreshEnd": {
     "name": "refreshEnd",
     "action": "{!c.refreshEnd}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global",
      "template": "auradocs:template",
      "controller": "java://org.auraframework.docs.DocsController",
      "useAppcache": "false",
      "locationChangeEvent": "auradocs:locationChange",
      "implements": "auraStorage:refreshObserver"
     }
    ],
    "aura:dependency": [
     {
      "resource": "auradocs:*"
     },
     {
      "resource": "auraStorage:*"
     }
    ],
    "auradocs:nav": [
     {
      "aura:id": "navbar"
     }
    ]
   }
  },
  "examples.app": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "template": "auradocs:examplesTemplate",
      "access": "global"
     }
    ],
    "ui:message": [
     {
      "title": "Usage:",
      "severity": "info"
     }
    ],
    "auradocs:examplesc": [
     {
      "name": "{!v.name}",
      "aura:load": "lazy"
     }
    ]
   }
  },
  "outputViewer.app": {
   "attributes": {
    "def": {
     "name": "def",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global"
     }
    ],
    "auradocs:outputViewerc": [
     {
      "def": "{!v.def}"
     }
    ]
   }
  },
  "reference.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "auradocs:locationChange",
     "action": "{!c.locationChange}"
    },
    "refreshBegin": {
     "name": "refreshBegin",
     "action": "{!c.refreshBegin}"
    },
    "refreshEnd": {
     "name": "refreshEnd",
     "action": "{!c.refreshEnd}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global",
      "template": "auradocs:template",
      "controller": "java://org.auraframework.docs.DocsController",
      "useAppcache": "false",
      "locationChangeEvent": "auradocs:locationChange",
      "implements": "auraStorage:refreshObserver"
     }
    ],
    "aura:dependency": [
     {
      "resource": "auradocs:*"
     },
     {
      "resource": "auraStorage:*"
     }
    ],
    "auradocs:nav": [
     {
      "aura:id": "navbar",
      "referenceOnly": "true"
     }
    ]
   }
  },
  "stretchEditorPanel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auradocs:stretchTab": [
     {
      "title": "{!v.title}",
      "aura:id": "panel",
      "scroll": "true"
     }
    ]
   }
  },
  "stretchTab.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tableDemo.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "title",
      "value": "Dynamic Table"
     }
    ],
    "auradocs:demoTable": [
     {}
    ]
   }
  },
  "template.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "extraScriptTags"
     },
     {
      "attribute": "title",
      "value": "Aura Documentation"
     },
     {
      "attribute": "extraMetaTags"
     },
     {
      "attribute": "auraPreInitBlock"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "maxSize": "4096",
      "defaultExpiration": "3600",
      "secure": "true",
      "persistent": "false",
      "defaultAutoRefreshInterval": "3600",
      "debugLoggingEnabled": "true",
      "clearStorageOnInit": "false"
     }
    ]
   }
  },
  "topic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "topicExample.cmp": {
   "attributes": {
    "descriptor": {
     "name": "descriptor",
     "type": "String",
     "required": "true"
    },
    "defType": {
     "name": "defType",
     "type": "String",
     "default": "Component"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.defs}",
      "var": "def"
     },
     {
      "items": "{!m.includeDefs}",
      "var": "def"
     }
    ],
    "auradocs:editorPanel": [
     {
      "title": "{!def.name+' source'}",
      "descriptor": "{!def.descriptor}",
      "defType": "{!def.defType}"
     }
    ],
    "auradocs:stretchEditorPanel": [
     {
      "title": "{!def.includeDefName + '.js'}",
      "descriptor": "{!def.descriptor}",
      "defType": "{!def.defType}",
      "includeDefName": "{! def.includeDefName}"
     }
    ]
   }
  },
  "topicLink.cmp": {
   "attributes": {
    "topic": {
     "name": "topic",
     "type": "String",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "topicList.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "topicPanel.cmp": {
   "attributes": {
    "topic": {
     "name": "topic",
     "type": "String"
    },
    "example": {
     "name": "example",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "description"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.example.length > 0}"
     }
    ]
   }
  },
  "topics.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.components}",
      "var": "namespace"
     },
     {
      "items": "{!namespace.children}",
      "var": "component"
     }
    ]
   }
  },
  "viewer.cmp": {
   "attributes": {
    "descriptor": {
     "name": "descriptor",
     "type": "String",
     "required": "true",
     "access": "global"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tabset": [
     {
      "class": "displayTab"
     }
    ],
    "ui:tab": [
     {
      "title": "Output"
     }
    ],
    "auradocs:topicExample": [
     {
      "descriptor": "{!v.descriptor}",
      "defType": "component"
     }
    ]
   }
  },
  "warning.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "severity",
      "value": "warning"
     }
    ]
   }
  },
  "welcomeTopic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "title",
      "value": "A Guide to Aura Development"
     },
     {
      "attribute": "left"
     }
    ],
    "ui:block": [
     {}
    ],
    "ui:outputURL": [
     {
      "value": "https://github.com/forcedotcom/aura/blob/master/aura_oss.pdf",
      "label": "Help",
      "target": "_blank"
     },
     {
      "value": "https://github.com/forcedotcom/aura",
      "label": "Quick Start",
      "target": "_blank"
     },
     {
      "value": "#reference",
      "label": "Reference"
     }
    ]
   }
  }
 },
 "aurajstest": {
  "blank.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "description": "Placeholder app for free-form js tests; used by TestInjectionRenderer"
     }
    ]
   }
  },
  "jstest.app": {
   "attributes": {
    "descriptor": {
     "name": "descriptor",
     "type": "String",
     "default": "ui:button"
    },
    "defType": {
     "name": "defType",
     "type": "String",
     "default": "COMPONENT"
    },
    "index": {
     "name": "index",
     "type": "Integer",
     "default": "0"
    },
    "test": {
     "name": "test",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "GLOBAL",
      "model": "java://org.auraframework.components.aurajstest.JSTestModel"
     }
    ],
    "ui:tabset": [
     {
      "aura:id": "tabs",
      "class": "jstestTabset"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!m.testCases}",
      "var": "case"
     }
    ],
    "aurajstest:jstestCase": [
     {
      "aura:id": "test",
      "case": "{!case}",
      "url": "{!m.url}",
      "done": "{!c.testDone}"
     }
    ]
   }
  },
  "jstestAis.app": {
   "attributes": {
    "descriptor": {
     "name": "descriptor",
     "type": "String",
     "default": "ui:button"
    },
    "descriptor2": {
     "name": "descriptor2",
     "type": "String",
     "default": "ui:button"
    },
    "defType": {
     "name": "defType",
     "type": "String",
     "default": "COMPONENT"
    },
    "index": {
     "name": "index",
     "type": "Integer",
     "default": "0"
    },
    "test": {
     "name": "test",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "GLOBAL",
      "model": "java://org.auraframework.components.aurajstest.JSTestModel"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!m.isHybrid}"
     }
    ],
    "ui:tabset": [
     {
      "aura:id": "tabs",
      "class": "jstestTabset"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!m.testCases}",
      "var": "case"
     }
    ],
    "aurajstest:jstestCase": [
     {
      "aura:id": "test",
      "case": "{!case}",
      "url": "{!m.url}",
      "done": "{!c.testDone}"
     }
    ]
   }
  },
  "jstestCase.cmp": {
   "attributes": {
    "case": {
     "name": "case",
     "type": "java://org.auraframework.def.TestCaseDef"
    },
    "suite": {
     "name": "suite",
     "type": "java://org.auraframework.def.TestSuiteDef"
    },
    "shortName": {
     "name": "shortName",
     "type": "String"
    },
    "runTime": {
     "name": "runTime",
     "type": "String"
    },
    "url": {
     "name": "url",
     "type": "String"
    },
    "status": {
     "name": "status",
     "type": "String",
     "default": ""
    },
    "individualTestUrl": {
     "name": "individualTestUrl",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {
    "done": {
     "name": "done",
     "type": "aurajstest:testStatus"
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "onActivated": {
     "name": "onActivated",
     "action": "{!c.onActivate}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "scroll",
      "value": "false"
     },
     {
      "attribute": "icon"
     },
     {
      "attribute": "body"
     },
     {
      "attribute": "else"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.status == 'pass' || v.status == 'fail'}"
     }
    ]
   }
  }
 },
 "uiExamples": {
  "XSSTests.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "ui:inputRichText": [
     {
      "aura:id": "richText"
     }
    ],
    "ui:button": [
     {
      "aura:id": "button",
      "label": "inject taint",
      "press": "{!c.taint}"
     },
     {
      "aura:id": "styleButton",
      "label": "inject style",
      "press": "{!c.taintStyle}"
     }
    ],
    "ui:outputRichText": [
     {
      "aura:id": "rt"
     }
    ]
   }
  },
  "gridExamples.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "uiExamples:virtualDataGridKitchenSink": [
     {
      "tableFlavor": "blueLined"
     }
    ],
    "uiExamples:dataGridKitchenSink": [
     {
      "tableFlavor": "blueLined"
     }
    ]
   }
  },
  "panelExamples.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "aura:dependency": [
     {
      "resource": "markup://uiExamples:modalContent",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://uiExamples:panelContent",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://uiExamples:panelHeader",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://uiExamples:panelFooter",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://ui:spinner",
      "type": "COMPONENT"
     }
    ],
    "ui:button": [
     {
      "label": "Create panelType: panel, flavor: custom",
      "class": "customer-header-button",
      "press": "{!c.createPanelWithHeader}"
     },
     {
      "label": "Create panelType: panel, flavor: full screen",
      "press": "{!c.createFullPanel}"
     },
     {
      "label": "Create panelType: modal",
      "press": "{!c.createModal}"
     },
     {
      "label": "Create panelType: modal, flavor: large",
      "press": "{!c.createLargeModal}"
     },
     {
      "label": "Update content after panel created",
      "press": "{!c.lazyLoadPanel}"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ],
    "ui:containerManager": [
     {}
    ]
   }
  },
  "panelsTooltipsDemo.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "aura:dependency": [
     {
      "resource": "markup://uiExamples:modalContent",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://uiExamples:panelContent",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://uiExamples:panelFooter",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://uiExamples:panelHeader",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://ui:spinner",
      "type": "COMPONENT"
     }
    ],
    "ui:button": [
     {
      "stateful": "true",
      "aura:flavor": "flat",
      "class": "flat-btn",
      "label": "Modal",
      "press": "{!c.createModal}"
     },
     {
      "aura:flavor": "flat",
      "label": "Large Modal (flavor)",
      "class": "flat-btn",
      "press": "{!c.createLargeModal}"
     },
     {
      "aura:flavor": "flat",
      "label": "Lazy load content",
      "class": "flat-btn",
      "press": "{!c.lazyLoadPanel}"
     },
     {
      "aura:flavor": "flat",
      "label": "Flavored Panel with a pointer",
      "class": "customer-header-button flat-btn",
      "press": "{!c.createPanelWithHeader}"
     },
     {
      "aura:flavor": "flat",
      "aura:id": "southbutton",
      "stateful": "true",
      "class": "positioned-target flat-btn",
      "label": "South",
      "press": "{!c.openNotification}"
     },
     {
      "aura:flavor": "flat",
      "class": "positioned-target-east flat-btn",
      "label": "East",
      "press": "{!c.openEastPanel}"
     },
     {
      "aura:flavor": "flat",
      "class": "positioned-target-west flat-btn",
      "label": "West",
      "press": "{!c.openWestPanel}"
     },
     {
      "aura:flavor": "flat",
      "class": "positioned-target-north flat-btn",
      "label": "North",
      "press": "{!c.openNorthPanel}"
     }
    ],
    "ui:tooltip": [
     {
      "advanced": "false",
      "triggerClass": "my-tt",
      "tabIndex": "-1",
      "tooltipBody": "This is a CSS-only tooltip, perfect for long lists. (long tooltips are ok too)",
      "fadeInDuration": "400"
     },
     {
      "aura:flavor": "pop",
      "triggerClass": "my-tt",
      "advanced": "true",
      "tooltipBody": "The position adjusts to fit the viewport."
     },
     {
      "fadeInDuration": "500",
      "fadeOutDuration": "500",
      "triggerClass": "my-tt",
      "advanced": "true",
      "direction": "east",
      "trigger": "click",
      "tooltipBody": "Also it fades in!"
     },
     {
      "aura:flavor": "pop",
      "fadeInDuration": "500",
      "fadeOutDuration": "500",
      "direction": "east",
      "triggerClass": "my-tt",
      "advanced": "true",
      "tooltipBody": "This is tooltip goes to the east, also supported: south and west!"
     }
    ],
    "ui:containerManager": [
     {}
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ]
   }
  },
  "autocompleteDataProvider.cmp": {
   "attributes": {
    "size": {
     "name": "size",
     "type": "Integer",
     "default": "10"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "autocompleteExample.cmp": {
   "attributes": {
    "autocompleteValue": {
     "name": "autocompleteValue",
     "type": "String"
    },
    "autocompleteExtendedOptsValue": {
     "name": "autocompleteExtendedOptsValue",
     "type": "String"
    },
    "classes": {
     "name": "classes",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ],
    "ui:button": [
     {
      "label": "Press",
      "press": "{!c.changeClasses}"
     }
    ],
    "ui:label": [
     {
      "class": "fieldLabel",
      "label": "Selected Value"
     },
     {
      "class": "fieldLabel",
      "label": "Selected Value"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!v.autocompleteValue}",
      "class": "{!'output ' + (v.classes ? '' : 'stuff')}"
     },
     {
      "value": "{!v.autocompleteExtendedOptsValue}",
      "class": "{!'output ' + (v.classes ? '' : 'stuff')}"
     }
    ],
    "ui:autocomplete": [
     {
      "aura:id": "autocomplete",
      "inputClass": "autocomplete",
      "optionVar": "row",
      "matchDone": "{!c.handleMatch}",
      "inputChange": "{!c.handleInput}",
      "selectListOption": "{!c.handleSelection}",
      "label": "Autocomplete"
     },
     {
      "aura:id": "autocompleteExtendedOpts",
      "usePanel": "true",
      "inputClass": "autocomplete",
      "optionVar": "row",
      "matchDone": "{!c.handleMatch}",
      "inputChange": "{!c.handleInput}",
      "selectListOption": "{!c.handleSelection}",
      "label": "Autocomplete"
     }
    ],
    "uiExamples:autocompleteDataProvider": [
     {},
     {}
    ],
    "ui:autocompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     }
    ],
    "uiExamples:autocompleteOptionExampleExtended": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     }
    ]
   }
  },
  "autocompleteOptionExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "autocompleteOptionExampleExtended.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "buttonExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "name",
      "label": "Enter Name:",
      "placeholder": "Your Name"
     }
    ],
    "ui:button": [
     {
      "aura:id": "button",
      "buttonTitle": "Click to see what you put into the field",
      "class": "button",
      "label": "Click me",
      "press": "{!c.getInput}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outName",
      "value": "",
      "class": "text"
     }
    ]
   }
  },
  "carouselExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:carousel": [
     {}
    ],
    "aura:set": [
     {
      "attribute": "pageComponents"
     }
    ],
    "ui:outputText": [
     {
      "value": "Page 1"
     },
     {
      "value": "Page 2"
     }
    ]
   }
  },
  "checkbox.cmp": {
   "attributes": {
    "myBool": {
     "name": "myBool",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputCheckbox": [
     {
      "aura:id": "checkbox",
      "label": "Select?",
      "change": "{!c.onCheck}"
     }
    ],
    "ui:outputText": [
     {
      "class": "result",
      "aura:id": "checkResult",
      "value": "false"
     }
    ],
    "ui:outputCheckbox": [
     {
      "aura:id": "output",
      "value": "{!v.myBool}"
     }
    ]
   }
  },
  "columnResizing.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:virtualDataGrid": [
     {
      "aura:id": "grid",
      "class": "testGrid",
      "enableResizableColumns": "true",
      "onColumnResize": "{!c.onResize}"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataModel"
     }
    ],
    "ui:dataGridColumn": [
     {
      "name": "id",
      "label": "Id",
      "sortable": "true"
     },
     {
      "name": "who.name",
      "label": "Name"
     },
     {
      "name": "activityDate",
      "label": "Due Date"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!item.id}"
     },
     {
      "value": "{!item.who.name}"
     },
     {
      "value": "{!item.activityDate}"
     }
    ],
    "uiExamples:dataGridKitchenSinkDataProvider": [
     {
      "aura:id": "testdata",
      "totalItems": "10",
      "pageSize": "10"
     }
    ]
   }
  },
  "currency.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputCurrency": [
     {
      "aura:id": "amount",
      "label": "Amount",
      "class": "field",
      "value": "50"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputCurrency": [
     {
      "aura:id": "oCurrency",
      "value": ""
     }
    ]
   }
  },
  "dataGridDynamicColumns.cmp": {
   "attributes": {
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "14"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalItems": {
     "name": "totalItems",
     "type": "Integer"
    },
    "index": {
     "name": "index",
     "type": "Integer"
    },
    "count": {
     "name": "count",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.currentPage}",
     "action": "{!c.handleCurrentPageChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Init Base Columns",
      "press": "{!c.initColumns}"
     },
     {
      "label": "Insert Columns",
      "press": "{!c.insertNewColumns}"
     },
     {
      "label": "Change 6th Column",
      "press": "{!c.switchColumn}"
     },
     {
      "label": "Remove Columns",
      "press": "{!c.removeColumns}"
     },
     {
      "label": "Re-fire datagrid's provide",
      "press": "{!c.replaceData}"
     },
     {
      "label": "Fire Data Provider With Empty Data",
      "press": "{!c.emptyData}"
     }
    ],
    "ui:dataGrid": [
     {
      "aura:id": "grid",
      "sortBy": "{!v.sortBy}",
      "summary": "Assorted Data for testing"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     }
    ],
    "uiExamples:dataGridKitchenSinkDataProvider": [
     {
      "aura:id": "data",
      "sortBy": "{!v.sortBy}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:pagerNextPrevious": [
     {
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:pagerPageInfo": [
     {
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalItems": "{!v.totalItems}"
     }
    ]
   }
  },
  "dataGridKitchenSink.cmp": {
   "attributes": {
    "tableFlavor": {
     "name": "tableFlavor",
     "type": "String"
    },
    "mode": {
     "name": "mode",
     "type": "String",
     "default": "VIEW"
    },
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "10"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalItems": {
     "name": "totalItems",
     "type": "Integer",
     "default": "100"
    },
    "index": {
     "name": "index",
     "type": "Integer"
    },
    "count": {
     "name": "count",
     "type": "Integer"
    },
    "className": {
     "name": "className",
     "type": "String"
    },
    "rowIndex": {
     "name": "rowIndex",
     "type": "Integer"
    },
    "gridItems": {
     "name": "gridItems",
     "type": "List"
    },
    "gridSelectedItems": {
     "name": "gridSelectedItems",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.currentPage}",
     "action": "{!c.handleCurrentPageChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "mode",
      "class": "kitchenButton",
      "label": "{!v.mode}",
      "press": "{!c.handleModePress}"
     },
     {
      "class": "kitchenButton",
      "label": "Add row",
      "press": "{!c.handleAddRow}"
     },
     {
      "class": "kitchenButton",
      "label": "Insert",
      "press": "{!c.handleInsert}"
     },
     {
      "class": "kitchenButton",
      "label": "Remove",
      "press": "{!c.handleRemove}"
     },
     {
      "class": "kitchenButton",
      "label": "Change Columns",
      "press": "{!c.switchColumn}"
     },
     {
      "class": "kitchenButton",
      "label": "Render Grid",
      "press": "{!c.renderGrid}"
     },
     {
      "class": "kitchenButton",
      "label": "Unrender Grid",
      "press": "{!c.unrenderGrid}"
     },
     {
      "class": "kitchenButton",
      "label": "Disable Row",
      "press": "{!c.disableRow}"
     },
     {
      "class": "kitchenButton",
      "label": "Enable Row",
      "press": "{!c.enableRow}"
     },
     {
      "class": "kitchenButton",
      "label": "Add Class",
      "press": "{!c.addClass}"
     },
     {
      "class": "kitchenButton",
      "label": "Remove Class",
      "press": "{!c.removeClass}"
     },
     {
      "class": "kitchenButton",
      "label": "Toggle Class",
      "press": "{!c.toggleClass}"
     },
     {
      "label": "Re-fire datagrid's provide",
      "press": "{!c.replaceData}"
     },
     {
      "label": "Fire Data Provider With Empty Data",
      "press": "{!c.emptyData}"
     },
     {
      "label": "Spit Out Items",
      "press": "{!c.spit}"
     },
     {
      "label": "Grab Selected",
      "press": "{!c.getSelected}"
     }
    ],
    "ui:inputText": [
     {
      "placeholder": "index",
      "value": "{!v.index}"
     },
     {
      "placeholder": "count",
      "value": "{!v.count}"
     },
     {
      "placeholder": "row index",
      "value": "{!v.rowIndex}"
     },
     {
      "placeholder": "class",
      "value": "{!v.className}"
     }
    ],
    "ui:dataGrid": [
     {
      "aura:id": "grid",
      "aura:flavor": "{!v.tableFlavor}",
      "mode": "{!v.mode}",
      "sortBy": "{!v.sortBy}",
      "summary": "Assorted Data for testing",
      "useRowHeaders": "true"
     }
    ],
    "aura:set": [
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "actionDelegate"
     },
     {
      "attribute": "left"
     },
     {
      "attribute": "right"
     }
    ],
    "ui:dataGridSelectionColumn": [
     {}
    ],
    "ui:dataGridColumn": [
     {
      "label": "Id",
      "name": "id",
      "sortable": "true",
      "ascLabel": "ASC",
      "descLabel": "DSC"
     },
     {
      "label": "Subject",
      "name": "subject"
     },
     {
      "label": "Name",
      "name": "who.name"
     },
     {
      "label": "Related To",
      "name": "what.name"
     },
     {
      "label": "Due Date",
      "name": "activityDate"
     }
    ],
    "ui:dataGridActionColumn": [
     {
      "label": "Actions"
     }
    ],
    "ui:actionButton": [
     {
      "name": "disable",
      "label": "Disable",
      "index": "{!index}",
      "disabled": "{!disabled}"
     },
     {
      "name": "enable",
      "label": "Enable",
      "index": "{!index}",
      "disabled": "{!!disabled}"
     },
     {
      "name": "toggleClass",
      "label": "Toggle Class",
      "index": "{!index}",
      "disabled": "{!disabled}"
     }
    ],
    "uiExamples:dataGridKitchenSinkDataProvider": [
     {
      "aura:id": "data",
      "sortBy": "{!v.sortBy}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:actionDelegate": [
     {
      "onaction": "{!c.handleAction}"
     }
    ],
    "ui:pagerNextPrevious": [
     {
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:pagerPageInfo": [
     {
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:block": [
     {}
    ],
    "aura:iteration": [
     {
      "aura:id": "items",
      "var": "item",
      "items": "{!v.gridItems}"
     },
     {
      "aura:id": "selectedItems",
      "var": "item",
      "items": "{!v.gridSelectedItems}"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!item.id + ':' + item.subject + ':' + item.who.name + ':' + item.what.name + ':' + item.activityDate}"
     },
     {
      "value": "{!item.id + ':' + item.subject + ':' + item.who.name + ':' + item.what.name + ':' + item.activityDate}"
     }
    ]
   }
  },
  "dataGridKitchenSinkDataProvider.cmp": {
   "attributes": {
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "empty": {
     "name": "empty",
     "type": "Boolean",
     "default": "false"
    },
    "throwError": {
     "name": "throwError",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "provide": {
     "name": "provide",
     "action": "{!c.handleProvide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "dataProviderExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:list": [
     {
      "aura:id": "list",
      "itemVar": "row",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "uiExamples:infiniteDataProvider": [
     {
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     }
    ]
   }
  },
  "date.cmp": {
   "attributes": {
    "today": {
     "name": "today",
     "type": "Date",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputDate": [
     {
      "aura:id": "expdate",
      "label": "Today's Date",
      "class": "field",
      "value": "{!v.today}",
      "displayDatePicker": "true"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputDate": [
     {
      "aura:id": "oDate",
      "value": ""
     }
    ]
   }
  },
  "datePicker.cmp": {
   "attributes": {
    "selectedDate": {
     "name": "selectedDate",
     "type": "Date"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:datePicker": [
     {
      "aura:id": "datePicker",
      "visible": "true",
      "selectDate": "{!c.handleSelectedDate}"
     }
    ],
    "ui:inputDateTrigger": [
     {},
     {},
     {},
     {},
     {}
    ],
    "ui:datePickerManager": [
     {}
    ]
   }
  },
  "datetime.cmp": {
   "attributes": {
    "today": {
     "name": "today",
     "type": "Date",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputDateTime": [
     {
      "aura:id": "today",
      "label": "Time",
      "class": "field",
      "value": "",
      "displayDatePicker": "true"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputDateTime": [
     {
      "aura:id": "oDateTime",
      "value": ""
     }
    ]
   }
  },
  "detailPopover.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:block": [
     {}
    ],
    "aura:set": [
     {
      "attribute": "left"
     },
     {
      "attribute": "right"
     }
    ]
   }
  },
  "dragAndDropExample.cmp": {
   "attributes": {
    "_context1": {
     "name": "_context1",
     "access": "private",
     "type": "Object"
    },
    "_context2": {
     "name": "_context2",
     "access": "private",
     "type": "Object"
    },
    "_context3": {
     "name": "_context3",
     "access": "private",
     "type": "Object"
    },
    "_accessibilityComponent": {
     "name": "_accessibilityComponent",
     "access": "private",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:dragAndDropAccessibilityMenu": [
     {
      "aura:id": "accessibilityComponent"
     }
    ],
    "ui:dropzone": [
     {
      "inContextOf": "{!v._context1}",
      "label": "List A",
      "types": "move,copy",
      "class": "sampleList",
      "dragOverClass": "dragOver",
      "drop": "{!c.handleDrop}"
     },
     {
      "inContextOf": "{!v._context2}",
      "label": "List B",
      "types": "move",
      "class": "sampleList",
      "dragOverClass": "dragOver",
      "drop": "{!c.handleDrop}"
     },
     {
      "inContextOf": "{!v._context3}",
      "label": "List C",
      "types": "copy",
      "class": "sampleList",
      "dragOverClass": "dragOver",
      "drop": "{!c.handleDrop}"
     }
    ],
    "ui:infinitelist": [
     {
      "aura:id": "list",
      "itemVar": "item"
     },
     {
      "aura:id": "list",
      "itemVar": "item"
     },
     {
      "aura:id": "list",
      "itemVar": "item"
     }
    ],
    "aura:set": [
     {
      "attribute": "header"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "header"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "header"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "ui:outputLabel": [
     {
      "value": "Move & Copy Dropzone"
     },
     {
      "value": "Move Dropzone"
     },
     {
      "value": "Copy Dropzone"
     }
    ],
    "uiExamples:dragAndDropProvider": [
     {
      "prefix": "Acme (move)",
      "count": "5"
     },
     {
      "prefix": "Foo (move)",
      "count": "3"
     },
     {
      "prefix": "Bar (copy)",
      "count": "4"
     }
    ],
    "ui:draggable": [
     {
      "inContextOf": "{!v._context1}",
      "dataTransfer": "{!item}",
      "type": "move",
      "dragEnd": "{!c.handleDragEnd}",
      "class": "sampleCard",
      "dragClass": "dragging",
      "dragImageClass": "dragImage",
      "accessibilityComponent": "{!v._accessibilityComponent}"
     },
     {
      "inContextOf": "{!v._context2}",
      "dataTransfer": "{!item}",
      "type": "move",
      "dragEnd": "{!c.handleDragEnd}",
      "class": "sampleCard",
      "dragClass": "dragging",
      "accessibilityComponent": "{!v._accessibilityComponent}"
     },
     {
      "inContextOf": "{!v._context3}",
      "dataTransfer": "{!item}",
      "type": "copy",
      "dragEnd": "{!c.handleDragEnd}",
      "class": "sampleCard",
      "dragClass": "dragging",
      "accessibilityComponent": "{!v._accessibilityComponent}"
     }
    ]
   }
  },
  "dragAndDropProvider.cmp": {
   "attributes": {
    "prefix": {
     "name": "prefix",
     "type": "String",
     "default": "Acme"
    },
    "count": {
     "name": "count",
     "type": "Integer",
     "default": "5"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "email.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputEmail": [
     {
      "aura:id": "email",
      "label": "Email",
      "class": "field",
      "value": "manager@email.com"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputEmail": [
     {
      "aura:id": "oEmail",
      "value": "Email"
     }
    ]
   }
  },
  "gridActionCell.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "infiniteDataProvider.cmp": {
   "attributes": {
    "listType": {
     "name": "listType",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "infiniteList.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "uiExamples:mobileViewport": [
     {}
    ],
    "ui:scroller": [
     {
      "onPullToRefresh": "{!c.handleRefresh}",
      "onPullToShowMore": "{!c.handleShowMore}"
     }
    ],
    "ui:infiniteList": [
     {
      "aura:id": "list",
      "itemVar": "item",
      "enableRowSwipe": "true"
     }
    ],
    "aura:set": [
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "dataProvider"
     }
    ],
    "uiExamples:infiniteListRow": [
     {
      "item": "{!item}"
     }
    ],
    "uiExamples:infiniteListDataProvider": [
     {}
    ]
   }
  },
  "infiniteListDataProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.handleProvide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "infiniteListRow.cmp": {
   "attributes": {
    "item": {
     "name": "item",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "swipeBody"
     }
    ],
    "ui:button": [
     {
      "label": "Edit",
      "press": "{!c.handleEdit}"
     },
     {
      "label": "Delete"
     }
    ]
   }
  },
  "inputExample.cmp": {
   "attributes": {
    "today": {
     "name": "today",
     "type": "Date",
     "default": ""
    },
    "deadline": {
     "name": "deadline",
     "type": "Date"
    },
    "display": {
     "name": "display",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "name",
      "label": "Expense",
      "class": "field",
      "value": "My Expense",
      "required": "true"
     }
    ],
    "ui:inputNumber": [
     {
      "aura:id": "num",
      "label": "Org Code",
      "class": "field",
      "value": "123",
      "required": "true"
     }
    ],
    "ui:inputSecret": [
     {
      "aura:id": "secret",
      "label": "Pin",
      "class": "field",
      "value": "123456"
     }
    ],
    "ui:inputEmail": [
     {
      "aura:id": "email",
      "label": "Approver's Email",
      "class": "field",
      "value": "manager@email.com"
     }
    ],
    "ui:inputPhone": [
     {
      "aura:id": "phone",
      "label": "Approver's Phone",
      "class": "field",
      "value": "415-123-4567"
     }
    ],
    "ui:inputDate": [
     {
      "aura:id": "expdate",
      "label": "Expense Date",
      "class": "field",
      "value": "{!v.today}",
      "displayDatePicker": "true"
     }
    ],
    "ui:inputCheckbox": [
     {
      "aura:id": "reimbursed",
      "label": "Reimbursed?",
      "value": "true"
     }
    ],
    "ui:inputTextArea": [
     {
      "aura:id": "comments",
      "label": "Comments",
      "value": "My comments",
      "rows": "5"
     }
    ],
    "ui:inputURL": [
     {
      "aura:id": "url",
      "label": "Venue URL",
      "class": "field",
      "value": "http://www.myURL.com"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "oName",
      "value": "Click Submit to see the input values.",
      "class": "output"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.display}"
     }
    ],
    "ui:outputNumber": [
     {
      "aura:id": "oNumber",
      "value": ""
     }
    ],
    "ui:outputEmail": [
     {
      "aura:id": "oEmail",
      "value": "Email"
     }
    ],
    "ui:outputPhone": [
     {
      "aura:id": "oPhone",
      "value": ""
     }
    ],
    "ui:outputDate": [
     {
      "aura:id": "oDate",
      "value": ""
     }
    ],
    "ui:outputDateTime": [
     {
      "aura:id": "oDateTime",
      "value": "",
      "format": "MMM dd, yyyy hh:mm:ss A"
     }
    ],
    "ui:outputCheckbox": [
     {
      "aura:id": "oCheckbox",
      "value": ""
     }
    ],
    "ui:outputTextArea": [
     {
      "aura:id": "oTextarea",
      "value": ""
     }
    ],
    "ui:outputURL": [
     {
      "aura:id": "oURL",
      "value": ""
     }
    ]
   }
  },
  "inputNumberExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputNumber": [
     {
      "aura:id": "inputCmp",
      "label": "Enter a number: "
     }
    ],
    "ui:button": [
     {
      "label": "Submit",
      "press": "{!c.validate}"
     }
    ],
    "ui:outputNumber": [
     {
      "aura:id": "outNum",
      "value": ""
     }
    ]
   }
  },
  "inputTextExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "color",
      "label": "Enter some text: ",
      "placeholder": "Blue"
     }
    ],
    "ui:button": [
     {
      "label": "Validate",
      "press": "{!c.checkInput}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outColor",
      "value": "",
      "class": "text"
     }
    ]
   }
  },
  "iterationExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "1,2,3,4,5",
      "var": "item"
     }
    ]
   }
  },
  "libraryExample.cmp": {
   "attributes": {
    "message": {
     "name": "message",
     "default": "Error",
     "type": "String",
     "description": "Displays library invocation message."
    }
   },
   "imports": {
    "uiExamples:libraryExternal": {
     "library": "uiExamples:libraryExternal",
     "property": "libraryDoc"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "this",
     "action": "{!c.initialize}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "mobileViewport.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "modalContent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputExample.cmp": {
   "attributes": {
    "myText": {
     "name": "myText",
     "type": "String",
     "default": "A string waiting to change."
    },
    "myNum": {
     "name": "myNum",
     "type": "Decimal",
     "default": "10.10"
    },
    "myCurr": {
     "name": "myCurr",
     "type": "Decimal",
     "default": "50000"
    },
    "myBool": {
     "name": "myBool",
     "type": "Boolean",
     "default": "true"
    },
    "myDate": {
     "name": "myDate",
     "type": "Date",
     "default": "2014-09-29"
    },
    "myDateTime": {
     "name": "myDateTime",
     "type": "Date",
     "default": "2014-09-29T00:17:08z"
    },
    "myTextArea": {
     "name": "myTextArea",
     "type": "String",
     "default": "This is a string"
    },
    "myURL": {
     "name": "myURL",
     "type": "String",
     "default": "http://www.google.com"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Change",
      "press": "{!c.change}"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!v.myText}",
      "label": "outputText"
     }
    ],
    "ui:outputNumber": [
     {
      "value": "{!v.myNum}",
      "format": ".00"
     }
    ],
    "ui:outputCurrency": [
     {
      "aura:id": "curr",
      "value": "{!v.myCurr}"
     }
    ],
    "ui:outputCheckbox": [
     {
      "value": "{!v.myBool}"
     }
    ],
    "ui:outputDate": [
     {
      "value": "{!v.myDate}"
     }
    ],
    "ui:outputDateTime": [
     {
      "value": "{!v.myDateTime}"
     }
    ],
    "ui:outputEmail": [
     {
      "value": "abc@email.com",
      "label": "abc@email.com"
     }
    ],
    "ui:outputPhone": [
     {
      "value": "415-123-4567"
     }
    ],
    "ui:outputTextArea": [
     {
      "value": "{!v.myTextArea}",
      "label": "my output"
     }
    ],
    "ui:outputURL": [
     {
      "value": "{!v.myURL}",
      "label": "{!v.myURL}"
     }
    ]
   }
  },
  "panelContent.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "panelDialogExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "press": "{!c.showNonModal}",
      "aura:id": "detailTrigger",
      "label": "Show Non-Modal Dialog"
     },
     {
      "press": "{!c.showModal}",
      "aura:id": "forModal",
      "label": "Show Modal Dialog"
     }
    ],
    "ui:panelManager": [
     {}
    ]
   }
  },
  "panelFooter.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "class": "flat-btn",
      "label": "open new panel",
      "press": "{!c.openNewPanel}"
     },
     {
      "class": "flat-btn",
      "label": "Cancel"
     },
     {
      "class": "flat-btn",
      "label": "Save"
     }
    ]
   }
  },
  "panelHeader.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "notify": {
     "name": "notify",
     "type": "ui:notify"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "panelPositioningExample.cmp": {
   "attributes": {
    "advanced": {
     "name": "advanced",
     "default": "false",
     "type": "Boolean"
    }
   },
   "imports": {
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "positioningLib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "disabled": "{!v.advanced}",
      "aura:id": "direction",
      "label": "Direction"
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "north"
     },
     {
      "text": "east"
     },
     {
      "text": "west"
     },
     {
      "text": "south"
     },
     {
      "text": "northwest"
     },
     {
      "text": "northeast"
     },
     {
      "text": "southeast"
     },
     {
      "text": "southwest"
     }
    ],
    "ui:inputCheckbox": [
     {
      "label": "inside",
      "value": "false",
      "aura:id": "isInside"
     },
     {
      "change": "{!c.handleChange}",
      "label": "Use Advanced",
      "value": "false",
      "aura:id": "isAdvanced"
     }
    ],
    "ui:inputNumber": [
     {
      "aura:id": "pad",
      "label": "pad",
      "value": "15"
     },
     {
      "aura:id": "padTop",
      "label": "padTop",
      "value": ""
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.advanced}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "align",
      "label": "Align",
      "value": "left bottom"
     },
     {
      "aura:id": "targetAlign",
      "label": "Target Align",
      "value": "left top"
     }
    ],
    "ui:button": [
     {
      "label": "GO!",
      "press": "{!c.handlePress}"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ]
   }
  },
  "phone.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputPhone": [
     {
      "aura:id": "phone",
      "label": "Phone Number",
      "class": "field",
      "value": "415-123-4567"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputPhone": [
     {
      "aura:id": "oPhone",
      "value": ""
     }
    ]
   }
  },
  "popupExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:popup": [
     {
      "label": "trigger"
     },
     {
      "label": "trigger"
     },
     {
      "label": "trigger"
     }
    ],
    "ui:popupTrigger": [
     {},
     {},
     {}
    ],
    "ui:popupTarget": [
     {},
     {
      "attachToBody": "true",
      "closeOnClickInside": "true"
     },
     {
      "attachToBody": "true",
      "curtain": "true"
     }
    ]
   }
  },
  "radio.cmp": {
   "attributes": {
    "stages": {
     "name": "stages",
     "type": "String[]",
     "default": "Any,Open,Closed,Closed Won"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.stages}",
      "var": "stage"
     }
    ],
    "ui:inputRadio": [
     {
      "label": "{!stage}",
      "change": "{!c.onRadio}"
     },
     {
      "aura:id": "r0",
      "name": "others",
      "label": "Prospecting",
      "change": "{!c.onGroup}"
     },
     {
      "aura:id": "r1",
      "name": "others",
      "label": "Qualification",
      "change": "{!c.onGroup}",
      "value": "true"
     },
     {
      "aura:id": "r2",
      "name": "others",
      "label": "Needs Analysis",
      "change": "{!c.onGroup}"
     },
     {
      "aura:id": "r3",
      "name": "others",
      "label": "Closed Lost",
      "change": "{!c.onGroup}"
     }
    ],
    "ui:outputText": [
     {
      "class": "result",
      "aura:id": "radioResult",
      "value": ""
     },
     {
      "class": "result",
      "aura:id": "radioGroupResult",
      "value": ""
     }
    ]
   }
  },
  "renderIfExample.cmp": {
   "attributes": {
    "display": {
     "name": "display",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderif": [
     {
      "isTrue": "{!v.display}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "secret.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputSecret": [
     {
      "aura:id": "secret",
      "label": "Pin",
      "class": "field",
      "value": "123456"
     }
    ]
   }
  },
  "tabsetExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tabset": [
     {
      "class": "tabset",
      "lazyRenderTabs": "{!true}"
     },
     {
      "aura:id": "overflowTabs",
      "class": "tabset overflowTabset",
      "lazyRenderTabs": "{!true}",
      "useOverflowMenu": "true"
     },
     {
      "class": "tabset left"
     },
     {
      "class": "tabset"
     },
     {
      "aura:id": "navigationTabset",
      "class": "tabset"
     },
     {
      "class": "tabset"
     },
     {
      "aura:id": "addableTabset",
      "class": "tabset"
     },
     {
      "class": "tabset",
      "tabs": "{!m.tabs}"
     }
    ],
    "ui:tab": [
     {
      "title": "Short Text"
     },
     {
      "title": "Long Text"
     },
     {
      "title": "tab with input text"
     },
     {
      "title": "tab with iframe"
     },
     {
      "title": "Short Text"
     },
     {
      "title": "Long Text"
     },
     {
      "title": "tab with input text"
     },
     {
      "title": "tab with iframe"
     },
     {
      "title": "More Tab 1"
     },
     {
      "title": "More Tab 2"
     },
     {
      "title": "Side Tab 1"
     },
     {
      "title": "Side Tab 2"
     },
     {
      "title": "Side Tab 3"
     },
     {
      "title": "Side Tab 4"
     },
     {
      "title": "Tab 1"
     },
     {
      "title": "Tab 2"
     },
     {
      "title": "Tab 3",
      "active": "{!true}"
     },
     {
      "title": "Tab 4"
     },
     {
      "title": "Tab 1",
      "closable": "true"
     },
     {
      "title": "Tab 2",
      "closable": "true"
     },
     {
      "title": "Tab 3",
      "closable": "true"
     },
     {
      "title": "Tab 4",
      "closable": "true"
     },
     {
      "title": "Tab 1"
     },
     {
      "title": "Tab 2"
     },
     {
      "aura:id": "dirtyTab",
      "title": "Event Tab",
      "beforeActivate": "{!c.onBeforeActivate}"
     },
     {
      "title": "Tab Content created dynamically",
      "onActivated": "{!c.loadContent}"
     },
     {
      "title": "Tab 1"
     },
     {
      "title": "Tab 2"
     }
    ],
    "ui:inputText": [
     {
      "label": "My Input Text",
      "value": "",
      "placeholder": "input text here"
     },
     {
      "value": "",
      "label": "Name",
      "placeholder": "input text"
     },
     {
      "label": "My Input Text",
      "value": "",
      "placeholder": "input text here"
     },
     {
      "value": "",
      "label": "Name",
      "placeholder": "input text"
     },
     {
      "value": "",
      "label": "Name",
      "placeholder": "input text"
     },
     {
      "value": "",
      "label": "Name",
      "placeholder": "input text"
     },
     {
      "value": "",
      "label": "Name",
      "placeholder": "input text"
     },
     {
      "value": "",
      "label": "Name",
      "placeholder": "input text"
     },
     {
      "class": "tabsetInput",
      "label": "Tab Title",
      "aura:id": "inputTabTitle",
      "placeholder": "title"
     },
     {
      "class": "tabsetInput",
      "label": "Tab Name",
      "aura:id": "inputTabName",
      "placeholder": "name"
     }
    ],
    "ui:button": [
     {
      "class": "previous",
      "press": "{!c.onPrevious}",
      "label": "Previous Tab"
     },
     {
      "class": "next",
      "press": "{!c.onNext}",
      "label": "Next Tab"
     },
     {
      "label": "Mark Event Tab Dirty",
      "press": "{!c.markDirty}"
     },
     {
      "label": "Clear Event Tab",
      "press": "{!c.clearDirty}"
     },
     {
      "label": "Add Tab",
      "press": "{!c.addTab}"
     }
    ],
    "aura:set": [
     {
      "attribute": "icon"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "dirtyTabTitle",
      "value": ""
     }
    ],
    "ui:inputTextArea": [
     {
      "class": "tabsetInput",
      "label": "Tab Content",
      "aura:id": "inputTabContent",
      "placeholder": "content"
     }
    ],
    "ui:inputCheckbox": [
     {
      "class": "tabsetInput",
      "aura:id": "inputTabClosable",
      "value": "closable"
     },
     {
      "class": "tabsetInput",
      "aura:id": "inputTabActive",
      "value": "active"
     }
    ]
   }
  },
  "text.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "name",
      "label": "Enter some text",
      "class": "field",
      "value": "My Text"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "oName",
      "value": ""
     }
    ]
   }
  },
  "textarea.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputTextArea": [
     {
      "aura:id": "comments",
      "label": "Comments",
      "value": "My comments",
      "rows": "5"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputTextArea": [
     {
      "aura:id": "oTextarea",
      "value": ""
     }
    ]
   }
  },
  "tooltipExample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tooltip": [
     {
      "advanced": "true",
      "triggerClass": "my-trigger-class",
      "tooltipBody": "You have to use the advanced mode in this case. Also it is very, very large and could never fit on screen in some cases. Wow, this is a lot of text! It just goes on and on and on. It is a whole entire paragraph."
     },
     {
      "fadeInDuration": "1000",
      "tooltipBody": "corpus means body"
     },
     {
      "advanced": "true",
      "triggerClass": "my-trigger-class",
      "tooltipBody": "You have to use the advanced mode in this case. Also it is very, very large and could never fit on screen in some cases. Wow, this is a lot of text! It just goes on and on and on. It is a whole entire paragraph."
     },
     {
      "advanced": "true",
      "direction": "west",
      "tooltipBody": "This is another one"
     },
     {
      "class": "magic",
      "tooltipBody": "Click here for more info"
     },
     {
      "fadeOutDuration": "500",
      "triggerClass": "my-trigger-class",
      "tooltipBody": "Please?"
     },
     {
      "fadeInDuration": "2000",
      "triggerClass": "my-trigger-class",
      "tooltipBody": "We PROMISE we will never, ever spam you. Never, ever."
     },
     {
      "delay": "1000",
      "fadeInDuration": "500",
      "advanced": "false",
      "fadeOutDuration": "500",
      "tooltipBody": "TPS reports now require a cover sheet"
     },
     {
      "advanced": "true",
      "trigger": "focus",
      "tooltipBody": "Focus will toggle this"
     },
     {
      "class": "banana",
      "advanced": "true",
      "direction": "east",
      "disabled": "true",
      "trigger": "click",
      "tooltipBody": "Focus will toggle this too"
     },
     {
      "advanced": "true",
      "trigger": "none",
      "aura:id": "theTip",
      "tooltipBody": "You have to use the advanced mode in this case. Also it is very, very large and could never fit on screen in some cases. Wow, this is a lot of text! It just goes on and on and on. It is a whole entire paragraph."
     }
    ],
    "ui:inputText": [
     {
      "placeholder": "Show tooltip on focus",
      "type": "text",
      "aura:id": "mrfocus"
     }
    ],
    "ui:button": [
     {
      "label": "click me",
      "press": "{!c.handleClick}"
     }
    ],
    "ui:containerManager": [
     {}
    ]
   }
  },
  "url.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputURL": [
     {
      "aura:id": "url",
      "label": "Venue URL",
      "class": "field",
      "value": "http://www.myURL.com"
     }
    ],
    "ui:button": [
     {
      "class": "btn",
      "label": "Submit",
      "press": "{!c.setOutput}"
     }
    ],
    "ui:outputURL": [
     {
      "aura:id": "oURL",
      "value": ""
     }
    ]
   }
  },
  "virtualDataGridKitchenSink.cmp": {
   "attributes": {
    "tableFlavor": {
     "name": "tableFlavor",
     "type": "String",
     "default": "default"
    },
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "10"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalItems": {
     "name": "totalItems",
     "type": "Integer"
    },
    "index": {
     "name": "index",
     "type": "Integer"
    },
    "count": {
     "name": "count",
     "type": "Integer"
    },
    "className": {
     "name": "className",
     "type": "String"
    },
    "rowIndex": {
     "name": "rowIndex",
     "type": "Integer"
    },
    "gridItems": {
     "name": "gridItems",
     "type": "List"
    },
    "gridSelectedItems": {
     "name": "gridSelectedItems",
     "type": "List"
    },
    "provideNoData": {
     "name": "provideNoData",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.currentPage}",
     "action": "{!c.handleCurrentPageChange}"
    },
    "gridAction": {
     "name": "gridAction",
     "event": "ui:gridAction",
     "action": "{!c.handleGridEvents}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "class": "kitchenButton",
      "label": "Change Columns",
      "press": "{!c.switchColumn}"
     },
     {
      "class": "kitchenButton",
      "label": "Re-fire datagrid's provide",
      "press": "{!c.replaceData}"
     },
     {
      "class": "kitchenButton",
      "label": "Fire Data Provider With Empty Data",
      "press": "{!c.emptyData}"
     },
     {
      "label": "Spit Out Items",
      "press": "{!c.spit}"
     }
    ],
    "ui:inputCheckbox": [
     {
      "label": "Provide no data",
      "value": "{!v.provideNoData}"
     }
    ],
    "ui:outputText": [
     {
      "label": "Sorting By:",
      "value": "{!v.sortBy}"
     },
     {
      "value": "{!item.id}"
     },
     {
      "value": "{!item.subject}"
     },
     {
      "value": "{!item.who.name}"
     },
     {
      "value": "{!item.what.name}"
     },
     {
      "value": "{!item.activityDate}"
     },
     {
      "value": "{!item.id + ':' + item.subject + ':' + item.who.name + ':' + item.what.name + ':' + item.activityDate}"
     }
    ],
    "ui:virtualDataGrid": [
     {
      "aura:id": "grid",
      "class": "longGrid",
      "aura:flavor": "{!v.tableFlavor}",
      "onsort": "{!c.onsort}",
      "useRowHeaders": "true",
      "fixedHeader": "true"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataModel"
     }
    ],
    "ui:dataGridColumn": [
     {
      "name": "id",
      "label": "Id",
      "sortable": "true"
     },
     {
      "name": "subject",
      "label": "Subject",
      "sortable": "true"
     },
     {
      "name": "who.name",
      "label": "Name"
     },
     {
      "name": "what.name",
      "label": "Related To"
     },
     {
      "name": "activityDate",
      "label": "Due Date"
     },
     {
      "name": "",
      "label": "Selection",
      "hideLabel": "true"
     }
    ],
    "uiExamples:gridActionCell": [
     {}
    ],
    "uiExamples:dataGridKitchenSinkDataProvider": [
     {
      "aura:id": "data",
      "sortBy": "{!v.sortBy}",
      "totalItems": "100",
      "pageSize": "100",
      "throwError": "{!v.provideNoData}"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "items",
      "var": "item",
      "items": "{!v.gridItems}"
     }
    ]
   }
  }
 },
 "appCache": {
  "additionalUrls.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global",
      "useAppcache": "true",
      "render": "client",
      "controller": "java://org.auraframework.components.test.java.controller.TestController",
      "additionalAppCacheURLs": "{!c.getAppCacheUrls}"
     }
    ]
   }
  },
  "appCacheEvents.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global",
      "useAppcache": "true",
      "render": "client"
     }
    ]
   }
  },
  "nopreload.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global",
      "useAppcache": "true",
      "render": "client"
     }
    ]
   }
  },
  "testApp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global",
      "useAppcache": "true",
      "render": "client"
     }
    ]
   }
  },
  "withpreload.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global",
      "useAppcache": "true",
      "render": "client"
     }
    ],
    "appcache:slate": [
     {}
    ]
   }
  },
  "slate.cmp": {
   "attributes": {
    "output": {
     "name": "output",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "button for css cache test on browsers"
     }
    ]
   }
  },
  "unsupportedUrls.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "attributesTest": {
  "caseSensitivity.app": {
   "attributes": {
    "attr": {
     "name": "attr",
     "type": "String",
     "default": "An Aura of Lightning Lumenated the Plume"
    },
    "map": {
     "name": "map",
     "type": "Object",
     "default": "{!m.map}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
      "access": "GLOBAL"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputText",
      "value": "{!v.map.fruit}"
     }
    ]
   }
  },
  "attributeTypes.cmp": {
   "attributes": {
    "typeMap": {
     "name": "typeMap",
     "type": "Map"
    },
    "typeInteger": {
     "name": "typeInteger",
     "type": "Integer"
    },
    "typeString": {
     "name": "typeString",
     "type": "String"
    },
    "typeList": {
     "name": "typeList",
     "type": "List"
    },
    "typeStringList": {
     "name": "typeStringList",
     "type": "String[]"
    },
    "typeMapList": {
     "name": "typeMapList",
     "type": "Map[]"
    },
    "typeSet": {
     "name": "typeSet",
     "type": "Set"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "caseInsensitiveChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "SIMPLEAttribute",
      "value": "childY"
     }
    ]
   }
  },
  "customAttributeType.cmp": {
   "attributes": {
    "pairAttr": {
     "name": "pairAttr",
     "type": "java://org.auraframework.util.type.CustomPairType",
     "default": "HouseNo$300"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "defaultValue.cmp": {
   "attributes": {
    "strAttributeWithNoDefaultValue": {
     "type": "String",
     "name": "strAttributeWithNoDefaultValue"
    },
    "strAttributeWithDefaultValue": {
     "type": "String",
     "name": "strAttributeWithDefaultValue",
     "default": "Aura"
    },
    "objAttributeWithNoDefaultValue": {
     "type": "Object",
     "name": "objAttributeWithNoDefaultValue"
    },
    "objAttributeWithDefaultValue": {
     "type": "Object",
     "name": "objAttributeWithDefaultValue",
     "default": "['red','green','blue']"
    },
    "listAttributeWithNoDefaultValue": {
     "type": "Boolean[]",
     "name": "listAttributeWithNoDefaultValue"
    },
    "listAttributeWithDefaultValue": {
     "type": "Boolean[]",
     "name": "listAttributeWithDefaultValue",
     "default": "true,false,true"
    },
    "mapAttributeWithNoDefaultValue": {
     "type": "Map",
     "name": "mapAttributeWithNoDefaultValue"
    },
    "mapAttributeWithDefaultValue": {
     "type": "Map",
     "name": "mapAttributeWithDefaultValue",
     "default": "{ a: 1, b: 2 }"
    },
    "componentDefault": {
     "type": "Aura.Component[]",
     "name": "componentDefault"
    },
    "booleanDefaultWithNoValue": {
     "type": "Boolean",
     "name": "booleanDefaultWithNoValue"
    },
    "booleanDefaultWithStringTrue": {
     "type": "Boolean",
     "name": "booleanDefaultWithStringTrue",
     "default": "true"
    },
    "booleanDefaultWithStringFalse": {
     "type": "Boolean",
     "name": "booleanDefaultWithStringFalse",
     "default": "false"
    },
    "booleanDefaultWithLiteralExpTrue": {
     "type": "Boolean",
     "name": "booleanDefaultWithLiteralExpTrue",
     "default": "{!true}"
    },
    "booleanDefaultWithLiteralExpFalse": {
     "type": "Boolean",
     "name": "booleanDefaultWithLiteralExpFalse",
     "default": "{!false}"
    },
    "booleanDefaultWithViewExpTrue": {
     "type": "Boolean",
     "name": "booleanDefaultWithViewExpTrue",
     "default": "{!v.booleanDefaultWithStringTrue}"
    },
    "booleanDefaultWithViewExpFalse": {
     "type": "Boolean",
     "name": "booleanDefaultWithViewExpFalse",
     "default": "{!!v.booleanDefaultWithStringTrue}"
    },
    "dateDefaultWithNoValue": {
     "type": "Date",
     "name": "dateDefaultWithNoValue"
    },
    "dateDefaultWithString": {
     "type": "Date",
     "name": "dateDefaultWithString",
     "default": "2013-03-06"
    },
    "dateDefaultWithLiteralExp": {
     "type": "Date",
     "name": "dateDefaultWithLiteralExp",
     "default": "{!'2013-03-06'}"
    },
    "dateDefaultWithTimeString": {
     "type": "Date",
     "name": "dateDefaultWithTimeString",
     "default": "2013-03-06T10:17:36.789Z"
    },
    "dateDefaultWithTimeLiteralExp": {
     "type": "Date",
     "name": "dateDefaultWithTimeLiteralExp",
     "default": "{!'2013-03-06T10:17:36.789Z'}"
    },
    "dateTimeDefaultWithNoValue": {
     "type": "DateTime",
     "name": "dateTimeDefaultWithNoValue"
    },
    "dateTimeDefaultZero": {
     "type": "DateTime",
     "name": "dateTimeDefaultZero",
     "default": "0"
    },
    "dateTimeDefaultWithString": {
     "type": "DateTime",
     "name": "dateTimeDefaultWithString",
     "default": "123456789"
    },
    "dateTimeDefaultWithLiteralExp": {
     "type": "DateTime",
     "name": "dateTimeDefaultWithLiteralExp",
     "default": "{!123456789}"
    },
    "decimalDefaultWithNoValue": {
     "type": "Decimal",
     "name": "decimalDefaultWithNoValue"
    },
    "decimalDefaultWithStringPositiveInt": {
     "type": "Decimal",
     "name": "decimalDefaultWithStringPositiveInt",
     "default": "123"
    },
    "decimalDefaultWithStringNegativeInt": {
     "type": "Decimal",
     "name": "decimalDefaultWithStringNegativeInt",
     "default": "-123"
    },
    "decimalDefaultWithStringPositiveDecimal": {
     "type": "Decimal",
     "name": "decimalDefaultWithStringPositiveDecimal",
     "default": "168.34"
    },
    "decimalDefaultWithStringNegativeDecimal": {
     "type": "Decimal",
     "name": "decimalDefaultWithStringNegativeDecimal",
     "default": "-168.34"
    },
    "decimalDefaultWithLiteralExpPositiveInt": {
     "type": "Decimal",
     "name": "decimalDefaultWithLiteralExpPositiveInt",
     "default": "{!123}"
    },
    "decimalDefaultWithLiteralExpNegativeInt": {
     "type": "Decimal",
     "name": "decimalDefaultWithLiteralExpNegativeInt",
     "default": "{!-123}"
    },
    "decimalDefaultWithLiteralExpPositiveDecimal": {
     "type": "Decimal",
     "name": "decimalDefaultWithLiteralExpPositiveDecimal",
     "default": "{!168.34}"
    },
    "decimalDefaultWithLiteralExpNegativeDecimal": {
     "type": "Decimal",
     "name": "decimalDefaultWithLiteralExpNegativeDecimal",
     "default": "{!-168.34}"
    },
    "decimalDefaultWithExpView": {
     "type": "Decimal",
     "name": "decimalDefaultWithExpView",
     "default": "{!v.decimalDefaultWithStringPositiveDecimal}"
    },
    "decimalDefaultWithExpression": {
     "type": "Decimal",
     "name": "decimalDefaultWithExpression",
     "default": "{!v.decimalDefaultWithStringPositiveDecimal + v.decimalDefaultWithLiteralExpNegativeDecimal + 0.3}"
    },
    "doubleDefaultWithNoValue": {
     "type": "Double",
     "name": "doubleDefaultWithNoValue"
    },
    "doubleDefaultWithStringPositiveInt": {
     "type": "Double",
     "name": "doubleDefaultWithStringPositiveInt",
     "default": "123"
    },
    "doubleDefaultWithStringNegativeInt": {
     "type": "Double",
     "name": "doubleDefaultWithStringNegativeInt",
     "default": "-123"
    },
    "doubleDefaultWithStringPositiveDecimal": {
     "type": "Double",
     "name": "doubleDefaultWithStringPositiveDecimal",
     "default": "168.34"
    },
    "doubleDefaultWithStringNegativeDecimal": {
     "type": "Double",
     "name": "doubleDefaultWithStringNegativeDecimal",
     "default": "-168.34"
    },
    "doubleDefaultWithLiteralExpPositiveInt": {
     "type": "Double",
     "name": "doubleDefaultWithLiteralExpPositiveInt",
     "default": "{!123}"
    },
    "doubleDefaultWithLiteralExpNegativeInt": {
     "type": "Double",
     "name": "doubleDefaultWithLiteralExpNegativeInt",
     "default": "{!-123}"
    },
    "doubleDefaultWithLiteralExpPositiveDecimal": {
     "type": "Double",
     "name": "doubleDefaultWithLiteralExpPositiveDecimal",
     "default": "{!168.34}"
    },
    "doubleDefaultWithLiteralExpNegativeDecimal": {
     "type": "Double",
     "name": "doubleDefaultWithLiteralExpNegativeDecimal",
     "default": "{!-168.34}"
    },
    "doubleDefaultWithExpView": {
     "type": "Double",
     "name": "doubleDefaultWithExpView",
     "default": "{!v.doubleDefaultWithStringPositiveDecimal}"
    },
    "doubleDefaultWithExpression": {
     "type": "Double",
     "name": "doubleDefaultWithExpression",
     "default": "{!v.doubleDefaultWithStringPositiveDecimal + v.doubleDefaultWithLiteralExpNegativeDecimal + 0.3}"
    },
    "integerDefaultWithNoValue": {
     "type": "Integer",
     "name": "integerDefaultWithNoValue"
    },
    "integerDefaultWithStringPositiveInt": {
     "type": "Integer",
     "name": "integerDefaultWithStringPositiveInt",
     "default": "123"
    },
    "integerDefaultWithStringNegativeInt": {
     "type": "Integer",
     "name": "integerDefaultWithStringNegativeInt",
     "default": "-123"
    },
    "integerDefaultWithStringPositiveDecimal": {
     "type": "Integer",
     "name": "integerDefaultWithStringPositiveDecimal",
     "default": "168.34"
    },
    "integerDefaultWithLiteralExpPositiveInt": {
     "type": "Integer",
     "name": "integerDefaultWithLiteralExpPositiveInt",
     "default": "{!123}"
    },
    "integerDefaultWithLiteralExpNegativeInt": {
     "type": "Integer",
     "name": "integerDefaultWithLiteralExpNegativeInt",
     "default": "{!-123}"
    },
    "integerDefaultWithExpView": {
     "type": "Integer",
     "name": "integerDefaultWithExpView",
     "default": "{!v.integerDefaultWithStringPositiveInt}"
    },
    "integerDefaultWithExpression": {
     "type": "Integer",
     "name": "integerDefaultWithExpression",
     "default": "{!v.integerDefaultWithStringPositiveInt + v.integerDefaultWithLiteralExpPositiveInt + 4}"
    },
    "longDefaultWithNoValue": {
     "type": "Long",
     "name": "longDefaultWithNoValue"
    },
    "longDefaultWithStringPositiveInt": {
     "type": "Long",
     "name": "longDefaultWithStringPositiveInt",
     "default": "123"
    },
    "longDefaultWithStringNegativeInt": {
     "type": "Long",
     "name": "longDefaultWithStringNegativeInt",
     "default": "-123"
    },
    "longDefaultWithStringPositiveDecimal": {
     "type": "Long",
     "name": "longDefaultWithStringPositiveDecimal",
     "default": "168.34"
    },
    "longDefaultWithLiteralExpPositiveInt": {
     "type": "Long",
     "name": "longDefaultWithLiteralExpPositiveInt",
     "default": "{!123}"
    },
    "longDefaultWithLiteralExpNegativeInt": {
     "type": "Long",
     "name": "longDefaultWithLiteralExpNegativeInt",
     "default": "{!-123}"
    },
    "longDefaultWithExpView": {
     "type": "Long",
     "name": "longDefaultWithExpView",
     "default": "{!v.longDefaultWithStringPositiveInt}"
    },
    "longDefaultWithExpression": {
     "type": "Long",
     "name": "longDefaultWithExpression",
     "default": "{!v.longDefaultWithStringPositiveInt + v.longDefaultWithLiteralExpPositiveInt + 4}"
    },
    "stringDefaultWithNoValue": {
     "type": "String",
     "name": "stringDefaultWithNoValue"
    },
    "stringDefaultWithString": {
     "type": "String",
     "name": "stringDefaultWithString",
     "default": "test string"
    },
    "stringDefaultWithStringEmptyString": {
     "type": "String",
     "name": "stringDefaultWithStringEmptyString",
     "default": ""
    },
    "stringDefaultWithLiteralExp": {
     "type": "String",
     "name": "stringDefaultWithLiteralExp",
     "default": "{!'test string'}"
    },
    "stringDefaultWithLiteralExpEmptyString": {
     "type": "String",
     "name": "stringDefaultWithLiteralExpEmptyString",
     "default": ""
    },
    "stringDefaultWithExpView": {
     "type": "String",
     "name": "stringDefaultWithExpView",
     "default": "{!v.stringDefaultWithString}"
    },
    "stringDefaultWithExpression": {
     "type": "String",
     "name": "stringDefaultWithExpression",
     "default": "{!v.stringDefaultWithString + ' bla'}"
    },
    "stringDefaultWithExpGVP": {
     "type": "String",
     "name": "stringDefaultWithExpGVP",
     "default": "{!$Label.AuraTestLabelSection.label_for_attribute_default_value_test}"
    },
    "setDefaultWithEmpty": {
     "type": "Set",
     "name": "setDefaultWithEmpty",
     "default": ""
    },
    "setDefaultWithString": {
     "type": "Set",
     "name": "setDefaultWithString",
     "default": "'a','b','c'"
    },
    "setDefaultWithBracketString": {
     "type": "Set",
     "name": "setDefaultWithBracketString",
     "default": "[1,2,3]"
    },
    "setDefaultWithStringContainBracket": {
     "type": "Set",
     "name": "setDefaultWithStringContainBracket",
     "default": "['[1]','2','3']"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "attributesTest:attributeTypes": [
     {
      "aura:id": "x",
      "typeSet": "['1',1,1]"
     }
    ]
   }
  },
  "defaultValueChild.cmp": {
   "attributes": {
    "booleanDefaultInherit": {
     "type": "Boolean",
     "name": "booleanDefaultInherit",
     "default": "{!v.booleanDefaultWithStringTrue}"
    },
    "decimalDefaultInherit": {
     "type": "Decimal",
     "name": "decimalDefaultInherit",
     "default": "{!v.decimalDefaultWithStringPositiveDecimal}"
    },
    "doubleDefaultInherit": {
     "type": "Double",
     "name": "doubleDefaultInherit",
     "default": "{!v.doubleDefaultWithStringNegativeDecimal}"
    },
    "integerDefaultInherit": {
     "type": "Integer",
     "name": "integerDefaultInherit",
     "default": "{!v.integerDefaultWithStringPositiveInt}"
    },
    "longDefaultInherit": {
     "type": "Long",
     "name": "longDefaultInherit",
     "default": "{!v.longDefaultWithStringNegativeInt}"
    },
    "stringDefaultInherit": {
     "type": "String",
     "name": "stringDefaultInherit",
     "default": "{!v.stringDefaultWithString}"
    },
    "objectDefaultInherit": {
     "type": "Object",
     "name": "objectDefaultInherit",
     "default": "{!v.objAttributeWithDefaultValue}"
    },
    "mapDefaultInherit": {
     "type": "Map",
     "name": "mapDefaultInherit",
     "default": "{!v.mapAttributeWithDefaultValue}"
    },
    "listDefaultInherit": {
     "type": "List",
     "name": "listDefaultInherit",
     "default": "{!v.listAttributeWithDefaultValue}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "newCmpFromServerWDefaultAttrValues.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "parent.cmp": {
   "attributes": {
    "SimpleAttribute": {
     "name": "SimpleAttribute",
     "default": "parentY",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "passByReference.cmp": {
   "attributes": {
    "stringByReference": {
     "name": "stringByReference",
     "default": "default string",
     "type": "String"
    },
    "intByReference": {
     "name": "intByReference",
     "default": "2007",
     "type": "Integer"
    },
    "listByReference": {
     "name": "listByReference",
     "default": "[]",
     "type": "List"
    },
    "mapByReference": {
     "name": "mapByReference",
     "default": "{}",
     "type": "Map"
    },
    "objectWithList": {
     "name": "objectWithList",
     "type": "Map"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:label": [
     {
      "value": "{0} Members"
     },
     {
      "value": "{!$Label.AuraTestLabelSection.dynamic_label_for_test}"
     }
    ],
    "aura:dependency": [
     {
      "resource": "markup://attributesTest:simpleValue"
     }
    ],
    "ui:button": [
     {
      "label": "Change outer int",
      "press": "{!c.changeIntOuter}",
      "aura:id": "changeIntOuterButton"
     },
     {
      "label": "Change facet int",
      "press": "{!c.changeIntFacet}",
      "aura:id": "changeIntFacetButton"
     },
     {
      "label": "Change created cmp int",
      "press": "{!c.changeIntCreatedCmp}",
      "aura:id": "changeIntCsccButton"
     },
     {
      "label": "Change outer list",
      "press": "{!c.changeListOuter}",
      "aura:id": "changeListOuterButton"
     },
     {
      "label": "Change facet list",
      "press": "{!c.changeListFacet}",
      "aura:id": "changeListFacetButton"
     },
     {
      "label": "Append to outer list",
      "press": "{!c.appendListOuter}",
      "aura:id": "appendListOuterButton"
     },
     {
      "label": "Append to facet list",
      "press": "{!c.appendListFacet}",
      "aura:id": "appendListFacetButton"
     },
     {
      "label": "Remove item from outer list",
      "press": "{!c.removeItemListOuter}",
      "aura:id": "removeListOuterButton"
     },
     {
      "label": "Remove item from facet list",
      "press": "{!c.removeItemListFacet}",
      "aura:id": "removeListFacetButton"
     },
     {
      "label": "Change outer map",
      "press": "{!c.changeMapOuter}",
      "aura:id": "changeMapOuterButton"
     },
     {
      "label": "Change facet map",
      "press": "{!c.changeMapFacet}",
      "aura:id": "changeMapFacetButton"
     },
     {
      "label": "Append to outer map",
      "press": "{!c.appendMapOuter}",
      "aura:id": "appendMapOuterButton"
     },
     {
      "label": "Append to facet map",
      "press": "{!c.appendMapFacet}",
      "aura:id": "appendMapFacetButton"
     },
     {
      "label": "Remove item from outer map",
      "press": "{!c.removeMapOuter}",
      "aura:id": "removeMapOuterButton"
     },
     {
      "label": "Remove item from facet map",
      "press": "{!c.removeMapFacet}",
      "aura:id": "removeMapFacetButton"
     },
     {
      "label": "Create new component (by value)",
      "press": "{!c.createCmpByValue}",
      "aura:id": "createCmpByValueButton"
     },
     {
      "label": "Create new component (by reference)",
      "press": "{!c.createCmpByReference}",
      "aura:id": "createCmpByReferenceButton"
     }
    ],
    "attributesTest:passByReferenceInner": [
     {
      "aura:id": "innerCmp",
      "intAttribute": "{!v.intByReference}",
      "listAttribute": "{!v.listByReference}",
      "mapAttribute": "{!v.mapByReference}",
      "objectAttribute": "{!v.objectWithList}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.objectWithList.listEntry}",
      "var": "item"
     }
    ]
   }
  },
  "passByReferenceInner.cmp": {
   "attributes": {
    "intAttribute": {
     "name": "intAttribute",
     "type": "Integer"
    },
    "listAttribute": {
     "name": "listAttribute",
     "type": "List"
    },
    "mapAttribute": {
     "name": "mapAttribute",
     "type": "Map"
    },
    "objectAttribute": {
     "name": "objectAttribute",
     "type": "Map"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.objectAttribute.listEntry}",
      "var": "item"
     }
    ]
   }
  },
  "passByValue.cmp": {
   "attributes": {
    "initValue": {
     "name": "initValue",
     "type": "String"
    },
    "booleanValue": {
     "name": "booleanValue",
     "type": "Boolean",
     "default": "true"
    },
    "numberValue": {
     "name": "numberValue",
     "type": "Double",
     "default": "7357"
    },
    "stringValue": {
     "name": "stringValue",
     "type": "String",
     "default": "default string value"
    },
    "map": {
     "name": "map",
     "type": "Map"
    },
    "listValue": {
     "name": "listValue",
     "type": "List",
     "default": "purple,blue,green"
    },
    "mapValue": {
     "name": "mapValue",
     "type": "Map",
     "default": "{}"
    },
    "changeEventTriggered": {
     "name": "changeEventTriggered",
     "type": "boolean",
     "default": "false"
    },
    "pairAttr": {
     "name": "pairAttr",
     "type": "java://org.auraframework.util.type.CustomPairType",
     "default": "HouseNo$300"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.mapValue}",
     "action": "{!c.handleMapValueChangeEvent}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:label": [
     {
      "value": "{0} Members"
     },
     {
      "value": "{#$Label.AuraTestLabelSection.dynamic_label_for_test}"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "box",
      "items": "{#v.listValue}",
      "var": "message",
      "indexVar": "index"
     }
    ],
    "attributesTest:passByValueInner": [
     {
      "aura:id": "innerCmp",
      "stringValue": "{#v.stringValue}",
      "booleanValue": "{#v.booleanValue}",
      "numberValue": "{#v.numberValue}",
      "listValue": "{#v.listValue}",
      "mapValue": "{#v.mapValue}",
      "pairAttr": "{#v.pairAttr}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "changeButton",
      "label": "Change Properties",
      "press": "{!c.changeProperties}"
     }
    ]
   }
  },
  "passByValueInner.cmp": {
   "attributes": {
    "renderCount": {
     "default": "0",
     "type": "Integer",
     "name": "renderCount"
    },
    "rerenderCount": {
     "default": "0",
     "type": "Integer",
     "name": "rerenderCount"
    },
    "booleanValue": {
     "name": "booleanValue",
     "type": "Boolean"
    },
    "numberValue": {
     "name": "numberValue",
     "type": "Double"
    },
    "stringValue": {
     "name": "stringValue",
     "type": "String"
    },
    "listValue": {
     "name": "listValue",
     "type": "List"
    },
    "mapValue": {
     "name": "mapValue",
     "type": "Map"
    },
    "changeEventTriggered": {
     "name": "changeEventTriggered",
     "type": "boolean",
     "default": "false"
    },
    "pairAttr": {
     "name": "pairAttr",
     "type": "java://org.auraframework.util.type.CustomPairType"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.mapValue}",
     "action": "{!c.handleMapValueChangeEvent}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "auratest:renderEvent",
      "type": "EVENT"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "box",
      "items": "{!v.listValue}",
      "var": "message",
      "indexVar": "index"
     }
    ]
   }
  },
  "passByValueOuter.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "attributesTest:passByValue": [
     {
      "aura:id": "passByValueCmp",
      "mapValue": "{!m.map}"
     }
    ]
   }
  },
  "passByValue_model.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "box",
      "items": "{#m.stringList}",
      "var": "message",
      "indexVar": "index"
     }
    ],
    "attributesTest:passByValueInner": [
     {
      "aura:id": "innerCmp",
      "stringValue": "{#m.string}",
      "booleanValue": "{#m.booleanFalse}",
      "numberValue": "{#m.double}",
      "listValue": "{#m.stringList}",
      "mapValue": "{#m.map}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "changeButton",
      "label": "Change Properties",
      "press": "{!c.changeProperties}"
     }
    ]
   }
  },
  "serializeTo.cmp": {
   "attributes": {
    "both": {
     "name": "both",
     "type": "String",
     "serializeTo": "both"
    },
    "server": {
     "name": "server",
     "type": "String",
     "serializeTo": "Server"
    },
    "none": {
     "name": "none",
     "type": "String",
     "serializeTo": "NONE"
    },
    "bothDefault": {
     "name": "bothDefault",
     "type": "String",
     "serializeTo": "both",
     "default": "public"
    },
    "serverDefault": {
     "name": "serverDefault",
     "type": "String",
     "serializeTo": "Server",
     "default": "package"
    },
    "noneDefault": {
     "name": "noneDefault",
     "type": "String",
     "serializeTo": "NONE",
     "default": "private"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "newComponent",
      "press": "{!c.newComponent}"
     }
    ]
   }
  },
  "serializeToContainer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "newComponent",
      "label": "newComponentContainer",
      "press": "{!c.newComponent}"
     }
    ]
   }
  },
  "setValue.cmp": {
   "attributes": {
    "componentDefault": {
     "type": "Aura.Component[]",
     "name": "componentDefault"
    },
    "componentDefault2": {
     "type": "Aura.Component[]",
     "name": "componentDefault2"
    },
    "mapAttributeWithDefaultValue": {
     "type": "Map",
     "name": "mapAttributeWithDefaultValue",
     "default": "{ a: 1, b: 2 }"
    },
    "objAttributeWithDefaultValue": {
     "type": "Object",
     "name": "objAttributeWithDefaultValue",
     "default": "['red','green','blue']"
    },
    "listAttributeWithDefaultValue": {
     "type": "List",
     "name": "listAttributeWithDefaultValue",
     "default": "['red','green','blue']"
    },
    "arrayAttributeWithDefaultValue": {
     "type": "Boolean[]",
     "name": "arrayAttributeWithDefaultValue",
     "default": "[true,false,true]"
    },
    "longDefaultWithStringPositiveInt": {
     "type": "Long",
     "name": "longDefaultWithStringPositiveInt",
     "default": "123"
    },
    "integerDefaultWithStringPositiveInt": {
     "type": "Integer",
     "name": "integerDefaultWithStringPositiveInt",
     "default": "123"
    },
    "doubleDefaultWithStringPositiveInt": {
     "type": "Double",
     "name": "doubleDefaultWithStringPositiveInt",
     "default": "123"
    },
    "decimalDefaultWithStringPositiveInt": {
     "type": "Decimal",
     "name": "decimalDefaultWithStringPositiveInt",
     "default": "123"
    },
    "dateTimeDefaultWithString": {
     "type": "DateTime",
     "name": "dateTimeDefaultWithString",
     "default": "123456789"
    },
    "dateDefaultWithString": {
     "type": "Date",
     "name": "dateDefaultWithString",
     "default": "2013-03-06"
    },
    "stringDefaultWithString": {
     "type": "String",
     "name": "stringDefaultWithString",
     "default": "test string"
    },
    "booleanDefaultWithStringFalse": {
     "type": "Boolean",
     "name": "booleanDefaultWithStringFalse",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "setValueChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "componentDefault"
     },
     {
      "attribute": "mapAttributeWithDefaultValue",
      "value": "{ b: 2, c: 3 }"
     },
     {
      "attribute": "objAttributeWithDefaultValue",
      "value": "['grey','silver','slate']"
     },
     {
      "attribute": "listAttributeWithDefaultValue",
      "value": "['grey','silver','slate']"
     },
     {
      "attribute": "arrayAttributeWithDefaultValue",
      "value": "[false,'true',true]"
     },
     {
      "attribute": "longDefaultWithStringPositiveInt",
      "value": "9007199254740991"
     },
     {
      "attribute": "integerDefaultWithStringPositiveInt",
      "value": "2147483647"
     },
     {
      "attribute": "doubleDefaultWithStringPositiveInt",
      "value": "9007199254740991"
     },
     {
      "attribute": "decimalDefaultWithStringPositiveInt",
      "value": "9.99999999999999"
     },
     {
      "attribute": "dateTimeDefaultWithString",
      "value": "1430517159503"
     },
     {
      "attribute": "dateDefaultWithString",
      "value": "2015-02-05"
     },
     {
      "attribute": "stringDefaultWithString",
      "value": "test string2"
     },
     {
      "attribute": "booleanDefaultWithStringFalse",
      "value": "false"
     }
    ]
   }
  },
  "setValueEmpty.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "componentDefault"
     },
     {
      "attribute": "mapAttributeWithDefaultValue",
      "value": ""
     },
     {
      "attribute": "objAttributeWithDefaultValue",
      "value": ""
     },
     {
      "attribute": "listAttributeWithDefaultValue",
      "value": ""
     },
     {
      "attribute": "arrayAttributeWithDefaultValue",
      "value": ""
     },
     {
      "attribute": "longDefaultWithStringPositiveInt",
      "value": ""
     },
     {
      "attribute": "integerDefaultWithStringPositiveInt",
      "value": ""
     },
     {
      "attribute": "doubleDefaultWithStringPositiveInt",
      "value": ""
     },
     {
      "attribute": "decimalDefaultWithStringPositiveInt",
      "value": ""
     },
     {
      "attribute": "dateTimeDefaultWithString",
      "value": ""
     },
     {
      "attribute": "dateDefaultWithString",
      "value": ""
     },
     {
      "attribute": "stringDefaultWithString",
      "value": ""
     },
     {
      "attribute": "booleanDefaultWithStringFalse",
      "value": ""
     }
    ]
   }
  },
  "setValueGrandchild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "componentDefault2"
     }
    ]
   }
  },
  "simpleValue.cmp": {
   "attributes": {
    "strAttribute": {
     "name": "strAttribute",
     "type": "String"
    },
    "intAttribute": {
     "name": "intAttribute",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "button",
      "press": "{!c.increment}",
      "label": "{!v.intAttribute ? v.intAttribute : 0}"
     }
    ]
   }
  }
 },
 "auraStorageTest": {
  "applicationTest.app": {
   "attributes": {
    "status": {
     "name": "status",
     "type": "String",
     "default": "Waiting"
    },
    "refreshed": {
     "name": "refreshed",
     "type": "String",
     "default": "NO"
    },
    "actionComplete": {
     "name": "actionComplete",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {
    "auraStorageTest:iframeTestLib": {
     "library": "auraStorageTest:iframeTestLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {
    "undefined": {
     "event": "aura:applicationRefreshed",
     "action": "{!c.handleRefreshed}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {
    "addToStorage": {},
    "clearStoredAction": {}
   },
   "dependencies": {
    "aura:application": [
     {
      "template": "auraStorageTest:indexedDBtemplate"
     }
    ]
   }
  },
  "componentDefStorage.app": {
   "attributes": {
    "load": {
     "name": "load",
     "type": "String",
     "default": "ui:scroller"
    },
    "status": {
     "name": "status",
     "type": "String",
     "default": "Waiting"
    },
    "defStorageContents": {
     "name": "defStorageContents",
     "type": "String[]",
     "default": ""
    },
    "output": {
     "name": "output",
     "type": "Aura.Component"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "auraStorage:modified",
     "action": "{!c.storageModified}"
    }
   },
   "methods": {
    "fetchCmp": {},
    "createComponentDeprecated": {},
    "clearActionAndDefStorage": {},
    "verifyDefsRestored": {}
   },
   "dependencies": {
    "aura:application": [
     {
      "template": "auraStorageTest:componentDefStorageTemplate"
     }
    ]
   }
  },
  "cryptoAlternateStorageTest.app": {
   "attributes": {},
   "imports": {
    "auraStorageTest:storageTestLib": {
     "library": "auraStorageTest:storageTestLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "render": "client"
     }
    ]
   }
  },
  "cryptoStorageTest.app": {
   "attributes": {},
   "imports": {
    "auraStorageTest:storageTestLib": {
     "library": "auraStorageTest:storageTestLib",
     "property": "storageLib"
    },
    "auraStorageTest:iframeTestLib": {
     "library": "auraStorageTest:iframeTestLib",
     "property": "iframeLib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "template": "auraStorageTest:cryptoRegistrationTemplate"
     }
    ],
    "aura:dependency": [
     {
      "resource": "markup://auraStorageTest:persistentStorage",
      "type": "APPLICATION"
     }
    ]
   }
  },
  "failedDefStorageTest.app": {
   "attributes": {
    "dynamicallyCreated": {
     "name": "dynamicallyCreated",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "template": "auraStorageTest:failedDefStorageTemplate"
     }
    ],
    "aura:dependency": [
     {
      "resource": "markup://attributesTest:parent",
      "type": "COMPONENT"
     }
    ],
    "ui:outputURL": [
     {
      "aura:id": "outputUrl",
      "label": "Fake link",
      "value": "#clicked"
     }
    ]
   }
  },
  "indexedDBStorageTest.app": {
   "attributes": {},
   "imports": {
    "auraStorageTest:storageTestLib": {
     "library": "auraStorageTest:storageTestLib",
     "property": "storageLib"
    },
    "auraStorageTest:iframeTestLib": {
     "library": "auraStorageTest:iframeTestLib",
     "property": "iframeLib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "render": "client"
     }
    ],
    "aura:dependency": [
     {
      "resource": "markup://auraStorageTest:persistentStorage",
      "type": "APPLICATION"
     }
    ]
   }
  },
  "noGetApplicationCache.app": {
   "attributes": {
    "status": {
     "name": "status",
     "type": "String",
     "default": "Waiting"
    },
    "fromStorage": {
     "name": "fromStorage",
     "type": "String",
     "default": "Waiting"
    }
   },
   "imports": {
    "auraStorageTest:iframeTestLib": {
     "library": "auraStorageTest:iframeTestLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "template": "auraStorageTest:noGetApplicationCacheTemplate"
     }
    ]
   }
  },
  "persistentStorage.app": {
   "attributes": {
    "secure": {
     "name": "secure",
     "type": "Boolean",
     "default": "false"
    },
    "key": {
     "name": "key",
     "type": "String",
     "default": "default key"
    },
    "value": {
     "name": "value",
     "type": "String",
     "default": "default value"
    },
    "return": {
     "name": "return",
     "type": "String",
     "default": "No value"
    },
    "status": {
     "name": "status",
     "type": "String",
     "default": "Waiting"
    },
    "encryptionKey": {
     "type": "String",
     "name": "encryptionKey"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {
    "addToStorage": {},
    "getFromStorage": {},
    "resetStorage": {},
    "deleteStorage": {},
    "setEncryptionKey": {
     "encryptionKey": {
      "type": "String",
      "name": "encryptionKey"
     }
    }
   },
   "dependencies": {
    "aura:application": [
     {}
    ]
   }
  },
  "actionsStorageTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "maxSize": "4096",
      "defaultExpiration": "3600",
      "secure": "true",
      "persistent": "false"
     }
    ]
   }
  },
  "actionsStorageTest.cmp": {
   "attributes": {
    "actionsStorageOn": {
     "type": "Boolean",
     "default": "false",
     "name": "actionsStorageOn"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.actionsStorageOn}"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions"
     }
    ]
   }
  },
  "adapterSelectionTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "componentDefStorageContainer.cmp": {
   "attributes": {},
   "imports": {
    "auraStorageTest:iframeTestLib": {
     "library": "auraStorageTest:iframeTestLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "componentDefStorageTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "maxSize": "4096",
      "defaultExpiration": "3600",
      "secure": "false",
      "persistent": "true",
      "clearStorageOnInit": "false"
     }
    ]
   }
  },
  "cryptoRegistrationTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ],
    "auraStorage:crypto": [
     {
      "debugLoggingEnabled": "true"
     }
    ]
   }
  },
  "failedActionStorageTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ]
   }
  },
  "failedActionStorageTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "failedDefStorageTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ]
   }
  },
  "failedStorageTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ]
   }
  },
  "failedStorageTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fuelGaugeTestStub.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auraStorage:fuelGauge": [
     {
      "storageName": "actions",
      "aura:id": "actionsGauge"
     },
     {
      "storageName": "savings",
      "aura:id": "savingsGauge"
     },
     {
      "storageName": "checking",
      "aura:id": "checkingGauge1"
     },
     {
      "storageName": "checking",
      "aura:id": "checkingGauge2"
     },
     {
      "storageName": "bogus",
      "aura:id": "bogusGauge"
     },
     {
      "storageName": "",
      "aura:id": "noName"
     }
    ]
   }
  },
  "indexedDBtemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "maxSize": "4096",
      "clearStorageOnInit": "false",
      "defaultExpiration": "3600",
      "debugLoggingEnabled": "true",
      "secure": "false",
      "persistent": "true"
     }
    ]
   }
  },
  "initTest.cmp": {
   "attributes": {
    "clearStorageOnInit": {
     "name": "clearStorageOnInit",
     "type": "Boolean",
     "default": "true"
    },
    "defaultExpiration": {
     "name": "defaultExpiration",
     "type": "Integer",
     "default": "50"
    },
    "defaultAutoRefreshInterval": {
     "name": "defaultAutoRefreshInterval",
     "type": "Integer",
     "default": "60"
    },
    "persistent": {
     "name": "persistent",
     "type": "Boolean",
     "default": "false"
    },
    "version": {
     "name": "version",
     "type": "String",
     "default": ""
    },
    "host": {
     "name": "host",
     "type": "String",
     "default": ""
    },
    "actionStatus": {
     "name": "actionStatus",
     "type": "String",
     "default": ""
    },
    "dupNamedStorage": {
     "name": "dupNamedStorage",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "auraStorage:modified",
     "action": "{!c.storageModified}"
    },
    "refreshBegin": {
     "name": "refreshBegin",
     "action": "{!c.refreshBegin}"
    },
    "refreshEnd": {
     "name": "refreshEnd",
     "action": "{!c.refreshEnd}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.setHost}"
    },
    "change": {
     "name": "change",
     "value": "{!v.host}",
     "action": "{!c.setHost}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "uitest:hasModel"
     }
    ],
    "auraStorage:init": [
     {
      "debugLoggingEnabled": "true",
      "name": "actions",
      "secure": "true",
      "persistent": "{!v.persistent}",
      "clearStorageOnInit": "{!v.clearStorageOnInit}",
      "defaultExpiration": "{!v.defaultExpiration}",
      "defaultAutoRefreshInterval": "{!v.defaultAutoRefreshInterval}",
      "version": "{!v.version}"
     },
     {
      "name": "defaultAdapter"
     },
     {
      "name": "dupNamedStorage",
      "maxSize": "9999",
      "aura:id": "dupNamedStorage1"
     },
     {
      "name": "dupNamedStorage",
      "maxSize": "6666",
      "aura:id": "dupNamedStorage2"
     }
    ],
    "ui:button": [
     {
      "label": "Run action at Server Always",
      "press": "{!c.forceActionAtServer}",
      "aura:id": "ForceActionAtServer"
     },
     {
      "label": "Run action at Server and mark as storable",
      "press": "{!c.runActionAtServerAndStore}",
      "aura:id": "RunActionAndStore"
     },
     {
      "label": "Re-run action and verify cached response",
      "press": "{!c.fetchActionFromStorage}"
     },
     {
      "label": "Reset all counter",
      "press": "{!c.resetCounters}"
     },
     {
      "aura:id": "TestConnectionButton",
      "label": "test connection",
      "press": "{!c.testConnection}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inputHost",
      "value": "{!v.host}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.dupNamedStorage}"
     }
    ]
   }
  },
  "isolationTest.cmp": {
   "attributes": {
    "status": {
     "name": "status",
     "type": "String",
     "default": "Waiting"
    },
    "items": {
     "name": "items",
     "type": "Object"
    },
    "isolationKey": {
     "name": "isolationKey",
     "type": "String",
     "default": ""
    },
    "storageItemValue": {
     "name": "storageItemValue",
     "type": "String",
     "default": "value"
    }
   },
   "imports": {
    "auraStorageTest:iframeTestLib": {
     "library": "auraStorageTest:iframeTestLib",
     "property": "iframeLib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {
    "addItemToStorage": {},
    "getAllFromStorage": {}
   },
   "dependencies": {}
  },
  "memoryAdapterTest.cmp": {
   "attributes": {},
   "imports": {
    "auraStorageTest:storageTestLib": {
     "library": "auraStorageTest:storageTestLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "namedStorageTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "persistent": "false",
      "secure": "false",
      "maxSize": "9999"
     },
     {
      "name": "savings",
      "persistent": "false",
      "secure": "true",
      "maxSize": "6666"
     },
     {
      "name": "checking",
      "maxSize": "7777"
     }
    ]
   }
  },
  "namedStorageTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "newComponent.cmp": {
   "attributes": {
    "defaultExpiration": {
     "name": "defaultExpiration",
     "type": "Integer",
     "default": "50"
    },
    "defaultAutoRefreshInterval": {
     "name": "defaultAutoRefreshInterval",
     "type": "Integer",
     "default": "60"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auraStorage:init": [
     {
      "debugLoggingEnabled": "true",
      "name": "actions",
      "secure": "true",
      "defaultExpiration": "{!v.defaultExpiration}",
      "defaultAutoRefreshInterval": "{!v.defaultAutoRefreshInterval}"
     }
    ],
    "ui:button": [
     {
      "label": "Get Team and Players (Store Response)",
      "press": "{!c.getRosterFromStorage}"
     },
     {
      "label": "Get Team(From Stored Response)",
      "press": "{!c.getTeamFromStorage}"
     },
     {
      "label": "Get Players(From Store Response)",
      "press": "{!c.getPlayersFromStorage}"
     },
     {
      "label": "Get Team and Players",
      "press": "{!c.getRoster}"
     },
     {
      "label": "Get Team",
      "press": "{!c.getTeam}"
     },
     {
      "label": "Get Players",
      "press": "{!c.getPlayers}"
     },
     {
      "label": "Reset all counter",
      "press": "{!c.resetCounters}"
     }
    ]
   }
  },
  "noGetApplicationCacheTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     },
     {
      "attribute": "autoInitialize",
      "value": "false"
     },
     {
      "attribute": "autoInitializeSync",
      "value": "false"
     },
     {
      "attribute": "auraInitBlock"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "maxSize": "4096",
      "clearStorageOnInit": "false",
      "defaultExpiration": "3600",
      "debugLoggingEnabled": "true",
      "secure": "false",
      "persistent": "true"
     }
    ]
   }
  },
  "playerFacet.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String"
    },
    "nickName": {
     "name": "nickName",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:Button": [
     {
      "label": "Who am I?",
      "press": "{!c.revealMe}",
      "aura:id": "button"
     }
    ]
   }
  },
  "serverStorableTest.cmp": {
   "attributes": {
    "responseOrder": {
     "type": "String",
     "name": "responseOrder",
     "default": ""
    },
    "defaultExpiration": {
     "name": "defaultExpiration",
     "type": "Integer",
     "default": "60"
    },
    "defaultAutoRefreshInterval": {
     "name": "defaultAutoRefreshInterval",
     "type": "Integer",
     "default": "60"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auraStorage:init": [
     {
      "name": "actions",
      "secure": "true",
      "debugLoggingEnabled": "true",
      "defaultExpiration": "{!v.defaultExpiration}",
      "defaultAutoRefreshInterval": "{!v.defaultAutoRefreshInterval}"
     }
    ],
    "ui:button": [
     {
      "press": "{!c.handleClick}",
      "aura:id": "button",
      "label": "Get a stored action from the server"
     }
    ],
    "test:cmpWithServerAction": [
     {
      "aura:id": "test_cmpWithServerAction"
     }
    ]
   }
  },
  "teamFacet.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String"
    },
    "city": {
     "name": "city",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Who are we?",
      "press": "{!c.revealMe}",
      "aura:id": "button"
     }
    ]
   }
  },
  "versionTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ],
    "auraStorage:init": [
     {
      "name": "templateStorageDefaultVersion"
     },
     {
      "name": "templateStorageEmptyVersion",
      "version": ""
     }
    ]
   }
  },
  "versionTest.cmp": {
   "attributes": {
    "defaultExpiration": {
     "name": "defaultExpiration",
     "type": "Integer",
     "default": "50"
    },
    "defaultAutoRefreshInterval": {
     "name": "defaultAutoRefreshInterval",
     "type": "Integer",
     "default": "60"
    },
    "persistent": {
     "name": "persistent",
     "type": "Boolean",
     "default": "false"
    },
    "version": {
     "name": "version",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auraStorage:init": [
     {
      "debugLoggingEnabled": "true",
      "name": "cmpStorage",
      "secure": "true",
      "persistent": "{!v.persistent}",
      "defaultExpiration": "{!v.defaultExpiration}",
      "defaultAutoRefreshInterval": "{!v.defaultAutoRefreshInterval}",
      "version": "{!v.version}"
     }
    ]
   }
  }
 },
 "auratest": {
  "aisAsyncApp.app": {
   "attributes": {
    "msgFromEvent": {
     "name": "msgFromEvent",
     "type": "String",
     "default": "empty"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "handleEventTest:applicationEvent",
     "action": "{!c.handlerPressFromInject}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "extends": "aura:integrationServiceApp",
      "template": "auratest:aisAsyncTemplate"
     }
    ]
   }
  },
  "createInnerCmpQuickFixApp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "auratest:innerCmpThatDoesntExist": [
     {}
    ]
   }
  },
  "errorHandlingApp.app": {
   "attributes": {
    "message": {
     "name": "message",
     "type": "String"
    },
    "error": {
     "name": "error",
     "type": "String"
    },
    "eventHandled": {
     "name": "eventHandled",
     "type": "Boolean",
     "default": "false"
    },
    "handleSystemError": {
     "name": "handleSystemError",
     "type": "Boolean",
     "default": "false"
    },
    "addInvalidComponent": {
     "name": "addInvalidComponent",
     "type": "Boolean",
     "default": "false"
    },
    "throwErrorFromInit": {
     "name": "throwErrorFromInit",
     "type": "Boolean",
     "default": "false"
    },
    "throwErrorFromRender": {
     "name": "throwErrorFromRender",
     "type": "boolean",
     "default": "false"
    },
    "throwErrorFromAfterRender": {
     "name": "throwErrorFromAfterRender",
     "type": "Boolean",
     "default": "false"
    },
    "throwErrorFromRerender": {
     "name": "throwErrorFromRerender",
     "type": "Boolean",
     "default": "false"
    },
    "throwErrorFromUnrender": {
     "name": "throwErrorFromUnrender",
     "type": "Boolean",
     "default": "false"
    },
    "useFriendlyErrorMessageFromData": {
     "name": "useFriendlyErrorMessageFromData",
     "type": "Boolean",
     "default": "false"
    },
    "handleSystemErrorInContainedCmp": {
     "name": "handleSystemErrorInContainedCmp",
     "type": "boolean",
     "default": "false"
    },
    "throwErrorFromContainedCmpRender": {
     "name": "throwErrorFromContainedCmpRender",
     "type": "boolean",
     "default": "false"
    },
    "throwErrorFromContainedCmpAfterRender": {
     "name": "throwErrorFromContainedCmpAfterRender",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "undefined": {
     "event": "aura:systemError",
     "action": "{!c.handleSystemError}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "unauthenticated",
      "controller": "java://org.auraframework.components.test.java.controller.TestController"
     }
    ],
    "ui:button": [
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromClientController}",
      "class": "errorFromClientControllerButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromServerActionCallback}",
      "class": "errorFromServerActionCallbackButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromCreateComponentCallback}",
      "class": "errorFromCreateComponentCallbackButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromFunctionWrappedInGetCallback}",
      "class": "errorFromFunctionWrappedInGetCallbackButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromRerender}",
      "class": "errorFromRerenderButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromUnrender}",
      "class": "errorFromUnrenderButton"
     },
     {
      "label": "Throw",
      "press": "{!c.failAssertInClientController}",
      "class": "failAssertInClientControllerButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwAuraErrorFromClientController}",
      "class": "auraErrorFromClientControllerButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwAuraFriendlyErrorFromClientController}",
      "class": "auraFriendlyErrorFromClientControllerButton"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.addInvalidComponent}"
     }
    ],
    "auratest:errorHandling": [
     {},
     {
      "aura:id": "containedCmp"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "requiredAttribute",
      "value": "required"
     },
     {
      "attribute": "throwErrorFromRender",
      "value": "{!v.throwErrorFromContainedCmpRender}"
     },
     {
      "attribute": "throwErrorFromAfterRender",
      "value": "{!v.throwErrorFromContainedCmpAfterRender}"
     },
     {
      "attribute": "handleSystemError",
      "value": "{!v.handleSystemErrorInContainedCmp}"
     }
    ]
   }
  },
  "errorHandlingErrorModelApp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "unauthenticated",
      "render": "client",
      "model": "java://org.auraframework.components.test.java.model.TestModelThrowsInGetter"
     }
    ]
   }
  },
  "excludedTestsList.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.test.java.model.ExcludedTestsListModel"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!m.browserInfo}",
      "var": "browser"
     },
     {
      "items": "{!m.browserInfo}",
      "var": "browser"
     },
     {
      "items": "{!browser.ignoredTests}",
      "var": "test"
     }
    ]
   }
  },
  "rerender.app": {
   "attributes": {
    "whichArray": {
     "name": "whichArray",
     "type": "String",
     "default": "v.emptyArray"
    },
    "emptyArray": {
     "name": "emptyArray",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "aura:locationChange",
     "action": "{!c.locationChanged}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "locationChangeEvent": "aura:locationChange",
      "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
     }
    ],
    "ui:outputURL": [
     {
      "aura:id": "linkDef",
      "label": "#def",
      "value": "#def"
     },
     {
      "aura:id": "linkDeath",
      "label": "#death",
      "value": "#death"
     },
     {
      "aura:id": "linkEmpty",
      "label": "#empty",
      "value": "#empty"
     }
    ],
    "ui:inputText": [
     {
      "value": "{!v.whichArray}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "pushText",
      "label": "push text",
      "press": "{!c.pushText}"
     },
     {
      "aura:id": "pushComponent",
      "label": "push component",
      "press": "{!c.pushComponent}"
     },
     {
      "aura:id": "reverse",
      "label": "reverse",
      "press": "{!c.reverse}"
     },
     {
      "aura:id": "pop",
      "label": "pop",
      "press": "{!c.pop}"
     },
     {
      "aura:id": "clear",
      "label": "clear",
      "press": "{!c.clear}"
     }
    ],
    "auratest:rerenderChild": [
     {
      "aura:id": "emptyArrayContainer",
      "title": "emptyArray = "
     },
     {
      "aura:id": "child1",
      "title": "child1"
     },
     {
      "aura:id": "grandchild1",
      "title": "grandchild1"
     },
     {
      "aura:id": "child2",
      "title": "child2"
     },
     {
      "aura:id": "grandchild2",
      "title": "grandchild2"
     },
     {
      "aura:id": "greatgrandchild2",
      "title": "greatgrandchild2"
     },
     {
      "aura:id": "grandchild2a",
      "title": "grandchild2a"
     }
    ]
   }
  },
  "testApplication1.app": {
   "attributes": {
    "myString": {
     "name": "myString",
     "type": "String",
     "default": "Default String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "extensible": "true",
      "implements": "auratest:testInterface",
      "extends": "auratest:testApplication3",
      "controller": "java://org.auraframework.components.test.java.controller.JavaTestController",
      "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
     }
    ],
    "auratest:testComponent2": [
     {
      "myInteger": "1"
     }
    ]
   }
  },
  "testApplication3.app": {
   "attributes": {
    "myBoolean": {
     "name": "myBoolean",
     "type": "Boolean",
     "default": "True"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "extensible": "true"
     }
    ]
   }
  },
  "test_Preload_ScrapNamespace.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "aura:dependency": [
     {
      "resource": "somecrap"
     }
    ],
    "auratest:test_button": [
     {
      "class": "displayText",
      "label": "Sitting pretty tight"
     }
    ]
   }
  },
  "test_Preload_SimpleCmp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "preload": "ui,aura"
     }
    ],
    "ui:button": [
     {
      "label": "Apex Instantiated",
      "class": "displayText1",
      "aura:id": "button"
     }
    ]
   }
  },
  "test_ServerRendering.app": {
   "attributes": {
    "expression": {
     "name": "expression",
     "type": "String",
     "default": "testServerSideRenderingOfBasicComponents"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "render": "SERVER"
     }
    ]
   }
  },
  "test_SimpleServerRenderedPage.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "render": "server"
     }
    ],
    "aura:dependency": [
     {
      "resource": "ui:*"
     },
     {
      "resource": "aura:*"
     },
     {
      "resource": "auradev:*"
     },
     {
      "resource": "preloadTest:*"
     }
    ],
    "test:test_JavaRndr_Component": [
     {}
    ]
   }
  },
  "access.cmp": {
   "attributes": {
    "testType": {
     "name": "testType",
     "type": "String",
     "description": "A generic string holder used by the controller to find components, attributes, and events to test access checks"
    },
    "output": {
     "name": "output",
     "type": "Object"
    },
    "testDone": {
     "name": "testDone",
     "type": "Boolean",
     "default": "false"
    },
    "accessLevel": {
     "name": "accessLevel",
     "type": "String"
    },
    "Private": {
     "name": "Private",
     "type": "String",
     "access": "PRIVATE",
     "description": "private",
     "default": "PRIVATE"
    },
    "Public": {
     "name": "Public",
     "type": "String",
     "access": "PUBLIC",
     "description": "public",
     "default": "PUBLIC"
    },
    "Internal": {
     "name": "Internal",
     "type": "String",
     "access": "INTERNAL",
     "description": "internal",
     "default": "INTERNAL"
    },
    "Global": {
     "name": "Global",
     "type": "String",
     "access": "GLOBAL",
     "description": "global",
     "default": "GLOBAL"
    }
   },
   "imports": {},
   "events": {
    "globalEvent": {
     "name": "globalEvent",
     "type": "auratest:accessGlobalEvent"
    },
    "publicEvent": {
     "name": "publicEvent",
     "type": "auratest:accessPublicEvent"
    },
    "internalEvent": {
     "name": "internalEvent",
     "type": "auratest:accessInternalEvent"
    },
    "privateEvent": {
     "name": "privateEvent",
     "type": "auratest:accessPrivateEvent"
    }
   },
   "handlers": {},
   "methods": {
    "testSetNonExistentAttribute": {},
    "testSetNonExistentRemoteAttribute": {},
    "testMethods": {
     "accessLevel": {
      "name": "accessLevel",
      "type": "String"
     }
    },
    "globalMethod": {},
    "publicMethod": {},
    "internalMethod": {},
    "privateMethod": {}
   },
   "dependencies": {
    "componentTest:accessAttributes": [
     {
      "aura:id": "remote"
     }
    ],
    "ui:button": [
     {
      "aura:id": "testAttributes",
      "label": "testAttributeAccess",
      "press": "{!c.testAttributeAccess}"
     },
     {
      "aura:id": "testRemoteAttributes",
      "label": "testRemoteAttributeAccess",
      "press": "{!c.testRemoteAttributeAccess}"
     },
     {
      "aura:id": "testEvent",
      "label": "testEventAccess",
      "press": "{!c.testEventAccess}"
     },
     {
      "aura:id": "testRemoteEvent",
      "label": "testRemoteEventAccess",
      "press": "{!c.testRemoteEventAccess}"
     },
     {
      "aura:id": "testComponent",
      "label": "testComponentAccess",
      "press": "{!c.testComponentAccess}"
     },
     {
      "aura:id": "testRemoteMethods",
      "label": "testRemoteMethodAccess",
      "press": "{!c.testRemoteMethodAccess}"
     }
    ]
   }
  },
  "accessExtendsGlobalWithAttributes.cmp": {
   "attributes": {
    "output": {
     "name": "output",
     "type": "String"
    },
    "attrName": {
     "name": "attrName",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "testAttributeAccess": {
     "attrName": {
      "name": "attrName",
      "type": "String"
     }
    }
   },
   "dependencies": {
    "ui:outputText": [
     {
      "value": "componentTest:accessExtendsGlobalWithPrivateAttribute"
     }
    ]
   }
  },
  "accessExtendsGlobalWithSets.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "Global",
      "value": "Changed!"
     },
     {
      "attribute": "Public",
      "value": "Changed!"
     },
     {
      "attribute": "Internal",
      "value": "Changed!"
     },
     {
      "attribute": "Private",
      "value": "Changed!"
     }
    ],
    "ui:outputText": [
     {
      "value": "componentTest:accessExtendsGlobalWithSets"
     }
    ]
   }
  },
  "accessGlobalAttribute.cmp": {
   "attributes": {
    "attr": {
     "name": "attr",
     "type": "String",
     "default": "GLOBAL",
     "access": "GLOBAL"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "accessGlobalComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "accessInternalAttribute.cmp": {
   "attributes": {
    "attr": {
     "name": "attr",
     "type": "String",
     "default": "INTERNAL",
     "access": "INTERNAL"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "accessInternalComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "accessPrivateAttribute.cmp": {
   "attributes": {
    "attr": {
     "name": "attr",
     "type": "String",
     "default": "PRIVATE",
     "access": "PRIVATE"
    },
    "attrDefault": {
     "name": "attrDefault",
     "type": "String",
     "default": "default"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "accessPublicAttribute.cmp": {
   "attributes": {
    "attr": {
     "name": "attr",
     "type": "String",
     "default": "PUBLIC",
     "access": "PUBLIC"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "accessPublicComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "aisAsyncTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "extraScriptTags"
     }
    ]
   }
  },
  "auraMethod.cmp": {
   "attributes": {
    "outputStringAttr": {
     "name": "outputStringAttr",
     "type": "String",
     "default": "default outputStringAttr"
    },
    "stringAttr": {
     "name": "stringAttr",
     "type": "String",
     "default": "default string"
    },
    "stringAttr2": {
     "name": "stringAttr2",
     "type": "String",
     "default": "default string2"
    },
    "stringAttrParent": {
     "name": "stringAttrParent",
     "type": "String",
     "default": "default string in Parent"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "hasAttr": {
     "stringAttr": {
      "name": "stringAttr",
      "type": "String",
      "default": "default string"
     }
    },
    "noAttr": {},
    "withActionHasAttr": {
     "stringAttr": {
      "name": "stringAttr",
      "type": "String",
      "default": "default string"
     }
    },
    "withActionNoAttr": {},
    "methodFromInterface": {
     "stringAttr2": {
      "name": "stringAttr2",
      "type": "String",
      "default": "default string2"
     }
    },
    "methodInParent": {
     "stringAttrParent": {
      "name": "stringAttrParent",
      "type": "String",
      "default": "default string in Parent"
     }
    }
   },
   "dependencies": {}
  },
  "auraMethodChild.cmp": {
   "attributes": {
    "stringAttrChild": {
     "name": "stringAttrChild",
     "type": "String",
     "default": "default string in Child"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "methodInParent": {
     "stringAttrChild": {
      "name": "stringAttrChild",
      "type": "String",
      "default": "default string in Child"
     }
    }
   },
   "dependencies": {}
  },
  "auraMethodContainer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:auraMethod": [
     {
      "aura:id": "auraMethod"
     }
    ],
    "auratest:auraMethodChild": [
     {
      "aura:id": "auraMethodChild"
     }
    ]
   }
  },
  "auraMethodError.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "render": {}
   },
   "dependencies": {}
  },
  "auraMethodProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "auraMethodProviderMethod": {},
    "noAttr": {}
   },
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://auratest:auraMethod",
      "type": "COMPONENT"
     }
    ]
   }
  },
  "baseInputTest.cmp": {
   "attributes": {
    "cmpType": {
     "name": "cmpType",
     "type": "string"
    },
    "ref": {
     "name": "ref",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "submitBtn",
      "label": "submit",
      "press": "{!c.submit}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputValue",
      "value": ""
     }
    ]
   }
  },
  "cmpBackRefTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "true"
     },
     {
      "isTrue": "false"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "left"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "burriedOutputText",
      "value": "column-1"
     }
    ],
    "ui:block": [
     {
      "aura:id": "blockCmp"
     }
    ]
   }
  },
  "componentClassChild.cmp": {
   "attributes": {
    "errorOutFromHelper_Child": {
     "name": "errorOutFromHelper_Child",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromRender_Child": {
     "name": "errorOutFromRender_Child",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromAfterRender_Child": {
     "name": "errorOutFromAfterRender_Child",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromReRender_Child": {
     "name": "errorOutFromReRender_Child",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromUnRender_Child": {
     "name": "errorOutFromUnRender_Child",
     "type": "Boolean",
     "default": "false"
    },
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.value}",
     "action": "{!c.valueChange}"
    }
   },
   "methods": {
    "setValue": {
     "value": {
      "name": "value",
      "type": "String"
     }
    }
   },
   "dependencies": {
    "ui:button": [
     {
      "label": "ChildButton",
      "aura:id": "button",
      "press": "{!c.clientAction}",
      "class": "uiButtonChild"
     }
    ]
   }
  },
  "componentClassClientProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://auratest:componentClassGrandChildServerProvider",
      "type": "COMPONENT"
     }
    ],
    "ui:button": [
     {
      "label": "{!v.id+'ClientProviderButton'}",
      "aura:id": "button",
      "press": "{!c.clientAction}"
     }
    ]
   }
  },
  "componentClassGrandChildClientProvider.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.value}",
     "action": "{!c.valueChange}"
    }
   },
   "methods": {
    "setValue": {
     "value": {
      "name": "value",
      "type": "String"
     }
    }
   },
   "dependencies": {
    "ui:button": [
     {
      "label": "GrandChildClientProviderButton",
      "aura:id": "button",
      "press": "{!c.clientAction}",
      "class": "uiButtonGrandChildClientProvider"
     }
    ]
   }
  },
  "componentClassGrandChildServerProvider.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.value}",
     "action": "{!c.valueChange}"
    }
   },
   "methods": {
    "setValue": {
     "value": {
      "name": "value",
      "type": "String"
     }
    }
   },
   "dependencies": {
    "ui:button": [
     {
      "label": "GrandChildServerProviderButton",
      "aura:id": "button",
      "press": "{!c.clientAction}"
     }
    ]
   }
  },
  "componentClassInner.cmp": {
   "attributes": {
    "valueInner": {
     "name": "valueInner",
     "type": "String",
     "default": "valueInner"
    },
    "errorOutFromHelper_Inner": {
     "name": "errorOutFromHelper_Inner",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromRender_Inner": {
     "name": "errorOutFromRender_Inner",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromAfterRender_Inner": {
     "name": "errorOutFromAfterRender_Inner",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromReRender_Inner": {
     "name": "errorOutFromReRender_Inner",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromUnRender_Inner": {
     "name": "errorOutFromUnRender_Inner",
     "type": "Boolean",
     "default": "false"
    },
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.valueInner}",
     "action": "{!c.valueChange}"
    }
   },
   "methods": {
    "setValue": {
     "value": {
      "name": "value",
      "type": "String"
     }
    }
   },
   "dependencies": {
    "ui:button": [
     {
      "label": "InnerButton",
      "aura:id": "button",
      "press": "{!c.clientAction}",
      "class": "uiButtonInner"
     }
    ]
   }
  },
  "componentClassLifecycleTest.cmp": {
   "attributes": {
    "testOuter": {
     "name": "testOuter",
     "type": "Boolean",
     "default": "false"
    },
    "testOuterInIteration": {
     "name": "testOuterInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testParent": {
     "name": "testParent",
     "type": "Boolean",
     "default": "false"
    },
    "testParentInIteration": {
     "name": "testParentInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testChild": {
     "name": "testChild",
     "type": "Boolean",
     "default": "false"
    },
    "testChildInIteration": {
     "name": "testChildInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testGrandChildServer": {
     "name": "testGrandChildServer",
     "type": "Boolean",
     "default": "false"
    },
    "testGrandChildServerInIteration": {
     "name": "testGrandChildServerInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testGrandChildClient": {
     "name": "testGrandChildClient",
     "type": "Boolean",
     "default": "false"
    },
    "testGrandChildClientInIteration": {
     "name": "testGrandChildClientInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testServerProviderGrandChildClientProvider": {
     "name": "testServerProviderGrandChildClientProvider",
     "type": "Boolean",
     "default": "false"
    },
    "testClientProviderGrandChildClientProvider": {
     "name": "testClientProviderGrandChildClientProvider",
     "type": "Boolean",
     "default": "false"
    },
    "testClientProviderGrandChildClientProviderInIteration": {
     "name": "testClientProviderGrandChildClientProviderInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testServerProviderGrandChildClientProviderInIteration": {
     "name": "testServerProviderGrandChildClientProviderInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testServerProviderClientProviderGrandChildClientProvider": {
     "name": "testServerProviderClientProviderGrandChildClientProvider",
     "type": "Boolean",
     "default": "false"
    },
    "testServerProviderClientProviderGrandChildClientProviderInIteration": {
     "name": "testServerProviderClientProviderGrandChildClientProviderInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testServerProviderGrandChildServerProvider": {
     "name": "testServerProviderGrandChildServerProvider",
     "type": "Boolean",
     "default": "false"
    },
    "testClientProviderGrandChildServerProvider": {
     "name": "testClientProviderGrandChildServerProvider",
     "type": "Boolean",
     "default": "false"
    },
    "testServerProviderGrandChildServerProviderInIteration": {
     "name": "testServerProviderGrandChildServerProviderInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testClientProviderGrandChildServerProviderInIteration": {
     "name": "testClientProviderGrandChildServerProviderInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "testServerProviderClientProviderGrandChildServerProvider": {
     "name": "testServerProviderClientProviderGrandChildServerProvider",
     "type": "Boolean",
     "default": "false"
    },
    "testServerProviderClientProviderGrandChildServerProviderInIteration": {
     "name": "testServerProviderClientProviderGrandChildServerProviderInIteration",
     "type": "Boolean",
     "default": "false"
    },
    "shouldRender": {
     "name": "shouldRender",
     "type": "Boolean",
     "default": "true"
    },
    "shouldCreate": {
     "name": "shouldCreate",
     "type": "Boolean",
     "default": "true"
    },
    "iterationItems": {
     "name": "iterationItems",
     "type": "List",
     "default": ""
    },
    "iterationForceServer": {
     "name": "iterationForceServer",
     "type": "Boolean",
     "default": "false"
    },
    "cmpDef": {
     "name": "cmpDef",
     "type": "String",
     "default": "markup://auratest:componentClassParent"
    },
    "errorOutFrom": {
     "name": "errorOutFrom",
     "type": "String",
     "default": "errorOutFromRender_Parent"
    },
    "logFilter": {
     "name": "logFilter",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:logPanel": [
     {
      "aura:id": "logPanel",
      "filter": "{!v.logFilter}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.shouldCreate}"
     },
     {
      "isTrue": "{!v.testOuter}"
     },
     {
      "isTrue": "{!v.testParent}"
     },
     {
      "isTrue": "{!v.testChild}"
     },
     {
      "isTrue": "{!v.testGrandChildServer}"
     },
     {
      "isTrue": "{!v.testServerProviderGrandChildServerProvider}"
     },
     {
      "isTrue": "{!v.testGrandChildClient}"
     },
     {
      "isTrue": "{!v.testServerProviderGrandChildClientProvider}"
     },
     {
      "isTrue": "{!v.testClientProviderGrandChildServerProvider}"
     },
     {
      "isTrue": "{!v.testClientProviderGrandChildClientProvider}"
     },
     {
      "isTrue": "{!v.testServerProviderClientProviderGrandChildClientProvider}"
     },
     {
      "isTrue": "{!v.testServerProviderClientProviderGrandChildServerProvider}"
     },
     {
      "isTrue": "{!v.testOuterInIteration}"
     },
     {
      "isTrue": "{!v.testParentInIteration}"
     },
     {
      "isTrue": "{!v.testChildInIteration}"
     },
     {
      "isTrue": "{!v.testGrandChildServerInIteration}"
     },
     {
      "isTrue": "{!v.testGrandChildClientInIteration}"
     },
     {
      "isTrue": "{!v.testClientProviderGrandChildClientProviderInIteration}"
     },
     {
      "isTrue": "{!v.testServerProviderGrandChildClientProviderInIteration}"
     },
     {
      "isTrue": "{!v.testClientProviderGrandChildServerProviderInIteration}"
     },
     {
      "isTrue": "{!v.testServerProviderGrandChildServerProviderInIteration}"
     },
     {
      "isTrue": "{!v.testServerProviderClientProviderGrandChildServerProviderInIteration}"
     },
     {
      "isTrue": "{!v.testServerProviderClientProviderGrandChildClientProviderInIteration}"
     }
    ],
    "aura:renderIf": [
     {
      "isTrue": "{!v.shouldRender}"
     }
    ],
    "auratest:componentClassOuter": [
     {
      "aura:id": "Outer",
      "id": "Outer"
     },
     {
      "aura:id": "OuterInIteration",
      "id": "OuterInIteration"
     }
    ],
    "auratest:componentClassParent": [
     {
      "aura:id": "Parent",
      "id": "Parent"
     },
     {
      "aura:id": "ParentInIteration",
      "id": "ParentInIteration"
     }
    ],
    "auratest:componentClassChild": [
     {
      "aura:id": "Child",
      "id": "Child"
     },
     {
      "aura:id": "ChildInIteration",
      "id": "ChildInIteration"
     }
    ],
    "auratest:componentClassGrandChildServerProvider": [
     {
      "aura:id": "GrandChildServerProvider",
      "id": "GrandChildServerProvider"
     },
     {
      "aura:id": "GrandChildServerProviderInIteration",
      "id": "GrandChildServerProviderInIteration"
     }
    ],
    "auratest:componentClassServerProvider": [
     {
      "aura:id": "ServerProviderGrandChildServerProvider",
      "requestDescriptor": "auratest:componentClassGrandChildServerProvider",
      "requestAttributes": "{'id':'ServerProviderGrandChildServerProvider'}"
     },
     {
      "aura:id": "ServerProviderGrandChildClientProvider",
      "requestDescriptor": "auratest:componentClassGrandChildClientProvider",
      "requestAttributes": "{'id':'ServerProviderGrandChildClientProvider'}"
     },
     {
      "aura:id": "ServerProviderClientProviderGrandChildClientProvider",
      "requestDescriptor": "auratest:componentClassClientProvider",
      "requestAttributes": "{'requestDescriptor':'auratest:componentClassGrandChildClientProvider','requestAttributes':{'id':'ServerProviderClientProviderGrandChildClientProvider'}}"
     },
     {
      "aura:id": "ServerProviderClientProviderGrandChildServerProvider",
      "requestDescriptor": "auratest:componentClassClientProvider",
      "requestAttributes": "{'requestDescriptor':'auratest:componentClassGrandChildServerProvider','requestAttributes':{'id':'ServerProviderClientProviderGrandChildServerProvider'}}"
     },
     {
      "aura:id": "ServerProviderGrandChildClientProviderInIteration",
      "requestDescriptor": "auratest:componentClassGrandChildClientProvider",
      "requestAttributes": "{'id':'ServerProviderGrandChildClientProviderInIteration'}"
     },
     {
      "aura:id": "ServerProviderGrandChildServerProviderInIteration",
      "requestDescriptor": "auratest:componentClassGrandChildServerProvider",
      "requestAttributes": "{'id':'ServerProviderGrandChildServerProviderInIteration'}"
     },
     {
      "aura:id": "ServerProviderClientProviderGrandChildServerProviderInIteration",
      "requestDescriptor": "auratest:componentClassClientProvider",
      "requestAttributes": "{'requestDescriptor':'auratest:componentClassGrandChildServerProvider','requestAttributes':{'id':'ServerProviderClientProviderGrandChildServerProviderInIteration'}}"
     },
     {
      "aura:id": "ServerProviderClientProviderGrandChildClientProviderInIteration",
      "requestDescriptor": "auratest:componentClassClientProvider",
      "requestAttributes": "{'requestDescriptor':'auratest:componentClassGrandChildClientProvider','requestAttributes':{'id':'ServerProviderClientProviderGrandChildClientProviderInIteration'}}"
     }
    ],
    "auratest:componentClassGrandChildClientProvider": [
     {
      "aura:id": "GrandChildClientProvider",
      "id": "GrandChildClientProvider"
     },
     {
      "aura:id": "GrandChildClientProviderInIteration",
      "id": "GrandChildClientProviderInIteration"
     }
    ],
    "auratest:componentClassClientProvider": [
     {
      "aura:id": "ClientProviderGrandChildServerProvider",
      "requestDescriptor": "auratest:componentClassGrandChildServerProvider",
      "requestAttributes": "{'id':'ClientProviderGrandChildServerProvider'}"
     },
     {
      "aura:id": "ClientProviderGrandChildClientProvider",
      "requestDescriptor": "auratest:componentClassGrandChildClientProvider",
      "requestAttributes": "{'id':'ClientProviderGrandChildClientProvider'}"
     },
     {
      "aura:id": "ClientProvidedGrandChildClientProviderInIteration",
      "requestDescriptor": "auratest:componentClassGrandChildClientProvider",
      "requestAttributes": "{'id':'ClientProvidedGrandChildClientProviderInIteration'}"
     },
     {
      "aura:id": "ClientProviderGrandChildServerProviderInIteration",
      "requestDescriptor": "auratest:componentClassGrandChildServerProvider",
      "requestAttributes": "{'id':'ClientProviderGrandChildServerProviderInIteration'}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.iterationItems}",
      "var": "x",
      "forceServer": "{!v.iterationForceServer}"
     }
    ],
    "ui:button": [
     {
      "label": "createCmp and push to client div",
      "aura:id": "button_newCmp",
      "press": "{!c.createCmp}",
      "class": "uiButton_createCmp"
     }
    ]
   }
  },
  "componentClassOuter.cmp": {
   "attributes": {
    "id": {
     "name": "id",
     "type": "String"
    },
    "valueOuter": {
     "name": "valueOuter",
     "type": "String",
     "default": "valueOuter"
    },
    "errorOutFromHelper_Outer": {
     "name": "errorOutFromHelper_Outer",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromRender_Outer": {
     "name": "errorOutFromRender_Outer",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromAfterRender_Outer": {
     "name": "errorOutFromAfterRender_Outer",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromReRender_Outer": {
     "name": "errorOutFromReRender_Outer",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromUnRender_Outer": {
     "name": "errorOutFromUnRender_Outer",
     "type": "Boolean",
     "default": "false"
    },
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.valueOuter}",
     "action": "{!c.valueChange}"
    }
   },
   "methods": {
    "setValue": {
     "value": {
      "name": "value",
      "type": "String"
     }
    }
   },
   "dependencies": {
    "ui:button": [
     {
      "label": "OuterButton",
      "aura:id": "button",
      "press": "{!c.clientAction}",
      "class": "uiButtonOuter"
     }
    ],
    "aura:text": [
     {
      "value": "{!v.valueOuter}"
     }
    ],
    "auratest:componentClassInner": [
     {
      "aura:id": "Inner",
      "valueInner": "{!v.valueOuter}"
     }
    ]
   }
  },
  "componentClassParent.cmp": {
   "attributes": {
    "id": {
     "name": "id",
     "type": "String"
    },
    "value": {
     "name": "value",
     "type": "String"
    },
    "errorOutFromHelper_Parent": {
     "name": "errorOutFromHelper_Parent",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromRender_Parent": {
     "name": "errorOutFromRender_Parent",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromAfterRender_Parent": {
     "name": "errorOutFromAfterRender_Parent",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromReRender_Parent": {
     "name": "errorOutFromReRender_Parent",
     "type": "Boolean",
     "default": "false"
    },
    "errorOutFromUnRender_Parent": {
     "name": "errorOutFromUnRender_Parent",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.value}",
     "action": "{!c.valueChange}"
    }
   },
   "methods": {
    "setValue": {
     "value": {
      "name": "value",
      "type": "String"
     }
    }
   },
   "dependencies": {
    "ui:button": [
     {
      "label": "ParentButton",
      "aura:id": "button",
      "press": "{!c.clientAction}",
      "class": "uiButtonParent"
     }
    ],
    "aura:text": [
     {
      "value": "{!v.value}"
     }
    ]
   }
  },
  "componentClassSerialization.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "makeRequestToServer": {}
   },
   "dependencies": {}
  },
  "componentClassServerProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "{!v.id+'ServerProviderButton'}",
      "aura:id": "button",
      "press": "{!c.clientAction}"
     }
    ]
   }
  },
  "componentClassServerProviderIteration.cmp": {
   "attributes": {
    "iterationForceServer": {
     "name": "iterationForceServer",
     "type": "Boolean",
     "default": "true"
    },
    "shouldCreate1": {
     "name": "shouldCreate1",
     "type": "Boolean",
     "default": "true"
    },
    "shouldCreate2": {
     "name": "shouldCreate2",
     "type": "Boolean",
     "default": "true"
    },
    "shouldCreate3": {
     "name": "shouldCreate3",
     "type": "Boolean",
     "default": "true"
    },
    "shouldCreate4": {
     "name": "shouldCreate4",
     "type": "Boolean",
     "default": "false"
    },
    "iterationItems": {
     "name": "iterationItems",
     "type": "List",
     "default": "one,two,three"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.shouldCreate1}"
     },
     {
      "isTrue": "{!v.shouldCreate4}"
     },
     {
      "isTrue": "{!v.shouldCreate3}"
     },
     {
      "isTrue": "{!v.shouldCreate4}"
     }
    ],
    "aura:renderIf": [
     {
      "isTrue": "{!v.shouldCreate2}"
     }
    ],
    "auratest:componentClassGrandChildClientProvider": [
     {
      "aura:id": "GrandChildClientProvider",
      "id": "GrandChildClientProvider"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.iterationItems}",
      "var": "x",
      "forceServer": "{!v.iterationForceServer}"
     }
    ],
    "auratest:componentClassServerProvider": [
     {
      "aura:id": "ServerProviderGrandChildClientProviderInIteration",
      "requestDescriptor": "auratest:componentClassGrandChildClientProvider",
      "requestAttributes": "{'id':'ServerProviderGrandChildClientProviderInIteration'}"
     },
     {
      "aura:id": "ServerProviderGrandChildClientProviderInIteration",
      "requestDescriptor": "auratest:componentClassGrandChildClientProvider",
      "requestAttributes": "{'id':'ServerProviderGrandChildClientProviderInIteration'}"
     }
    ]
   }
  },
  "componentClassUnloaded.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "componentInstanceOf.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:testInterfaceImpl": [
     {
      "aura:id": "basic"
     }
    ],
    "auratest:testInterfaceChildImpl": [
     {
      "aura:id": "child"
     }
    ],
    "auratest:testInterfaceGrandchildImpl": [
     {
      "aura:id": "grandchild"
     }
    ],
    "auratest:testInterfaceChildImplChild": [
     {
      "aura:id": "stepchild"
     }
    ],
    "auratest:testInterfaceChildImplGrandchild": [
     {
      "aura:id": "stepgrandchild"
     }
    ],
    "auratest:testInterfaceMultipleImpl": [
     {
      "aura:id": "multiple"
     }
    ],
    "auratest:test_Component_NoModel": [
     {
      "aura:id": "none"
     }
    ]
   }
  },
  "context.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://auratest:test_button"
     }
    ]
   }
  },
  "errorHandling.cmp": {
   "attributes": {
    "requiredAttribute": {
     "name": "requiredAttribute",
     "type": "String",
     "required": "true"
    },
    "message": {
     "name": "message",
     "type": "String"
    },
    "error": {
     "name": "error",
     "type": "String"
    },
    "eventHandled": {
     "name": "eventHandled",
     "type": "Boolean",
     "default": "false"
    },
    "handleSystemError": {
     "name": "handleSystemError",
     "type": "Boolean",
     "default": "false"
    },
    "throwErrorFromInit": {
     "name": "throwErrorFromInit",
     "type": "Boolean",
     "default": "false"
    },
    "throwErrorFromRender": {
     "name": "throwErrorFromRender",
     "type": "boolean",
     "default": "false"
    },
    "throwErrorFromRerender": {
     "name": "throwErrorFromRerender",
     "type": "Boolean",
     "default": "false"
    },
    "throwErrorFromAfterRender": {
     "name": "throwErrorFromAfterRender",
     "type": "Boolean",
     "default": "false"
    },
    "throwErrorFromUnrender": {
     "name": "throwErrorFromUnrender",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {
    "auratest:errorHandlingLib": {
     "library": "auratest:errorHandlingLib",
     "property": "ErrorHandlingLib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "undefined": {
     "event": "aura:systemError",
     "action": "{!c.handleSystemError}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromClientController}",
      "class": "errorFromClientControllerButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromServerActionCallback}",
      "class": "errorFromServerActionCallbackButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromCreateComponentCallback}",
      "class": "errorFromCreateComponentCallbackButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromFunctionWrappedInGetCallback}",
      "class": "errorFromFunctionWrappedInGetCallbackButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromLibraryCode}",
      "class": "errorFromLibraryCodeButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromRerender}",
      "class": "errorFromRerenderButton"
     },
     {
      "label": "Throw",
      "press": "{!c.throwErrorFromUnrender}",
      "class": "errorFromUnrenderButton"
     }
    ]
   }
  },
  "errorHandlingErrorModelCmp.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "eventCounter.cmp": {
   "attributes": {
    "renderCount": {
     "default": "0",
     "type": "Integer",
     "name": "renderCount"
    },
    "rerenderCount": {
     "default": "0",
     "type": "Integer",
     "name": "rerenderCount"
    },
    "unrenderCount": {
     "default": "0",
     "type": "Integer",
     "name": "unrenderCount"
    },
    "passthrough": {
     "type": "String",
     "name": "passthrough"
    },
    "passthroughObj": {
     "type": "Object",
     "name": "passthroughObj"
    },
    "dirty": {
     "default": "0",
     "type": "Integer",
     "name": "dirty"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "auratest:renderEvent",
      "type": "EVENT"
     }
    ]
   }
  },
  "fastClickDomEvents.cmp": {
   "attributes": {
    "outterEvent": {
     "name": "outterEvent",
     "type": "String",
     "default": ""
    },
    "middleEvent": {
     "name": "middleEvent",
     "type": "String",
     "default": ""
    },
    "innerEvent": {
     "name": "innerEvent",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "value": "This is the outter area"
     },
     {
      "value": "This is the middle area"
     },
     {
      "value": "This is the inner area"
     },
     {
      "value": "{!v.outterEvent}"
     },
     {
      "value": "{!v.middleEvent}"
     },
     {
      "value": "{!v.innerEvent}"
     }
    ],
    "ui:inputRadio": [
     {
      "aura:id": "maleRadio",
      "name": "gender",
      "value": "male",
      "label": "Male"
     },
     {
      "aura:id": "femaleRadio",
      "name": "gender",
      "value": "female",
      "label": "Female"
     }
    ],
    "ui:button": [
     {
      "aura:id": "clearBtn",
      "label": "clear",
      "press": "{!c.clearOutput}"
     }
    ]
   }
  },
  "html.cmp": {
   "attributes": {
    "clickCount": {
     "name": "clickCount",
     "type": "Integer",
     "default": "0"
    },
    "classValue": {
     "name": "classValue",
     "type": "String"
    },
    "mouseOverEvent": {
     "name": "mouseOverEvent",
     "type": "Boolean",
     "default": "false"
    },
    "mouseOutEvent": {
     "name": "mouseOutEvent",
     "type": "Boolean",
     "default": "true"
    },
    "type": {
     "name": "type",
     "default": "text",
     "type": "String"
    },
    "style": {
     "name": "style",
     "default": "color:blue",
     "type": "String"
    },
    "dataName": {
     "name": "dataName",
     "default": "textElement",
     "type": "String"
    },
    "href": {
     "name": "href",
     "default": "http://bazinga.com/",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:image": [
     {
      "aura:id": "img",
      "src": "/auraFW/resources/aura/s.gif",
      "imageType": "informational",
      "alt": "Aura"
     }
    ]
   }
  },
  "htmlComponent.cmp": {
   "attributes": {
    "testUndefinedTagAttr": {
     "default": "false",
     "name": "testUndefinedTagAttr",
     "type": "Boolean"
    },
    "testNoTagAttr": {
     "default": "false",
     "name": "testNoTagAttr",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:html": [
     {
      "tag": "a",
      "href": "www.salesforce.com",
      "aura:id": "atag"
     },
     {
      "tag": "a",
      "abc": "www.salesforce.com",
      "aura:id": "atagInvalidAttr"
     },
     {
      "tag": "a",
      "aura:id": "noAttr"
     },
     {
      "aura:id": "undefinedTag",
      "tag": "{!v.attr}"
     },
     {
      "aura:id": "notag",
      "href": "www.salesforce.com"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.testUndefinedTagAttr}"
     },
     {
      "isTrue": "{!v.testNoTagAttr}"
     }
    ]
   }
  },
  "htmlEntity.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:text": [
     {
      "aura:id": "gt",
      "value": ">"
     },
     {
      "aura:id": "lt",
      "value": "<"
     },
     {
      "aura:id": "amp",
      "value": "&"
     },
     {
      "aura:id": "apos",
      "value": "'"
     },
     {
      "aura:id": "quot",
      "value": "\""
     },
     {
      "aura:id": "nbsp",
      "value": "C&nbsp;D"
     },
     {
      "aura:id": "ensp",
      "value": "&ensp;"
     },
     {
      "aura:id": "emsp",
      "value": "&emsp;"
     },
     {
      "aura:id": "mdash",
      "value": "&mdash;"
     },
     {
      "aura:id": "copy",
      "value": "&copy;"
     },
     {
      "aura:id": "trade",
      "value": "&trade;"
     },
     {
      "aura:id": "reg",
      "value": "&reg;"
     },
     {
      "aura:id": "laquo",
      "value": "&laquo;"
     },
     {
      "aura:id": "deg",
      "value": "&deg;"
     },
     {
      "aura:id": "acute",
      "value": "&acute;"
     },
     {
      "aura:id": "raquo",
      "value": "&raquo;"
     },
     {
      "aura:id": "cent",
      "value": "&cent;"
     },
     {
      "aura:id": "euro",
      "value": "&euro;"
     },
     {
      "aura:id": "yen",
      "value": "&yen;"
     },
     {
      "aura:id": "pound",
      "value": "&pound;"
     }
    ],
    "ui:outputText": [
     {
      "class": "gt",
      "aura:id": "gt",
      "value": "{!'>'}"
     },
     {
      "class": "lt",
      "aura:id": "lt",
      "value": "{!'<'}"
     },
     {
      "class": "amp",
      "aura:id": "amp",
      "value": "{!'&'}"
     },
     {
      "class": "apos",
      "aura:id": "apos",
      "value": "{!'\\''}"
     },
     {
      "class": "quot",
      "aura:id": "quot",
      "value": "{!'\"'}"
     },
     {
      "class": "nbsp",
      "aura:id": "nbsp",
      "value": "{!'C&nbsp;D'}"
     },
     {
      "class": "ensp",
      "aura:id": "ensp",
      "value": "{!'&ensp;'}"
     },
     {
      "class": "emsp",
      "aura:id": "emsp",
      "value": "{!'&emsp;'}"
     },
     {
      "class": "mdash",
      "aura:id": "mdash",
      "value": "{!'&mdash;'}"
     },
     {
      "class": "copy",
      "aura:id": "copy",
      "value": "{!'&copy;'}"
     },
     {
      "class": "trade",
      "aura:id": "trade",
      "value": "{!'&trade;'}"
     },
     {
      "class": "reg",
      "aura:id": "reg",
      "value": "{!'&reg;'}"
     },
     {
      "class": "laquo",
      "aura:id": "laquo",
      "value": "{!'&laquo;'}"
     },
     {
      "class": "deg",
      "aura:id": "deg",
      "value": "{!'&deg;'}"
     },
     {
      "class": "acute",
      "aura:id": "acute",
      "value": "{!'&acute;'}"
     },
     {
      "class": "raquo",
      "aura:id": "raquo",
      "value": "{!'&raquo;'}"
     },
     {
      "class": "cent",
      "aura:id": "cent",
      "value": "{!'&cent;'}"
     },
     {
      "class": "euro",
      "aura:id": "euro",
      "value": "{!'&euro;'}"
     },
     {
      "class": "yen",
      "aura:id": "yen",
      "value": "{!'&yen;'}"
     },
     {
      "class": "pound",
      "aura:id": "pound",
      "value": "{!'&pound;'}"
     }
    ]
   }
  },
  "invalidCss.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "jsmock.cmp": {
   "attributes": {
    "providedAttribute": {
     "name": "providedAttribute",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auraStorage:init": [
     {
      "name": "actions",
      "secure": "true",
      "debugLoggingEnabled": "true",
      "defaultExpiration": "60",
      "defaultAutoRefreshInterval": "60"
     }
    ],
    "ui:button": [
     {
      "aura:id": "trigger",
      "press": "{!c.getServerString}",
      "label": "get a string"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!m.stringList}",
      "var": "x",
      "start": "{!m.integer}",
      "end": "{!m.integerString}"
     }
    ]
   }
  },
  "label.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    },
    "valueElse": {
     "name": "valueElse",
     "type": "String"
    },
    "date": {
     "name": "date",
     "type": "Date",
     "default": "2015-09-08"
    },
    "string": {
     "name": "string",
     "type": "String",
     "default": "test"
    },
    "boolean": {
     "name": "boolean",
     "type": "boolean",
     "default": "false"
    },
    "double": {
     "name": "double",
     "type": "double",
     "default": "20"
    },
    "undef": {
     "name": "undef",
     "type": "Object"
    },
    "noll": {
     "name": "noll",
     "type": "Object"
    },
    "booleanForIf": {
     "name": "booleanForIf",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:label": [
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "home"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "login"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.string + v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.valueElse}"
     },
     {
      "value": "{!v.value}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!(v.booleanForIf)}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ],
    "ui:outputDate": [
     {
      "value": "{!v.date}"
     }
    ]
   }
  },
  "labelExpression.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    },
    "valueElse": {
     "name": "valueElse",
     "type": "String"
    },
    "date": {
     "name": "date",
     "type": "Date",
     "default": "2015-09-08"
    },
    "string": {
     "name": "string",
     "type": "String",
     "default": "test"
    },
    "boolean": {
     "name": "boolean",
     "type": "boolean",
     "default": "false"
    },
    "double": {
     "name": "double",
     "type": "double",
     "default": "20"
    },
    "undef": {
     "name": "undef",
     "type": "Object"
    },
    "noll": {
     "name": "noll",
     "type": "Object"
    },
    "list": {
     "name": "list",
     "type": "List",
     "default": "1,2,3,4,5"
    },
    "booleanForIf": {
     "name": "booleanForIf",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:label": [
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.string + v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.value}"
     },
     {
      "value": "{!v.valueElse}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!(v.booleanForIf)}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "logPanel.cmp": {
   "attributes": {
    "logs": {
     "name": "logs",
     "type": "List",
     "default": "",
     "description": "display copy of filtered logs"
    },
    "filter": {
     "name": "filter",
     "type": "String",
     "description": "output log entries matching this regex, only the first capturing group if found"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.filter}",
     "action": "{!c.filter}"
    }
   },
   "methods": {
    "clear": {}
   },
   "dependencies": {
    "ui:button": [
     {
      "label": "clear logs",
      "press": "{!c.clear}"
     }
    ],
    "ui:inputText": [
     {
      "value": "{!v.filter}",
      "placeholder": "filter regexp"
     }
    ]
   }
  },
  "parseError.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_button": [
     {
      "press": "{!c.handleclick}",
      "label": "click"
     }
    ]
   }
  },
  "require.cmp": {
   "attributes": {
    "version": {
     "type": "String",
     "name": "version"
    },
    "cmpExist": {
     "type": "Boolean",
     "name": "cmpExist"
    },
    "versionInRender": {
     "type": "String",
     "name": "versionInRender"
    },
    "versionInAfterRender": {
     "type": "String",
     "name": "versionInAfterRender"
    },
    "versionInRerender": {
     "type": "String",
     "name": "versionInRerender"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {
    "updateVersionFromGetVersionMethod": {},
    "updateVersionByComponentValueProvider": {},
    "udpateWithBoundVersionExpression": {},
    "udpateWithUnboundVersionExpression": {},
    "updateWithEqualsComponentExist": {},
    "updateWithInequalityComparisonComponentExist": {},
    "updateVersionIfLargerThanOne": {}
   },
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!'2.0' == version}"
     }
    ],
    "aura:text": [
     {
      "aura:id": "boundVersionExpression",
      "value": "{!version}"
     },
     {
      "aura:id": "unboundVersionExpression",
      "value": "{#version}"
     }
    ]
   }
  },
  "requireConsumer.cmp": {
   "attributes": {
    "consumedCmp": {
     "type": "Aura.Component",
     "name": "consumedCmp"
    },
    "versionInConsumedCmp": {
     "type": "String",
     "name": "versionInConsumedCmp",
     "default": "default"
    },
    "actionDone": {
     "type": "Boolean",
     "name": "actionDone",
     "default": "false"
    }
   },
   "imports": {},
   "events": {
    "versionEvt": {
     "name": "versionEvt",
     "type": "auratest:testEvent"
    }
   },
   "handlers": {},
   "methods": {
    "updateWithVersionInConsumedComponentInTest": {},
    "updateWithVersionInConsumedComponentInSamenamespace": {},
    "updateWithVersionInConsumedComponent": {},
    "fireTestComponentVersionEvent": {}
   },
   "dependencies": {
    "aura:require": [
     {
      "namespace": "test",
      "version": "123456.0"
     },
     {
      "namespace": "componentTest",
      "version": "3.0"
     }
    ],
    "test:require": [
     {
      "aura:id": "testCmp",
      "versionEvt": "{!c.updateVersionFromVersionEvent}"
     }
    ],
    "auratest:require": [
     {
      "aura:id": "auratest_require"
     }
    ]
   }
  },
  "requireWithServerAction.cmp": {
   "attributes": {
    "actionDone": {
     "type": "Boolean",
     "name": "actionDone",
     "default": "false"
    },
    "version": {
     "type": "String",
     "name": "version"
    },
    "text": {
     "type": "String",
     "name": "text"
    }
   },
   "imports": {},
   "events": {
    "versionEvt": {
     "name": "versionEvt",
     "type": "auratest:testEvent"
    }
   },
   "handlers": {
    "versionEvt": {
     "name": "versionEvt",
     "action": "{!c.updateVersionFromServerController}"
    }
   },
   "methods": {
    "updateVersionFromClientController": {},
    "updateVersionFromServerController": {},
    "updateTextWithCallingDescriptor": {},
    "fireVersionEvent": {}
   },
   "dependencies": {}
  },
  "rerenderAbstract.cmp": {
   "attributes": {
    "toggleAbstract": {
     "name": "toggleAbstract",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:rerenderCounter": [
     {
      "aura:id": "counter"
     }
    ],
    "ui:button": [
     {
      "label": "v.abstract",
      "press": "{!c.toggleAbstract}",
      "aura:id": "toggleAbstract"
     },
     {
      "label": "m.abstract",
      "press": "{!c.toggleAbstractModel}",
      "aura:id": "toggleAbstractModel"
     },
     {
      "label": "v.interface",
      "press": "{!c.toggleInterface}",
      "aura:id": "toggleInterface"
     }
    ]
   }
  },
  "rerenderChild.cmp": {
   "attributes": {
    "title": {
     "name": "title",
     "type": "String"
    },
    "toggleChild": {
     "name": "toggleChild",
     "type": "Boolean"
    },
    "ownRenderCounter": {
     "name": "ownRenderCounter",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "value": "{!v.title}",
      "aura:id": "title"
     }
    ],
    "auratest:rerenderCounter": [
     {
      "aura:id": "counter"
     }
    ],
    "ui:button": [
     {
      "label": "v.child",
      "press": "{!c.toggleChild}",
      "aura:id": "toggleChild"
     }
    ]
   }
  },
  "rerenderCounter.cmp": {
   "attributes": {
    "count": {
     "default": "0",
     "type": "Integer",
     "name": "count"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "rerenderParent.cmp": {
   "attributes": {
    "toggleParent": {
     "name": "toggleParent",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:rerenderCounter": [
     {
      "aura:id": "counter"
     }
    ],
    "ui:button": [
     {
      "label": "v.parent",
      "press": "{!c.toggleParent}",
      "aura:id": "toggleParent"
     },
     {
      "label": "m.parent",
      "press": "{!c.toggleParentModel}",
      "aura:id": "toggleParentModel"
     }
    ]
   }
  },
  "testComponent1.cmp": {
   "attributes": {
    "myString": {
     "name": "myString",
     "type": "String",
     "default": "Default String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:testComponent2": [
     {
      "myInteger": "1"
     }
    ]
   }
  },
  "testComponent2.cmp": {
   "attributes": {
    "myInteger": {
     "name": "myInteger",
     "type": "Integer",
     "default": "5",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testComponent3.cmp": {
   "attributes": {
    "myBoolean": {
     "name": "myBoolean",
     "type": "Boolean",
     "default": "True"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testInterfaceChildImpl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testInterfaceChildImplChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testInterfaceChildImplGrandchild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testInterfaceGrandchildImpl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testInterfaceImpl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testInterfaceMultipleImpl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Abstract.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Abstract_Impl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_BrowserInfo.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Component_NoModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_CompoundCntrlr.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_button": [
     {
      "label": "Click me to Trigger Controller Action(client and server action have similar names)",
      "class": "button1",
      "press": "{!c.similarActionNames}"
     },
     {
      "label": "Click me to Trigger Controller Action(client and server action have dissimilar names)",
      "class": "button2",
      "press": "{!c.dissimilarActionNames}"
     },
     {
      "label": "Click me to Trigger Controller Action(Ideal scenario)",
      "class": "button3",
      "press": "{!c.anotherActionName}"
     }
    ]
   }
  },
  "test_CompoundFormula_NonString.cmp": {
   "attributes": {
    "NameString": {
     "name": "NameString",
     "type": "String",
     "default": "Aura"
    },
    "Acc": {
     "name": "Acc",
     "type": "Account"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_button": [
     {
      "label": "{!v.NameString + !v.Acc}"
     }
    ]
   }
  },
  "test_HtmlEntities.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_InfiniteListButton.cmp": {
   "attributes": {
    "item": {
     "name": "item",
     "type": "Object",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "myButton",
      "label": "{! v.item.isClosed ? ('isClosed-true' + ' ' + v.item.Id): ('isClose-false' +  ' ' + v.item.Id) }",
      "press": "{!c.toggle}"
     }
    ]
   }
  },
  "test_InfiniteListCscc.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "add item",
      "aura:id": "addItem",
      "press": "{!c.add}"
     }
    ],
    "ui:infiniteList": [
     {
      "aura:id": "list",
      "itemVar": "item"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "auratest:test_InfiniteListDataProvider": [
     {}
    ],
    "auratest:test_InfiniteListButton": [
     {
      "aura:id": "aButton",
      "item": "{!item}"
     }
    ]
   }
  },
  "test_InfiniteListDataProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Instantiate_Component.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Labels_Concatenation.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Labels_NonExisting.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_button": [
     {
      "label": "{!$Label.Buttons.doesNotExist}",
      "class": "doesNotExist"
     }
    ]
   }
  },
  "test_Labels_Positive.cmp": {
   "attributes": {
    "labelSection": {
     "name": "labelSection",
     "type": "String",
     "default": "AccountSplashr"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_button": [
     {
      "label": "{!$Label.AccountSplash.title}",
      "class": "SectionKey"
     },
     {
      "label": "{!$Label.AccSalesTeam.salesTeam}",
      "class": "SectionKeyWithGrammar"
     },
     {
      "label": "{!$Label.Home.casesSolutionsButton}",
      "class": "SectionKeyWithEscapedHTML"
     }
    ],
    "aura:label": [
     {
      "value": "{!$Label.ViralInvite.viralInviteSubjectGroup}"
     },
     {
      "value": "{!$Label.Page_RecordTypeSelect.pageTitle}"
     },
     {
      "value": "{!$Label.Page_RecordTypeSelect.pageTitle}"
     },
     {
      "value": "{!$Label.ViralInvite.viralInviteSubjectGroup}"
     }
    ]
   }
  },
  "test_Model_Child2.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Model_Parent.cmp": {
   "attributes": {
    "attrInParent": {
     "name": "attrInParent",
     "type": "String",
     "default": "default attribute in Parent"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_NumberFormatting.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Relationship_Query.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.account.contacts}",
      "var": "i"
     }
    ],
    "auratest:test_Relationship_Query1": [
     {
      "contactAttr": "{!i}"
     }
    ]
   }
  },
  "test_Relationship_Query1.cmp": {
   "attributes": {
    "contactAttr": {
     "type": "Contact",
     "name": "contactAttr"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_Relationship_Query2": [
     {
      "contactId": "{!v.contactAttr.id}"
     }
    ]
   }
  },
  "test_Relationship_Query2.cmp": {
   "attributes": {
    "contactId": {
     "type": "Id",
     "name": "contactId"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_TokenValidation.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_button.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String"
    },
    "class": {
     "name": "class",
     "type": "String"
    }
   },
   "imports": {},
   "events": {
    "press": {
     "name": "press",
     "type": "auratest:test_press"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_css_a.cmp": {
   "attributes": {
    "content": {
     "name": "content",
     "type": "String",
     "default": "Component A"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_css_b": [
     {
      "content": "{!v.content}",
      "aura:id": "b"
     }
    ],
    "auratest:test_css_c": [
     {
      "content": "{!v.content}",
      "aura:id": "c"
     }
    ]
   }
  },
  "test_css_b.cmp": {
   "attributes": {
    "content": {
     "name": "content",
     "type": "String",
     "default": "Component B"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_css_c": [
     {
      "content": "{!v.content}"
     }
    ]
   }
  },
  "test_css_c.cmp": {
   "attributes": {
    "content": {
     "name": "content",
     "type": "String",
     "default": "Component C"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:test_css_d": [
     {
      "content": "{!v.content}"
     }
    ]
   }
  },
  "test_css_child.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_css_d.cmp": {
   "attributes": {
    "content": {
     "name": "content",
     "type": "String",
     "default": "Component D"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_css_grandParent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_css_parent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "text.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    },
    "truncate": {
     "name": "truncate",
     "type": "Integer"
    },
    "ellipsis": {
     "name": "ellipsis",
     "type": "Boolean",
     "default": "true"
    },
    "truncateByWord": {
     "name": "truncateByWord",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:text": [
     {
      "value": "{!v.value}",
      "truncate": "{!v.truncate}",
      "ellipsis": "{!v.ellipsis}",
      "truncateByWord": "{!v.truncateByWord}"
     }
    ]
   }
  },
  "unescapedHtml.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "toggle",
      "label": "toggle",
      "press": "{!c.toggleValue}"
     }
    ],
    "aura:unescapedHtml": [
     {
      "aura:id": "null",
      "value": "{!false || null}"
     },
     {
      "aura:id": "value",
      "value": "{!v.value}"
     }
    ]
   }
  },
  "unrender.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "auratest:renderEvent",
     "action": "{!c.logRenderEvent}"
    }
   },
   "methods": {},
   "dependencies": {
    "auratest:unrenderComponent": [
     {
      "aura:id": "alone",
      "name": "alone"
     },
     {
      "aura:id": "root",
      "name": "root"
     },
     {
      "name": "nested"
     }
    ]
   }
  },
  "unrenderComponent.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "versioningSuper.cmp": {
   "attributes": {
    "versionInSuperCmp": {
     "type": "String",
     "name": "versionInSuperCmp",
     "default": "default"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "clientLibraryTest": {
  "clientLibraryTest.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "render": "client",
      "useAppcache": "true",
      "access": "global"
     }
    ],
    "aura:clientLibrary": [
     {
      "name": "CkEditor",
      "type": "JS"
     },
     {
      "name": "clTestAppJS",
      "url": "js://clientLibraryTest.clientLibraryTest",
      "type": "JS"
     },
     {
      "name": "clTestAppCSS",
      "url": "css://clientLibraryTest.clientLibraryTest",
      "type": "CSS",
      "combine": "true"
     },
     {
      "name": "UIPerfCsS",
      "type": "CSS",
      "modes": "STATS"
     }
    ]
   }
  },
  "testDependencies.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "public",
      "render": "client"
     }
    ],
    "aura:clientLibrary": [
     {
      "name": "endofBody",
      "url": "http://likeaboss.com/topOfBody.js",
      "type": "JS"
     },
     {
      "name": "endofBody",
      "url": "http://likeaboss.com/endOfBody.js",
      "type": "JS"
     },
     {
      "name": "duplicate",
      "url": "http://likeaboss.com/duplicate.js",
      "type": "JS"
     },
     {
      "url": "http://likeaboss.com/mode.js",
      "type": "JS",
      "modes": "PTEST"
     }
    ],
    "clientLibraryTest:testChild": [
     {}
    ],
    "clientLibraryTest:testInterface": [
     {
      "implNumber": "1"
     }
    ],
    "clientLibraryTest:testFacet": [
     {},
     {}
    ]
   }
  },
  "testChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:clientLibrary": [
     {
      "name": "child",
      "url": "http://likeaboss.com/child.js",
      "type": "JS"
     },
     {
      "name": "duplicate",
      "url": "http://likeaboss.com/duplicate.js",
      "type": "JS"
     },
     {
      "url": "http://likeaboss.com/mode.js",
      "type": "JS",
      "modes": "CADENCE"
     }
    ]
   }
  },
  "testFacet.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:clientLibrary": [
     {
      "name": "facet",
      "url": "http://likeaboss.com/facet.js",
      "type": "JS"
     },
     {
      "name": "duplicate",
      "url": "http://likeaboss.com/duplicate.js",
      "type": "JS"
     },
     {
      "url": "http://likeaboss.com/mode.js",
      "type": "JS",
      "modes": "DEV"
     }
    ]
   }
  },
  "testInterfaceImpl1.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:clientLibrary": [
     {
      "name": "interfaceImpl1",
      "url": "http://likeaboss.com/interfaceImpl1.js",
      "type": "JS"
     }
    ]
   }
  },
  "testInterfaceImpl2.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:clientLibrary": [
     {
      "name": "interfaceImpl2",
      "url": "http://likeaboss.com/interfaceImpl2.js",
      "type": "JS"
     }
    ]
   }
  },
  "testParent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:clientLibrary": [
     {
      "name": "parent",
      "url": "http://likeaboss.com/parent.js",
      "type": "JS"
     },
     {
      "name": "duplicate",
      "url": "http://likeaboss.com/duplicate.js",
      "type": "JS"
     },
     {
      "url": "http://likeaboss.com/mode.js",
      "type": "JS",
      "modes": "STATS"
     }
    ]
   }
  }
 },
 "clientServiceTest": {
  "actionPriming.app": {
   "attributes": {
    "completed": {
     "name": "completed",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "getStringAction": {}
   },
   "dependencies": {
    "aura:application": [
     {
      "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "persistent": "false",
      "secure": "true",
      "defaultExpiration": "900",
      "defaultAutoRefreshInterval": "30",
      "maxSize": "4096"
     }
    ]
   }
  },
  "actionStorage.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "maxSize": "10"
     }
    ]
   }
  },
  "connectivity.app": {
   "attributes": {
    "host": {
     "name": "host",
     "type": "String",
     "default": ""
    },
    "actionStatus": {
     "name": "actionStatus",
     "type": "String",
     "default": ""
    },
    "actionValue": {
     "name": "actionValue",
     "type": "String",
     "default": ""
    },
    "eventsFired": {
     "name": "eventsFired",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "aura:connectionResumed",
     "action": "{!c.logEvent}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.setHost}"
    },
    "change": {
     "name": "change",
     "value": "{!v.host}",
     "action": "{!c.setHost}"
    }
   },
   "methods": {
    "sendRequest": {}
   },
   "dependencies": {
    "aura:application": [
     {
      "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inputHost",
      "label": "inputTextForConnection",
      "labelPosition": "hidden",
      "value": "{!v.host}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "testConnection",
      "label": "test connection",
      "press": "{!c.testConnection}"
     },
     {
      "aura:id": "setConnectedFalseButton",
      "label": "set connected false",
      "press": "{!c.setConnectedFalse}"
     },
     {
      "aura:id": "setConnectedTrueButton",
      "label": "set connected true",
      "press": "{!c.setConnectedTrue}"
     }
    ],
    "ui:outputUrl": [
     {
      "aura:id": "defaultlink",
      "label": "default layout",
      "value": "#default"
     },
     {
      "aura:id": "actionlink",
      "label": "action layout",
      "value": "#action"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!'events fired: ' + v.eventsFired}"
     },
     {
      "value": "{!'action status: ' + v.actionStatus}"
     },
     {
      "value": "{!'action value: ' + v.actionValue}"
     }
    ]
   }
  },
  "csrfTokenStorage.app": {
   "attributes": {
    "token": {
     "name": "token",
     "type": "String",
     "default": "undefined"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "template": "auraStorageTest:actionsStorageTemplate",
      "render": "client",
      "access": "unauthenticated"
     }
    ]
   }
  },
  "enqueueAction.cmp": {
   "attributes": {
    "log": {
     "name": "log",
     "type": "List",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auraStorage:init": [
     {
      "debugLoggingEnabled": "true",
      "name": "actions",
      "secure": "true",
      "persistent": "false",
      "clearStorageOnInit": "true",
      "defaultExpiration": "50",
      "defaultAutoRefreshInterval": "0"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.log}",
      "var": "i"
     }
    ]
   }
  },
  "resetToken.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auraStorage:init": [
     {
      "debugLoggingEnabled": "false",
      "name": "actions",
      "secure": "true",
      "persistent": "false",
      "clearStorageOnInit": "true",
      "defaultExpiration": "50",
      "defaultAutoRefreshInterval": "60"
     }
    ]
   }
  },
  "runActions.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "componentTest": {
  "creationPath.app": {
   "attributes": {
    "iftrue": {
     "name": "iftrue",
     "type": "boolean",
     "default": "true"
    },
    "ifserver": {
     "name": "ifserver",
     "type": "boolean",
     "default": "false"
    },
    "list": {
     "name": "list",
     "type": "List",
     "default": "x"
    },
    "descriptor": {
     "name": "descriptor",
     "type": "String",
     "default": "aura:text"
    },
    "value": {
     "name": "value",
     "type": "String",
     "default": "hi"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
     }
    ],
    "componentTest:hasBody": [
     {
      "aura:id": "topbody"
     },
     {
      "aura:id": "headerbody"
     },
     {
      "aura:id": "nestestbody"
     },
     {
      "aura:id": "nestedbody"
     },
     {
      "aura:id": "truebody"
     },
     {
      "aura:id": "falsebody"
     }
    ],
    "componentTest:hasModel": [
     {
      "aura:id": "topmodel"
     },
     {
      "aura:id": "headermodel"
     },
     {
      "aura:id": "innermodel"
     },
     {
      "aura:id": "innermodel2"
     },
     {
      "aura:id": "nestingmodel"
     },
     {
      "aura:id": "nestedmodel"
     },
     {
      "aura:id": "nestestmodel"
     },
     {
      "aura:id": "truemodel"
     },
     {
      "aura:id": "falsemodel"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerComponents"
     },
     {
      "attribute": "innerComponents"
     },
     {
      "attribute": "else"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.iftrue}"
     },
     {
      "isTrue": "{!v.ifserver}"
     },
     {
      "isTrue": "{!v.ifserver}"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!v.list}",
      "var": "x",
      "indexVar": "idx"
     }
    ],
    "componentTest:appendComponent": [
     {
      "aura:id": "iterinst",
      "descriptor": "{!v.descriptor}",
      "value": "{!v.value}"
     }
    ],
    "ui:outputUrl": [
     {
      "aura:id": "defaultlink",
      "label": "default layout",
      "value": "#default"
     },
     {
      "aura:id": "actionlink",
      "label": "action layout",
      "value": "#action"
     }
    ]
   }
  },
  "accessAttributes.cmp": {
   "attributes": {
    "output": {
     "name": "output",
     "type": "String"
    },
    "Private": {
     "name": "Private",
     "type": "String",
     "access": "PRIVATE",
     "description": "private",
     "default": "PRIVATE"
    },
    "Public": {
     "name": "Public",
     "type": "String",
     "access": "PUBLIC",
     "description": "public",
     "default": "PUBLIC"
    },
    "Internal": {
     "name": "Internal",
     "type": "String",
     "access": "INTERNAL",
     "description": "internal",
     "default": "INTERNAL"
    },
    "Global": {
     "name": "Global",
     "type": "String",
     "access": "GLOBAL",
     "description": "global",
     "default": "GLOBAL"
    }
   },
   "imports": {},
   "events": {
    "globalEvent": {
     "name": "globalEvent",
     "type": "auratest:accessGlobalEvent"
    },
    "publicEvent": {
     "name": "publicEvent",
     "type": "auratest:accessPublicEvent"
    },
    "internalEvent": {
     "name": "internalEvent",
     "type": "auratest:accessInternalEvent"
    },
    "privateEvent": {
     "name": "privateEvent",
     "type": "auratest:accessPrivateEvent"
    }
   },
   "handlers": {},
   "methods": {
    "globalMethod": {},
    "publicMethod": {},
    "internalMethod": {},
    "privateMethod": {}
   },
   "dependencies": {}
  },
  "accessExtendsPublic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "value": "componentTest:accessExtendsPublic"
     }
    ]
   }
  },
  "accessGlobalProvidesGlobal.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "auratest:accessGlobalComponent",
      "type": "COMPONENT"
     }
    ],
    "provider:clientProvider": [
     {
      "value": "{componentDef:'markup://auratest:accessGlobalComponent'}"
     }
    ]
   }
  },
  "accessGlobalProvidesInternal.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "auratest:accessInternalComponent",
      "type": "COMPONENT"
     }
    ],
    "provider:clientProvider": [
     {
      "value": "{componentDef:'markup://auratest:accessInternalComponent'}"
     }
    ]
   }
  },
  "accessGlobalProvidesPublic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "auratest:accessPublicComponent",
      "type": "COMPONENT"
     }
    ],
    "provider:clientProvider": [
     {
      "value": "{componentDef:'markup://auratest:accessPublicComponent'}"
     }
    ]
   }
  },
  "accessUnprivilegedNamespace.cmp": {
   "attributes": {
    "cmpToCreate": {
     "name": "cmpToCreate",
     "type": "String"
    },
    "completed": {
     "name": "completed",
     "type": "Boolean",
     "default": "false"
    },
    "attrName": {
     "name": "attrName",
     "type": "String",
     "default": "attr"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "auratest:accessGlobalComponent"
     },
     {
      "resource": "auratest:accessPublicComponent"
     }
    ],
    "ui:button": [
     {
      "label": "Get attribute",
      "press": "{!c.getAttribute}",
      "class": "getAttribute"
     },
     {
      "label": "testComponentAccess",
      "press": "{!c.testComponentAccess}",
      "class": "testComponentAccess"
     }
    ]
   }
  },
  "appendComponent.cmp": {
   "attributes": {
    "descriptor": {
     "name": "descriptor",
     "type": "String",
     "default": "aura:text"
    },
    "value": {
     "name": "value",
     "type": "String",
     "default": "hi"
    },
    "output": {
     "name": "output",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "value": "{!v.descriptor}",
      "label": "descriptor: ",
      "size": "50"
     },
     {
      "value": "{!v.value}",
      "label": "value: ",
      "size": "50"
     }
    ],
    "ui:button": [
     {
      "aura:id": "trigger",
      "label": "append",
      "press": "{!c.appendComponent}"
     }
    ]
   }
  },
  "associateElement.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "builderContainer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "builderInjected.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "builderStaticContainer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "componentTest:builderInjected": [
     {}
    ]
   }
  },
  "clientComponent.cmp": {
   "attributes": {
    "outputValue": {
     "name": "outputValue",
     "type": "String",
     "default": "initial"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "cmpWithDestroyHandler.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "destroy": {
     "name": "destroy",
     "value": "{!this}",
     "action": "{!c.doDestroy}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "cmpWithDestroyHandlerWrapper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "destroy": {
     "name": "destroy",
     "value": "{!this}",
     "action": "{!c.doDestroy}"
    }
   },
   "methods": {},
   "dependencies": {
    "componentTest:cmpWithDestroyHandler": [
     {
      "aura:id": "cmpWithDestroyHandler"
     }
    ]
   }
  },
  "componentApi.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "componentApiPlain.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "componentBodyWithChanges.cmp": {
   "attributes": {
    "colors": {
     "name": "colors",
     "type": "List",
     "default": "purple,blue,green,yellow,orange,red"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:outputText",
      "type": "COMPONENT"
     }
    ],
    "ui:button": [
     {
      "aura:id": "buttonAddBefore",
      "label": "Add before",
      "press": "{!c.addBefore}"
     },
     {
      "aura:id": "buttonAddInside",
      "label": "Add inside",
      "press": "{!c.addInside}"
     },
     {
      "aura:id": "buttonAddAfter",
      "label": "Add after",
      "press": "{!c.addAfter}"
     }
    ]
   }
  },
  "createComponent.cmp": {
   "attributes": {
    "handledEvent": {
     "name": "handledEvent",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "destroy.cmp": {
   "attributes": {
    "cmpDestroyed": {
     "name": "cmpDestroyed",
     "type": "Boolean",
     "default": "false"
    },
    "childCmpDestroyed": {
     "name": "childCmpDestroyed",
     "type": "Boolean",
     "default": "false"
    },
    "cmpAttribute": {
     "name": "cmpAttribute",
     "type": "Aura.Component"
    },
    "cmpArrayAttribute": {
     "name": "cmpArrayAttribute",
     "type": "Aura.Component[]"
    },
    "objWithDestroy": {
     "name": "objWithDestroy",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "componentTest:hasBody": [
     {
      "aura:id": "outerFacet"
     }
    ],
    "aura:text": [
     {
      "aura:id": "textInOuterFacet",
      "value": "Outer Facet"
     },
     {
      "aura:id": "textInInnerFacet",
      "value": "Inner Facet"
     }
    ],
    "componentTest:stubComponent": [
     {
      "aura:id": "innerFacet1"
     },
     {
      "aura:id": "innerFacet2"
     }
    ],
    "componentTest:informFacetOfParent": [
     {
      "aura:id": "informFacet"
     }
    ],
    "componentTest:knowParent": [
     {
      "aura:id": "knowParent"
     }
    ],
    "componentTest:cmpWithDestroyHandlerWrapper": [
     {
      "aura:id": "cmpWithDestroyHandlerWrapper"
     }
    ]
   }
  },
  "findUsingInstanceOf.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "componentTest:stubComponent": [
     {
      "aura:id": "anyCmpAsStub"
     }
    ],
    "ui:button": [
     {
      "label": "Parrot",
      "aura:id": "parrot"
     },
     {
      "label": "Peacock",
      "aura:id": "peacock"
     }
    ],
    "aura:text": [
     {
      "value": "Parakeet",
      "aura:id": "parrot"
     }
    ]
   }
  },
  "findWithDefRefs.cmp": {
   "attributes": {
    "singleElement": {
     "name": "singleElement",
     "type": "Aura.ComponentDefRef[]"
    },
    "dupElement": {
     "name": "dupElement",
     "type": "Aura.ComponentDefRef[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Tiger",
      "aura:id": "tiger"
     },
     {
      "label": "Lion",
      "aura:id": "lion"
     },
     {
      "label": "Lioness",
      "aura:id": "lion"
     },
     {
      "label": "Parrot",
      "aura:id": "parrot"
     },
     {
      "label": "Peacock",
      "aura:id": "peacock"
     }
    ],
    "aura:text": [
     {
      "value": "Cub",
      "aura:id": "lion"
     },
     {
      "value": "Parakeet",
      "aura:id": "parrot"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!true}",
      "aura:id": "singleElement",
      "body": "{!v.singleElement}"
     },
     {
      "isTrue": "{!true}",
      "aura:id": "dupElement",
      "body": "{!v.dupElement}"
     }
    ]
   }
  },
  "hasBody.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "hasModel.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    },
    "headerComponents": {
     "name": "headerComponents",
     "type": "Aura.Component[]"
    },
    "innerComponents": {
     "name": "innerComponents",
     "type": "Aura.Component[]"
    },
    "footerComponents": {
     "name": "footerComponents",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "componentTest:hasBody": [
     {
      "aura:id": "footerbody"
     }
    ]
   }
  },
  "helper.cmp": {
   "attributes": {
    "message": {
     "type": "String",
     "name": "message"
    },
    "callsHelperMethodInRender": {
     "type": "Boolean",
     "name": "callsHelperMethodInRender",
     "default": "false"
    },
    "callsHelperMethodInAfterRender": {
     "type": "Boolean",
     "name": "callsHelperMethodInAfterRender",
     "default": "false"
    },
    "callsHelperMethodInRerender": {
     "type": "Boolean",
     "name": "callsHelperMethodInRerender",
     "default": "false"
    },
    "callsHelperMethodInUnrender": {
     "type": "Boolean",
     "name": "callsHelperMethodInUnrender",
     "default": "false"
    },
    "newMessage": {
     "name": "newMessage",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "updateWithMessageFromHelper": {
     "newMessage": {
      "name": "newMessage",
      "type": "String"
     }
    }
   },
   "dependencies": {
    "componentTest:helperContainedCmp": [
     {
      "aura:id": "containedCmp"
     }
    ]
   }
  },
  "helperContainedCmp.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "helperExplicit.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "helperInheritedOnly.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "helperSuper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "helperSuperSuper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "informFacetOfParent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "knowParent.cmp": {
   "attributes": {
    "parent": {
     "name": "parent",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "renderNestedComponents.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "componentTest:hasBody": [
     {
      "aura:id": "outer"
     },
     {
      "aura:id": "inner"
     }
    ],
    "ui:outputText": [
     {
      "value": "Hello!"
     }
    ],
    "ui:button": [
     {
      "aura:id": "outer Spanish",
      "label": "Hola",
      "press": "{!c.press}"
     },
     {
      "aura:id": "outer French",
      "label": "Bonjour",
      "press": "{!c.press}"
     },
     {
      "aura:id": "inner Spanish",
      "label": "Hola",
      "press": "{!c.press}"
     },
     {
      "aura:id": "inner French",
      "label": "Bonjour",
      "press": "{!c.press}"
     }
    ]
   }
  },
  "require.cmp": {
   "attributes": {
    "version": {
     "type": "String",
     "name": "version",
     "default": "default"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "updateVersion": {}
   },
   "dependencies": {}
  },
  "simpleExtends.cmp": {
   "attributes": {
    "title": {
     "name": "title",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:expression": [
     {
      "aura:id": "title",
      "value": "{!v.title}"
     }
    ]
   }
  },
  "stubComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "toJSON.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "usesBody.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "componentTest:hasBody": [
     {
      "aura:id": "outer"
     },
     {
      "aura:id": "inner"
     }
    ]
   }
  },
  "versionInServer.cmp": {
   "attributes": {
    "newComponent": {
     "type": "Aura.Component",
     "name": "newComponent"
    },
    "actionDone": {
     "type": "Boolean",
     "name": "actionDone",
     "default": "false"
    },
    "version": {
     "type": "String",
     "name": "version"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:requireWithServerAction": [
     {
      "aura:id": "auratest_requireWithServerAction"
     }
    ],
    "auratest:requireConsumer": [
     {
      "aura:id": "auratest_requireConsumer"
     }
    ],
    "test:cmpWithServerAction": [
     {
      "aura:id": "test_cmpWithServerAction"
     }
    ],
    "aura:require": [
     {
      "namespace": "auratest",
      "version": "2.0"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "secure": "true",
      "debugLoggingEnabled": "true",
      "defaultExpiration": "60",
      "defaultAutoRefreshInterval": "60"
     }
    ]
   }
  },
  "versioning.cmp": {
   "attributes": {
    "version": {
     "type": "String",
     "name": "version"
    },
    "actionDone": {
     "type": "Boolean",
     "name": "actionDone",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auratest:require": [
     {
      "aura:id": "auratestCmp"
     }
    ],
    "componentTest:require": [
     {
      "aura:id": "sameNamespaceCmp"
     }
    ],
    "test:require": [
     {
      "aura:id": "noVersionRequiredCmp"
     }
    ],
    "auratest:requireConsumer": [
     {
      "aura:id": "requireConsumerInAuraTest"
     }
    ],
    "test:requireConsumer": [
     {
      "aura:id": "requireConsumerInTest"
     }
    ],
    "aura:require": [
     {
      "namespace": "auratest",
      "version": "2.0"
     }
    ]
   }
  }
 },
 "flavorTest": {
  "async_override.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ]
   }
  },
  "overrides_changeDefault.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "flavorTest:overrides_x_onlyImplicitDefault": [
     {
      "aura:id": "implicit"
     }
    ],
    "flavorTest:overrides_x_onlyFlavorA": [
     {
      "aura:id": "onlyA"
     }
    ],
    "flavorTest:overrides_x_onlyFlavorB": [
     {
      "aura:id": "onlyB"
     }
    ],
    "flavorTest:overrides_x_onlyFlavorC": [
     {
      "aura:id": "onlyC"
     }
    ],
    "flavorTest:overrides_x_all": [
     {
      "aura:id": "all"
     }
    ]
   }
  },
  "overrides_changeDefaultToMultiple.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "flavorTest:x_sample": [
     {
      "aura:id": "usingDefault"
     },
     {
      "aura:id": "usingExplicit",
      "aura:flavor": "base"
     }
    ]
   }
  },
  "overrides_changeDefaultToNew.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "flavorTest:overrides_x_all": [
     {
      "aura:id": "target"
     }
    ]
   }
  },
  "overrides_replaceViaUse.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "flavorTest:overrides_x_onlyImplicitDefault": [
     {
      "aura:id": "target"
     }
    ]
   }
  },
  "removal_all.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "flavorTest:x_sampleWithDefault": [
     {
      "aura:id": "c1"
     }
    ],
    "flavorTest:overrides_x_onlyImplicitDefault": [
     {
      "aura:id": "c2"
     }
    ]
   }
  },
  "removal_allFromNs.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "flavorTest:x_sampleWithDefault": [
     {
      "aura:id": "c1"
     }
    ],
    "flavorTest:overrides_x_onlyImplicitDefault": [
     {
      "aura:id": "c2"
     }
    ]
   }
  },
  "removal_singleCmp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "flavorTest:x_sampleWithDefault": [
     {
      "aura:id": "c1"
     }
    ],
    "flavorTest:overrides_x_onlyImplicitDefault": [
     {
      "aura:id": "c2"
     }
    ]
   }
  },
  "async.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "async_x_wrapper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "async_x_wrapper_child.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "basic_ifBlock.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!true}"
     },
     {
      "isTrue": "{!false}"
     },
     {
      "isTrue": "{!true}"
     },
     {
      "isTrue": "{!false}"
     }
    ],
    "flavorTest:x_sample": [
     {
      "aura:id": "trueBlockFlavoredInstance",
      "aura:flavor": "flavorA"
     },
     {
      "aura:id": "elseBlockFlavoredInstance",
      "aura:flavor": "flavorA"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ],
    "flavorTest:x_sampleWithDefault": [
     {
      "aura:id": "trueBlockFlavoredDefault"
     },
     {
      "aura:id": "elseBlockFlavoredDefault"
     }
    ]
   }
  },
  "basic_iterationBlock.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "1,2,3",
      "var": "item"
     }
    ],
    "flavorTest:x_sample": [
     {
      "aura:id": "target",
      "aura:flavor": "flavorA"
     }
    ]
   }
  },
  "basic_multipleExplicitFlavors.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "flavorTest:x_sample": [
     {
      "aura:id": "target",
      "aura:flavor": "flavorA, flavorB"
     }
    ]
   }
  },
  "basic_nested.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "flavorTest:x_sample": [
     {
      "aura:id": "outer",
      "aura:flavor": "flavorA"
     },
     {
      "aura:id": "superInnerParentCmp",
      "aura:flavor": "flavorC"
     }
    ],
    "flavorTest:x_sampleNested": [
     {
      "aura:id": "inner",
      "aura:flavor": "flavorB"
     },
     {
      "aura:id": "superInner",
      "aura:flavor": "flavorA"
     }
    ]
   }
  },
  "basic_usesDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "bug_flavorMisappliedToInner.cmp": {
   "attributes": {
    "count": {
     "name": "count",
     "type": "String",
     "default": "0",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_changeParentFromExplicitDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_changeParentFromImplicitDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_multiple.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_noChangeToParentDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_setForBothLevels.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_setParentDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_x_extensibleExplicitDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_x_extensibleImplicitDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "default_x_extensibleNoDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_changeFlavorDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_changeFlavorDefaultMulti.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "flavorTest:dynamically_flavorable_x_childChangeFlavor": [
     {
      "aura:id": "target"
     }
    ]
   }
  },
  "dynamically_flavorable_childFlavorableInner.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_childFlavorableOuter.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_multi.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_rerender.cmp": {
   "attributes": {
    "count": {
     "name": "count",
     "type": "String",
     "required": "true",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_setFlavorOnInstance.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "flavorTest:dynamically_flavorable_x_child": [
     {
      "aura:id": "target",
      "aura:flavor": "default, alt"
     }
    ]
   }
  },
  "dynamically_flavorable_textOnly.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_x_child.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_x_childChangeFlavor.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamically_flavorable_x_parent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "expressions.cmp": {
   "attributes": {
    "flav": {
     "name": "flav",
     "type": "String",
     "default": "flavorB"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "flavorTest:x_sample": [
     {
      "aura:id": "target",
      "aura:flavor": "{!v.flav}"
     }
    ]
   }
  },
  "inheritance.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "flavorTest:inheritance_x_extensibleWrapper_bareChild": [
     {
      "aura:id": "bareChild",
      "aura:flavor": "flavorA"
     }
    ],
    "flavorTest:inheritance_x_extensibleWrapper_markupChild": [
     {
      "aura:id": "markupChild",
      "aura:flavor": "flavorA"
     }
    ],
    "flavorTest:inheritance_x_extensibleBare_child": [
     {
      "aura:id": "bareParent",
      "aura:flavor": "flavorA"
     }
    ],
    "flavorTest:inheritance_x_extensibleWrapper_child": [
     {
      "aura:id": "both",
      "aura:flavor": "flavorA"
     }
    ],
    "flavorTest:inheritance_x_extensibleWrapper_textChild": [
     {
      "aura:id": "textChild",
      "aura:flavor": "flavorA"
     }
    ],
    "flavorTest:inheritance_x_extensibleMarkupWrapper_flatChild": [
     {
      "aura:id": "flatChild",
      "aura:flavor": "flavorB"
     }
    ],
    "flavorTest:inheritance_x_extensibleMarkupWrapper_outerChild": [
     {
      "aura:id": "outerChild",
      "aura:flavor": "flavorB"
     }
    ],
    "flavorTest:inheritance_x_extensibleMarkupWrapper_innerChild": [
     {
      "aura:id": "innerChild",
      "aura:flavor": "flavorB"
     }
    ],
    "flavorTest:inheritance_x_extensibleMarkupWrapper_peersChild": [
     {
      "aura:id": "peersChild",
      "aura:flavor": "flavorB"
     }
    ]
   }
  },
  "inheritance_x_extensibleBare.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleBare_child.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleMarkupWrapper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleMarkupWrapper_flatChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleMarkupWrapper_innerChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleMarkupWrapper_outerChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleMarkupWrapper_peersChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleWrapper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleWrapper_bareChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleWrapper_child.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleWrapper_markupChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inheritance_x_extensibleWrapper_textChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "overrides_x_all.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "overrides_x_onlyFlavorA.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "overrides_x_onlyFlavorB.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "overrides_x_onlyFlavorC.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "overrides_x_onlyImplicitDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "sample_extends.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "x_landmark.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "x_sample.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "x_sampleNested.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "x_sampleWithDefault.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "handleEventTest": {
  "fireFromServer.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "handleEventTest:cyclicEvent",
     "action": "{!c.causeInfiniteEvenLoop}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "render": "client",
      "controller": "java://org.auraframework.components.test.java.controller.TestControllerToAttachEvents"
     }
    ],
    "ui:button": [
     {
      "label": "Run action to attach single event at server",
      "press": "{!c.attachOneEvent}"
     },
     {
      "label": "Run action to attach multiple events at server",
      "press": "{!c.attachMultipleEvents}"
     },
     {
      "label": "Run action to attach duplicate events at server",
      "press": "{!c.attachDupEvent}"
     },
     {
      "label": "Run action to simulate event chain.",
      "press": "{!c.attachEventChain}"
     },
     {
      "label": "You spin my head right round (Click me and I will keep spinning)",
      "press": "{!c.infiniteEventCycle}"
     }
    ]
   }
  },
  "handleLocationChangeEvent.app": {
   "attributes": {
    "clickCount": {
     "name": "clickCount",
     "type": "Integer",
     "default": "0"
    },
    "locationChangeCount": {
     "name": "locationChangeCount",
     "type": "Integer",
     "default": "0"
    },
    "order": {
     "name": "order",
     "type": "String",
     "default": ""
    },
    "results": {
     "name": "results",
     "type": "String[]",
     "default": ""
    },
    "hideLocationChangeTimes": {
     "name": "hideLocationChangeTimes",
     "type": "Integer",
     "default": "2"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "auratest:locationChange",
     "action": "{!c.locationChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "locationChangeEvent": "auratest:locationChange"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.results}",
      "var": "item"
     }
    ],
    "ui:outputURL": [
     {
      "value": "{!'#' + v.locationChangeCount}",
      "label": "Add one",
      "aura:id": "hashLink",
      "click": "{!c.click}"
     }
    ]
   }
  },
  "aHandlesEventFromA.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "evt": {
     "type": "handleEventTest:event",
     "name": "evt"
    }
   },
   "handlers": {
    "evt": {
     "name": "evt",
     "action": "{!c.handleIt}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "attachEventsInModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "bHandlesEventFromA.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "evtB": {
     "type": "handleEventTest:event",
     "name": "evtB"
    }
   },
   "handlers": {
    "evt": {
     "name": "evt",
     "action": "{!c.handleTheEvent}"
    },
    "evtB": {
     "name": "evtB",
     "action": "{!c.handleTheEventB}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "cHandlesEventFromAandB.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "evt": {
     "name": "evt",
     "action": "{!c.cHandleTheEventB}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "eventScope.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "handleEventTest:applicationEvent",
     "action": "{!c.handleA}"
    }
   },
   "methods": {},
   "dependencies": {
    "handleEventTest:handlesABAppEvents": [
     {
      "aura:id": "Martin",
      "A": "{!c.handleB}"
     },
     {
      "aura:id": "Charlie",
      "A": "{!c.handleB}"
     },
     {
      "aura:id": "Bob",
      "A": "{!c.handleB}"
     },
     {
      "aura:id": "Max",
      "A": "{!c.handleB}"
     },
     {
      "aura:id": "Brooke",
      "A": "{!c.handleB}"
     }
    ]
   }
  },
  "handlerWithEventForComponentEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "handleEventTest:Event",
     "action": "{!c.handleIt}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "handlerWithInvalidEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "ThisIsNotAValidEventName",
     "action": "{!c.handleIt}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "handlerWithNameAndEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "somename": {
     "name": "somename",
     "type": "handleEventTest:event"
    }
   },
   "handlers": {
    "somename": {
     "name": "somename",
     "event": "handleEventTest:applicationEvent",
     "action": "{!c.handleIt}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "handlerWithNameForApplicationEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "anApplicationEvent": {
     "name": "anApplicationEvent",
     "type": "handleEventTest:applicationEvent"
    }
   },
   "handlers": {
    "anApplicationEvent": {
     "name": "anApplicationEvent",
     "action": "{!c.handleIt}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "handlerWithNameForParentsApplicationEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "anApplicationEvent": {
     "name": "anApplicationEvent",
     "action": "{!c.handleIt}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "handlerWithUnregisteredName.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "ThisIsNotARegisteredEventName": {
     "name": "ThisIsNotARegisteredEventName",
     "action": "{!c.handleIt}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "handlerWithoutNameOrEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "action": "{!c.handleIt}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "handlesABAppEvents.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "A": {
     "name": "A",
     "type": "handleEventTest:event"
    },
    "B": {
     "name": "B",
     "type": "handleEventTest:event"
    }
   },
   "handlers": {
    "A": {
     "name": "A",
     "action": "{!c.handleA}"
    },
    "B": {
     "name": "B",
     "action": "{!c.handleB}"
    },
    "undefined": {
     "event": "handleEventTest:applicationEvent",
     "action": "{!c.handleC}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "multipleHandlersForEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "A": {
     "name": "A",
     "type": "handleEventTest:event"
    }
   },
   "handlers": {
    "A": {
     "name": "A",
     "action": "{!c.handleB}"
    },
    "undefined": {
     "event": "handleEventTest:applicationEvent",
     "action": "{!c.handleC}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "registersApplicationEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "anApplicationEvent": {
     "name": "anApplicationEvent",
     "type": "handleEventTest:applicationEvent"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "performance": {
  "runner.app": {
   "attributes": {},
   "imports": {
    "performance:perfLib": {
     "library": "performance:perfLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "undefined": {
     "event": "aura:locationChange",
     "action": "{!c.locationChange}"
    },
    "finish": {
     "name": "finish",
     "event": "performance:testFinish",
     "action": "{!c.finish}"
    }
   },
   "methods": {
    "run": {},
    "setup": {}
   },
   "dependencies": {
    "aura:application": [
     {}
    ]
   }
  },
  "perfTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "runnerTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ],
    "auraStorage:init": [
     {
      "name": "actions",
      "maxSize": "4096",
      "clearStorageOnInit": "false",
      "defaultAutoRefreshInterval": "3600",
      "defaultExpiration": "3600",
      "debugLoggingEnabled": "true",
      "secure": "false",
      "persistent": "true"
     }
    ]
   }
  }
 },
 "performanceTest": {
  "runnerExampleApp.app": {
   "attributes": {},
   "imports": {
    "performance:perfLib": {
     "library": "performance:perfLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "global",
      "implements": "performance:test"
     }
    ],
    "ui:image": [
     {
      "aura:id": "image",
      "src": "/auraFW/resources/aura/auralogo.png",
      "alt": "logo"
     }
    ]
   }
  },
  "child.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String",
     "default": "childDefaultName"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "grandparent.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String",
     "default": "grandparentDefaultName"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "performanceTest:parent": [
     {}
    ]
   }
  },
  "parent.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String",
     "default": "parentDefaultName"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "performanceTest:child": [
     {
      "aura:id": "c"
     }
    ]
   }
  },
  "runnerExample.cmp": {
   "attributes": {
    "loaded": {
     "name": "loaded",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:image": [
     {
      "aura:id": "image",
      "src": "/auraFW/resources/aura/auralogo.png",
      "alt": "logo"
     }
    ]
   }
  },
  "runnerExample2.cmp": {
   "attributes": {
    "loaded": {
     "name": "loaded",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "storageEvictionTest.cmp": {
   "attributes": {
    "loaded": {
     "name": "loaded",
     "type": "Boolean"
    },
    "load": {
     "name": "load",
     "type": "String",
     "default": "ui:tabset"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tabSetTest.cmp": {
   "attributes": {
    "testDynamicTabLoading": {
     "name": "testDynamicTabLoading",
     "type": "Boolean",
     "default": "false"
    },
    "_lazyRenderTabs": {
     "name": "_lazyRenderTabs",
     "type": "Boolean",
     "default": "false"
    },
    "_useOverflowMenu": {
     "name": "_useOverflowMenu",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tabset": [
     {
      "aura:id": "myTabset",
      "lazyRenderTabs": "true"
     }
    ],
    "aura:set": [
     {
      "attribute": "lazyRenderTabs",
      "value": "{!v._lazyRenderTabs}"
     },
     {
      "attribute": "useOverflowMenu",
      "value": "{!v._useOverflowMenu}"
     },
     {
      "attribute": "overFlowLabel",
      "value": "Overflow"
     }
    ],
    "ui:tab": [
     {
      "title": "Tab 0"
     },
     {
      "title": "Tab 1"
     },
     {
      "title": "Tab 2"
     },
     {
      "title": "Tab 3"
     },
     {
      "title": "Tab 4"
     },
     {
      "title": "Tab 5"
     },
     {
      "title": "Tab 6"
     },
     {
      "title": "Tab 7"
     }
    ]
   }
  },
  "tabSetTestLoadTabsDynamic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tabset": [
     {
      "aura:id": "myTabSet"
     }
    ]
   }
  },
  "tabSetTestOverflowMenu.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tabset": [
     {
      "aura:id": "myTabset",
      "useOverflowMenu": "true",
      "overFlowLabel": "Overflow"
     }
    ],
    "ui:tab": [
     {
      "title": "Tab 0"
     },
     {
      "title": "Tab 1"
     },
     {
      "title": "Tab 2"
     },
     {
      "title": "Tab 3"
     },
     {
      "title": "Tab 4"
     },
     {
      "title": "Tab 5"
     },
     {
      "title": "Tab 6"
     },
     {
      "title": "Tab 7"
     }
    ]
   }
  },
  "tabSetTestStatic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tabset": [
     {}
    ],
    "ui:tab": [
     {
      "title": "Tab 0"
     },
     {
      "title": "Tab 1"
     },
     {
      "title": "Tab 2"
     },
     {
      "title": "Tab 3"
     },
     {
      "title": "Tab 4"
     },
     {
      "title": "Tab 5"
     },
     {
      "title": "Tab 6"
     },
     {
      "title": "Tab 7"
     }
    ]
   }
  },
  "uiMenuTest.cmp": {
   "attributes": {
    "testManyItems": {
     "name": "testManyItems",
     "type": "Boolean",
     "default": "false"
    },
    "testVisible": {
     "name": "testVisible",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:menu": [
     {}
    ],
    "ui:menuTriggerLink": [
     {
      "aura:id": "trigger",
      "label": "Opportunity Status"
     }
    ],
    "ui:menuList": [
     {
      "class": "actionMenu",
      "aura:id": "actionMenu",
      "manualPosition": "{!v.testManyItems}"
     }
    ],
    "aura:set": [
     {
      "attribute": "visible",
      "value": "{!v.testVisible}"
     }
    ],
    "ui:actionMenuItem": [
     {
      "aura:id": "item1",
      "label": "A1"
     },
     {
      "aura:id": "item2",
      "label": "A2",
      "disabled": "true"
     },
     {
      "aura:id": "item3",
      "label": "A3"
     },
     {
      "aura:id": "item4",
      "label": "A4"
     }
    ],
    "ui:menuItemSeparator": [
     {},
     {}
    ],
    "ui:checkboxMenuItem": [
     {
      "aura:id": "item5",
      "label": "C1"
     },
     {
      "aura:id": "item6",
      "label": "C2"
     },
     {
      "aura:id": "item7",
      "label": "C3"
     },
     {
      "aura:id": "item8",
      "label": "C4"
     }
    ],
    "ui:radioMenuItem": [
     {
      "aura:id": "item9",
      "label": "R1"
     },
     {
      "aura:id": "item10",
      "label": "R2"
     },
     {
      "aura:id": "item11",
      "label": "R3"
     },
     {
      "aura:id": "item12",
      "label": "R4"
     }
    ]
   }
  },
  "virtualDataGridTestAppendRows.cmp": {
   "attributes": {
    "data": {
     "name": "data",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:virtualDataGrid": [
     {
      "aura:id": "myGrid",
      "items": "{!v.data}"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     }
    ],
    "ui:dataGridColumn": [
     {
      "label": "First Name",
      "name": "firstName"
     },
     {
      "label": "Last Name",
      "name": "lastName"
     },
     {
      "label": "ID",
      "name": "_id"
     },
     {
      "label": "Active",
      "name": "isActive"
     },
     {
      "label": "Balance",
      "name": "balance"
     },
     {
      "label": "Age",
      "name": "age"
     },
     {
      "label": "Address",
      "name": "address"
     }
    ]
   }
  },
  "virtualDataGridTestNoProvider.cmp": {
   "attributes": {
    "data": {
     "name": "data",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:virtualDataGrid": [
     {
      "aura:id": "myData",
      "items": "{!v.data}"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     }
    ],
    "ui:dataGridColumn": [
     {
      "label": "placeholder column",
      "name": "placeholder"
     }
    ]
   }
  },
  "virtualDataGridTestReloadData.cmp": {
   "attributes": {
    "data": {
     "name": "data",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:virtualDataGrid": [
     {
      "aura:id": "myData",
      "items": "{!m.data}"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     }
    ],
    "ui:dataGridColumn": [
     {
      "label": "First Name",
      "name": "firstName"
     },
     {
      "label": "Last Name",
      "name": "lastName"
     },
     {
      "label": "ID",
      "name": "_id"
     },
     {
      "label": "Active",
      "name": "isActive"
     },
     {
      "label": "Balance",
      "name": "balance"
     },
     {
      "label": "Age",
      "name": "isActive"
     },
     {
      "label": "Address",
      "name": "address"
     }
    ]
   }
  },
  "virtualDataGridTestSwapColumns.cmp": {
   "attributes": {
    "data": {
     "name": "data",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:virtualDataGrid": [
     {
      "aura:id": "myGrid",
      "items": "{!m.data}"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     }
    ],
    "ui:dataGridColumn": [
     {
      "label": "First Name",
      "name": "firstName"
     },
     {
      "label": "Last Name",
      "name": "lastName"
     },
     {
      "label": "ID",
      "name": "_id"
     },
     {
      "label": "Active",
      "name": "isActive"
     },
     {
      "label": "Balance",
      "name": "balance"
     },
     {
      "label": "Age",
      "name": "age"
     },
     {
      "label": "Address",
      "name": "address"
     }
    ]
   }
  },
  "virtualDataGridTestWithProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:virtualDataGrid": [
     {
      "aura:id": "grid",
      "fixedHeader": "true",
      "useRowHeaders": "true"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataModel"
     }
    ],
    "ui:dataGridColumn": [
     {
      "name": "id",
      "label": "Id"
     },
     {
      "name": "subject",
      "label": "Subject"
     },
     {
      "name": "who.name",
      "label": "Name"
     },
     {
      "name": "what.name",
      "label": "Related To"
     },
     {
      "name": "activityDate",
      "label": "Due Date"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!item.id}"
     },
     {
      "value": "{!item.subject}"
     },
     {
      "value": "{!item.who.name}"
     },
     {
      "value": "{!item.what.name}"
     },
     {
      "value": "{!item.activityDate}"
     }
    ],
    "uiExamples:dataGridKitchenSinkDataProvider": [
     {
      "aura:id": "data",
      "totalItems": "400",
      "pageSize": "400"
     }
    ]
   }
  }
 },
 "preloadTest": {
  "dependenciesApp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "unauthenticated",
      "render": "client"
     }
    ],
    "ui:button": [
     {
      "label": "UI Button"
     }
    ],
    "preloadTest:test_SpecialCharacter": [
     {}
    ],
    "test:test_button": [
     {
      "label": "test button"
     }
    ],
    "auratest:test_button": [
     {
      "label": "auratest button"
     }
    ]
   }
  },
  "test_Preload_Cmp_SameNameSpace.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "auratest:test_button": [
     {
      "class": "displayText",
      "label": "Sitting pretty tight"
     }
    ]
   }
  },
  "test_SimpleApplication.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "preloadTest:test_SpecialCharacter": [
     {}
    ]
   }
  },
  "test_SpecialCharacter.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_dynamicNamespace.cmp": {
   "attributes": {
    "whatToDo": {
     "name": "whatToDo",
     "type": "String",
     "default": "mockRecordLayout"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "provider": {
  "newComponent.app": {
   "attributes": {
    "newDescriptor": {
     "name": "newDescriptor",
     "type": "String",
     "default": "markup://provider:clientProvider"
    },
    "newAttributes": {
     "name": "newAttributes",
     "type": "String",
     "default": "{value:\"{componentDef:'markup://aura:text',attributes:{value:'breadwinner'}}\"}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "render": "client"
     }
    ],
    "aura:dependency": [
     {
      "resource": "provider:*"
     },
     {
      "resource": "ui:outputText"
     },
     {
      "resource": "markup://attributesTest:simpleValue"
     }
    ],
    "ui:inputText": [
     {
      "value": "{!v.newDescriptor}",
      "size": "128"
     },
     {
      "value": "{!v.newAttributes}",
      "size": "128"
     }
    ],
    "ui:button": [
     {
      "aura:id": "create",
      "press": "{!c.createComponent}",
      "label": "create component"
     }
    ]
   }
  },
  "beanProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "clientProvider.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "access": "GLOBAL"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "cmpWithModel.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "providerA.cmp": {
   "attributes": {
    "attA": {
     "name": "attA",
     "type": "Boolean",
     "default": "false"
    },
    "type": {
     "name": "type",
     "type": "String",
     "default": "A"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "providerB.cmp": {
   "attributes": {
    "attB": {
     "name": "attB",
     "type": "Boolean",
     "default": "true"
    },
    "new1": {
     "name": "new1",
     "type": "String",
     "default": "1"
    },
    "new2": {
     "name": "new2",
     "type": "String",
     "default": "2"
    },
    "new3": {
     "name": "new3",
     "type": "String",
     "default": "3"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "providerBase.cmp": {
   "attributes": {
    "type": {
     "name": "type",
     "default": "b",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "providerC.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "provider:providerA": [
     {}
    ],
    "provider:providerBase": [
     {}
    ],
    "provider:providerB": [
     {}
    ]
   }
  },
  "stubWithClientProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "provider:cmpWithModel",
      "type": "COMPONENT"
     },
     {
      "resource": "provider:providerA",
      "type": "COMPONENT"
     },
     {
      "resource": "provider:providerB",
      "type": "COMPONENT"
     }
    ],
    "provider:clientProvider": [
     {
      "value": "{componentDef:'markup://aura:text',attributes:{value:'resolver'}}",
      "aura:id": "provider1"
     },
     {
      "value": "{componentDef:'markup://provider:providerA'}",
      "aura:id": "provider3"
     },
     {
      "value": "{componentDef:'markup://provider:providerB'}",
      "aura:id": "provider4"
     }
    ]
   }
  }
 },
 "styleServiceTest": {
  "applyTokensTest.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "styleServiceTest:colors": [
     {
      "aura:id": "colors"
     }
    ]
   }
  },
  "crossReferenceTest.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "tokenOverrides": "styleServiceTest:crossReferenceBase"
     }
    ]
   }
  },
  "debug.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "styleServiceTest:colors": [
     {}
    ]
   }
  },
  "asyncLoaded.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "colors.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "test": {
  "basicCspTest.app": {
   "attributes": {
    "testIframe": {
     "name": "testIframe",
     "type": "Boolean",
     "default": "false"
    },
    "testScriptSource": {
     "name": "testScriptSource",
     "type": "Boolean",
     "default": "false"
    },
    "testStyleSource": {
     "name": "testStyleSource",
     "type": "Boolean",
     "default": "false"
    },
    "testMediaSource": {
     "name": "testMediaSource",
     "type": "Boolean",
     "default": "false"
    },
    "testConnectionSource": {
     "name": "testConnectionSource",
     "type": "Boolean",
     "default": "false"
    },
    "xmlHttpRequestComplete": {
     "name": "xmlHttpRequestComplete",
     "type": "Boolean",
     "default": "false"
    },
    "xmlHttpRequestDebug": {
     "name": "xmlHttpRequestDebug",
     "type": "String",
     "default": "Start; "
    },
    "testObjectSource": {
     "name": "testObjectSource",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "aura:if": [
     {
      "isTrue": "{!v.testIframe}"
     },
     {
      "isTrue": "{!v.testScriptSource}"
     },
     {
      "isTrue": "{!v.testStyleSource}"
     },
     {
      "isTrue": "{!v.testMediaSource}"
     },
     {
      "isTrue": "{!v.testConnectionSource}"
     }
    ],
    "test:basicCspCmpExtendsTemplate": [
     {}
    ],
    "ui:button": [
     {
      "aura:id": "uiButton_sendXHR",
      "press": "{!c.post}",
      "label": "Send XHR",
      "class": "button"
     }
    ]
   }
  },
  "customLoadingTextTemplateApp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "template": "test:customLoadingTextTemplate",
      "render": "client"
     }
    ],
    "ui:outputText": [
     {
      "value": "In customLoadingTextTemplate.app"
     }
    ]
   }
  },
  "defaultLoadingTemplateApp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "template": "test:defaultLoadingTemplate",
      "render": "client"
     }
    ],
    "ui:outputText": [
     {
      "value": "In defaultLoadingTemplateApp.app"
     }
    ]
   }
  },
  "fakeApplication.app": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "unauthenticated"
     }
    ]
   }
  },
  "fakeTokensApp.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "unauthenticated",
      "tokenOverrides": "test:fakeTheme"
     }
    ]
   }
  },
  "laxSecurity.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "unauthenticated",
      "render": "client"
     }
    ]
   }
  },
  "runner.app": {
   "attributes": {
    "scope": {
     "name": "scope",
     "type": "String"
    },
    "keyword": {
     "name": "keyword",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "aura:if": [
     {
      "isTrue": "{!v.scope == 'perf'}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ],
    "test:runnerContainer": [
     {
      "aura:id": "container",
      "scope": "{!v.scope}",
      "keyword": "{!v.keyword}",
      "aura:load": "lazy"
     }
    ]
   }
  },
  "styleTest.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "template": "test:styleTestTemplate"
     }
    ],
    "ui:message": [
     {}
    ],
    "ui:block": [
     {
      "class": "color"
     }
    ]
   }
  },
  "testJSRendererApp.app": {
   "attributes": {
    "label": {
     "type": "String",
     "default": "testJSRenderer",
     "name": "label"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ]
   }
  },
  "testJSRendererUsingHelperApp.app": {
   "attributes": {
    "label": {
     "type": "String",
     "default": "testJSRendererUsingJSHelper",
     "name": "label"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ]
   }
  },
  "test_CompoundCntrlrApp.app": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String",
     "default": "Button"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "controller": "java://org.auraframework.components.test.java.controller.TestController",
      "render": "client"
     }
    ],
    "test:test_button": [
     {
      "label": "{!v.label}",
      "press": "{!c.handleClick}",
      "class": "test_locator"
     }
    ]
   }
  },
  "test_LocChng_CompositeComponent.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "test:test_LocChng_Event2",
     "action": "{!c.clicked}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "locationChangeEvent": "test:test_LocChng_Event2"
     }
    ],
    "test:test_button": [
     {
      "label": "click me (Button on Composite Component)",
      "class": "CompositeComponent",
      "press": "{!c.clientAction}",
      "aura:id": "compositeButton"
     }
    ]
   }
  },
  "test_LocChng_Navigation.app": {
   "attributes": {
    "locationChangeIndicator": {
     "name": "locationChangeIndicator",
     "type": "String",
     "default": "start"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "test:test_LocChng_Event",
     "action": "{!c.locationChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "locationChangeEvent": "test:test_LocChng_Event"
     }
    ],
    "ui:button": [
     {
      "label": "click me",
      "class": "SimpleComponent",
      "press": "{!c.clientAction}"
     },
     {
      "label": "Back",
      "class": "Back",
      "press": "{!c.back}"
     },
     {
      "label": "Next",
      "class": "Next",
      "press": "{!c.next}"
     }
    ],
    "ui:outputText": [
     {
      "value": "display",
      "class": "id",
      "aura:id": "display"
     },
     {
      "value": "{! 'Location change indicator:' + v.locationChangeIndicator}",
      "class": "{!v.locationChangeIndicator}"
     }
    ]
   }
  },
  "test_LocChng_NoExtends.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "locationChangeEvent": "test:test_LocChng_NoExtendsEvt"
     }
    ]
   }
  },
  "test_LocChng_NoHandler.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "locationChangeEvent": "test:test_LocChng_Event"
     }
    ],
    "test:test_button": [
     {
      "label": "click me",
      "press": "{!c.clientAction}",
      "class": "identifier"
     }
    ]
   }
  },
  "test_LocChng_SimpleComponent.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "aura:locationChange",
     "action": "{!c.locationChangeGeneric}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "locationChangeEvent": "test:test_LocChng_Event"
     }
    ],
    "test:test_button": [
     {
      "label": "click me (Button on Simple Component)",
      "class": "SimpleComponent",
      "press": "{!c.clientAction}",
      "aura:id": "button"
     }
    ]
   }
  },
  "test_Preload_CustomNameSpaces.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "preload": "test"
     }
    ]
   }
  },
  "UIPerfActionMarksTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Fire Background Action",
      "press": "{!c.backgroundAction}",
      "class": "backgroundButton"
     },
     {
      "label": "Fire Foreground Action",
      "press": "{!c.foregroundAction}",
      "class": "foregroundButton"
     },
     {
      "label": "Fire Multiple Foreground Action",
      "press": "{!c.multipleForegroundActions}",
      "class": "multiForegroundButton"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputValue",
      "class": "outputText",
      "value": ""
     }
    ]
   }
  },
  "ballot.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "test:vote",
     "action": "{!c.vote}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "basicCspCmpExtendsTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "basicCspTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "extraScriptTags"
     },
     {
      "attribute": "title",
      "value": "CSP Test"
     }
    ]
   }
  },
  "child1.cmp": {
   "attributes": {
    "attr": {
     "name": "attr",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:child2": [
     {}
    ]
   }
  },
  "child2.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "cmpWithServerAction.cmp": {
   "attributes": {
    "actionDone": {
     "type": "Boolean",
     "name": "actionDone",
     "default": "false"
    },
    "isTextFromCache": {
     "type": "Boolean",
     "name": "isTextFromCache",
     "default": "false"
    },
    "text": {
     "type": "String",
     "name": "text"
    },
    "setStorableAction": {
     "name": "setStorableAction",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "updateTextWithStringFromServerController": {
     "setStorableAction": {
      "name": "setStorableAction",
      "type": "Boolean",
      "default": "true"
     }
    },
    "updateTextWithCallingDescriptor": {}
   },
   "dependencies": {}
  },
  "componentDefRefArrayAttribute.cmp": {
   "attributes": {
    "cdrs": {
     "name": "cdrs",
     "type": "Aura.ComponentDefRef[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "hi"
     }
    ]
   }
  },
  "customLoadingTextTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "loadingText",
      "value": "Set From Test"
     },
     {
      "attribute": "auraPreInitBlock"
     }
    ]
   }
  },
  "defaultLoadingTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ]
   }
  },
  "extendsChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:child1": [
     {
      "attr": "an attribute value"
     }
    ]
   }
  },
  "extendsParent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:child1": [
     {
      "attr": "an attribute value"
     }
    ]
   }
  },
  "facetAttribute.cmp": {
   "attributes": {
    "atf": {
     "name": "atf",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "facetAttributePassthrough.cmp": {
   "attributes": {
    "tf": {
     "name": "tf",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:facetAttribute": [
     {
      "atf": "{!v.tf}"
     }
    ]
   }
  },
  "facetAttributePassthroughParent.cmp": {
   "attributes": {
    "something": {
     "name": "something",
     "type": "string",
     "default": "default string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:facetAttributePassthrough": [
     {}
    ],
    "aura:set": [
     {
      "attribute": "tf"
     }
    ]
   }
  },
  "fakeAbstract.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fakeAbstractChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fakeAbstractParent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fakeComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fakeComponentChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fakeComponentParent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fakeDesign.cmp": {
   "attributes": {
    "something": {
     "name": "something",
     "type": "String"
    },
    "else": {
     "name": "else",
     "type": "String"
    },
    "entities": {
     "name": "entities",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fakeDesignNonExistentInterface.cmp": {
   "attributes": {
    "something": {
     "name": "something",
     "type": "String"
    },
    "else": {
     "name": "else",
     "type": "String"
    },
    "entities": {
     "name": "entities",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "fakeImpl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "flavorableFakeComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "flavorsSerializationTest1.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "flavorsSerializationTest2.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "jsModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "jsModelAndJavaModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "jsModelImplicit.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "kitchenSink.cmp": {
   "attributes": {
    "strAttribute": {
     "name": "strAttribute",
     "type": "String",
     "default": "Apple"
    },
    "valueFromJSProvider": {
     "name": "valueFromJSProvider",
     "type": "String",
     "default": "Empty"
    },
    "valueFromJavaProvider": {
     "name": "valueFromJavaProvider",
     "type": "String",
     "default": "Empty"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "clickMe",
      "press": "{!c.handleClick}"
     }
    ]
   }
  },
  "libraryTest.cmp": {
   "attributes": {},
   "imports": {
    "test:test_Library": {
     "library": "test:test_Library",
     "property": "importedAgain"
    },
    "test:test_LibraryWithExternalImports": {
     "library": "test:test_LibraryWithExternalImports",
     "property": "externallyImportedAgain"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "parent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:child1": [
     {
      "attr": "an attribute value"
     }
    ]
   }
  },
  "parentComponent.cmp": {
   "attributes": {
    "parentAttribute": {
     "name": "parentAttribute",
     "type": "String"
    }
   },
   "imports": {},
   "events": {
    "parentEvent": {
     "name": "parentEvent",
     "type": "test:parentEvent",
     "description": "The Description"
    }
   },
   "handlers": {
    "parentEvent": {
     "name": "parentEvent",
     "action": "{!c.foo}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "parser.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:parserChild": [
     {
      "at1": "at1Val"
     }
    ],
    "test:parserGrandChild": [
     {}
    ]
   }
  },
  "parserChild.cmp": {
   "attributes": {
    "at1": {
     "name": "at1",
     "type": "String",
     "<": "",
     "aura:component": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "parserFragment.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:parent": [
     {}
    ]
   }
  },
  "parserGrandChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "parserInvalid.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "require.cmp": {
   "attributes": {
    "version": {
     "type": "String",
     "name": "version",
     "default": "default"
    }
   },
   "imports": {},
   "events": {
    "versionEvt": {
     "name": "versionEvt",
     "type": "auratest:testEvent"
    }
   },
   "handlers": {},
   "methods": {
    "updateVersion": {},
    "fireEventWithVersionInServerController": {}
   },
   "dependencies": {}
  },
  "requireConsumer.cmp": {
   "attributes": {
    "consumedCmp": {
     "type": "Aura.Component",
     "name": "consumedCmp"
    },
    "versionInConsumedCmp": {
     "type": "String",
     "name": "versionInConsumedCmp",
     "default": "default"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "updateWithVersionInConsumedComponent": {}
   },
   "dependencies": {
    "aura:require": [
     {
      "namespace": "componentTest",
      "version": "1.5"
     }
    ]
   }
  },
  "runnerContainer.cmp": {
   "attributes": {
    "scope": {
     "name": "scope",
     "type": "String"
    },
    "keyword": {
     "name": "keyword",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "serverModelCaseSensitivity.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "styleNameExpressionTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "styleTestTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraInitBlock"
     }
    ]
   }
  },
  "svgIsTooLarge.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testActionCallbacks.cmp": {
   "attributes": {
    "cbComplete": {
     "name": "cbComplete",
     "type": "String",
     "default": "No"
    },
    "cbName": {
     "name": "cbName",
     "type": "String",
     "default": "SUCCESS"
    },
    "cbExpected": {
     "name": "cbExpected",
     "type": "String",
     "default": "SUCCESS"
    },
    "cbResult": {
     "name": "cbResult",
     "type": "String",
     "default": "NONE"
    },
    "cbState": {
     "name": "cbState",
     "type": "String",
     "default": "NONE"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "pass",
      "label": "Pass!",
      "press": "{!c.firePass}"
     },
     {
      "aura:id": "fail",
      "label": "Fail!",
      "press": "{!c.fireFail}"
     }
    ]
   }
  },
  "testActionEvent.cmp": {
   "attributes": {
    "eventName": {
     "name": "eventName",
     "type": "String",
     "description": "Name of event to associate with the exception in server action. GenericEventException will encapsulate this event"
    },
    "eventParamName": {
     "name": "eventParamName",
     "type": "String",
     "description": "Parameter to set on the exception"
    },
    "eventParamValue": {
     "name": "eventParamValue",
     "type": "String"
    },
    "response": {
     "name": "response",
     "type": "Aura.Action"
    },
    "data": {
     "name": "data",
     "type": "String"
    },
    "event": {
     "name": "event",
     "type": "String"
    }
   },
   "imports": {},
   "events": {
    "local": {
     "name": "local",
     "type": "test:testActionEventEvent"
    }
   },
   "handlers": {
    "local": {
     "name": "local",
     "action": "{!c.showLocalEvent}"
    },
    "undefined": {
     "event": "aura:systemError",
     "action": "{!c.showSystemErrorEvent}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "trigger",
      "label": "fire!",
      "press": "{!c.fireEvent}"
     }
    ]
   }
  },
  "testActionExceptions.cmp": {
   "attributes": {
    "throwableClass": {
     "name": "throwableClass",
     "type": "String"
    },
    "throwableCause": {
     "name": "throwableCause",
     "type": "String"
    },
    "response": {
     "name": "response",
     "type": "Aura.Action"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "trigger",
      "label": "fire!",
      "press": "{!c.getException}"
     }
    ]
   }
  },
  "testActionExpressionChaining.cmp": {
   "attributes": {
    "push": {
     "name": "push",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:testActionExpressionChainingFixture": [
     {
      "aura:id": "fixture",
      "press": "{!c.press}"
     },
     {
      "aura:id": "function",
      "press": "{!v.push?c.push:c.press}"
     }
    ]
   }
  },
  "testActionExpressionChainingFixture.cmp": {
   "attributes": {
    "press": {
     "name": "press",
     "type": "Aura.Action",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "theButton",
      "label": "Press Me",
      "press": "{!v.press}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.press != null}"
     }
    ]
   }
  },
  "testActionRef.cmp": {
   "attributes": {
    "pants": {
     "name": "pants",
     "type": "integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:testActionRefChild": [
     {
      "aura:id": "sandputter",
      "put": "{!c.sand}"
     }
    ]
   }
  },
  "testActionRefChild.cmp": {
   "attributes": {
    "put": {
     "name": "put",
     "type": "Aura.Action"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "press": "{!v.put}",
      "aura:id": "button",
      "label": "put sand in pants"
     }
    ]
   }
  },
  "testActionRefContainer.cmp": {
   "attributes": {
    "myActionRef": {
     "name": "myActionRef",
     "type": "Aura.Action"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:testActionRef": [
     {
      "aura:id": "actionref"
     }
    ],
    "ui:button": [
     {
      "aura:id": "getButton",
      "press": "{!c.getSand}",
      "label": "getSand"
     },
     {
      "aura:id": "runButton",
      "press": "{!c.runSand}",
      "label": "runSand"
     }
    ]
   }
  },
  "testAfterRender.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:testAfterRenderFixture": [
     {
      "aura:id": "simple"
     },
     {
      "aura:id": "containedInHTML"
     },
     {
      "aura:id": "containedInNestedHTML"
     },
     {
      "aura:id": "containedInComponent"
     },
     {
      "aura:id": "containedInNestedComponent"
     },
     {
      "aura:id": "kitchenSinkA"
     },
     {
      "aura:id": "kitchenSinkB"
     }
    ],
    "test:testAfterRenderFixtureExtended": [
     {
      "aura:id": "extended"
     },
     {
      "aura:id": "extendedContainedInHTML"
     },
     {
      "aura:id": "extendedContainedInNestedHTML"
     },
     {
      "aura:id": "extendedContainedInComponent"
     },
     {
      "aura:id": "extendedContainedInNestedComponent"
     },
     {
      "aura:id": "extendedKitchenSinkA"
     },
     {
      "aura:id": "extendedKitchenSinkB"
     }
    ],
    "ui:message": [
     {},
     {},
     {},
     {},
     {}
    ]
   }
  },
  "testAfterRenderFixture.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testAfterRenderFixtureExtended.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testAuraTypes.cmp": {
   "attributes": {
    "intName": {
     "name": "intName",
     "type": "Integer",
     "default": "12"
    },
    "longName": {
     "name": "longName",
     "type": "Long",
     "default": "1212312412142"
    },
    "doubleName": {
     "name": "doubleName",
     "type": "Double",
     "default": "12.30"
    },
    "decimalName": {
     "name": "decimalName",
     "type": "Decimal",
     "default": "2.5"
    },
    "boolName": {
     "name": "boolName",
     "type": "Boolean",
     "default": "true"
    },
    "stringName": {
     "name": "stringName",
     "type": "String",
     "default": "stringValue"
    },
    "objectName": {
     "name": "objectName",
     "type": "Object",
     "default": "true"
    },
    "mapName": {
     "name": "mapName",
     "type": "Map",
     "default": "{}"
    },
    "listName": {
     "name": "listName",
     "type": "List",
     "default": "bald"
    },
    "setName": {
     "name": "setName",
     "type": "Set",
     "default": "indifferent"
    },
    "componentArrayName": {
     "name": "componentArrayName",
     "type": "Aura.Component[]"
    },
    "componentName": {
     "name": "componentName",
     "type": "Aura.Component"
    },
    "componentDefRefArrayName": {
     "name": "componentDefRefArrayName",
     "type": "Aura.ComponentDefRef[]"
    },
    "actionName": {
     "name": "actionName",
     "type": "Aura.Action"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testCmpNoJSHelper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testEvalScope.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testEventBubbling.cmp": {
   "attributes": {
    "iterationIds": {
     "name": "iterationIds",
     "type": "List",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "event": "test:testEventBubblingEvent",
     "action": "{!c.handle}"
    },
    "init": {
     "name": "init",
     "action": "{!c.handleInit}",
     "value": "{!this}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://test:testEventBubbling*",
      "type": "COMPONENT"
     }
    ],
    "aura:set": [
     {
      "attribute": "logId",
      "value": "Root"
     }
    ],
    "auraTest:logPanel": [
     {
      "aura:id": "logPanel"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.iterationIds}",
      "var": "i"
     },
     {
      "items": "{!v.iterationIds}",
      "var": "i1"
     },
     {
      "items": "{!v.iterationIds}",
      "var": "i2"
     }
    ],
    "test:testEventBubblingHandlerContainer": [
     {
      "aura:id": "container",
      "logId": "{!'Container' + i}"
     }
    ],
    "test:testEventBubblingHandlerGrandchild": [
     {
      "aura:id": "inner",
      "logId": "{!'Inner' + i}"
     }
    ],
    "test:testEventBubblingEmitter": [
     {
      "aura:id": "emitter",
      "logId": "Event"
     },
     {
      "aura:id": "emitterInIteration",
      "logId": "Passthrough"
     }
    ],
    "test:testEventBubblingEmitterExtended": [
     {
      "aura:id": "emitterExtended",
      "logId": "Extended"
     }
    ],
    "test:testEventBubblingEmitterOther": [
     {
      "aura:id": "emitterOther",
      "logId": "Other"
     }
    ],
    "test:testEventBubblingHandler": [
     {
      "aura:id": "provided",
      "logId": "Provided",
      "provideByHandler": "test:testEventBubblingHandlerChild"
     },
     {
      "aura:id": "noSuperHandlers",
      "logId": "NoSuperHandlers",
      "provideByHandler": "test:testEventBubblingHandlerGrandchildWithoutHandlers"
     }
    ]
   }
  },
  "testEventBubblingEmitter.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "type": "test:testEventBubblingEvent"
    }
   },
   "handlers": {},
   "methods": {
    "fireEvent": {}
   },
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "button",
      "press": "{!c.fireEvent}",
      "label": "{!v.logId}"
     }
    ]
   }
  },
  "testEventBubblingEmitterExtended.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "type": "test:testEventBubblingEventExtended"
    }
   },
   "handlers": {},
   "methods": {
    "fireEvent": {}
   },
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "button",
      "press": "{!c.fireEvent}",
      "label": "Extended"
     }
    ]
   }
  },
  "testEventBubblingEmitterOther.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "type": "test:testEventBubblingEventOther"
    }
   },
   "handlers": {},
   "methods": {
    "fireEvent": {}
   },
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "button",
      "press": "{!c.fireEvent}",
      "label": "Other"
     }
    ]
   }
  },
  "testEventBubblingHandler.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "event": "test:testEventBubblingEvent",
     "action": "{!c.handle}"
    }
   },
   "methods": {},
   "dependencies": {
    "test:testEventBubblingEmitter": [
     {
      "aura:id": "emitter",
      "logId": "Event"
     }
    ],
    "test:testEventBubblingEmitterExtended": [
     {
      "aura:id": "emitterExtended",
      "logId": "Extended"
     }
    ],
    "test:testEventBubblingEmitterOther": [
     {
      "aura:id": "emitterOther",
      "logId": "Other"
     }
    ]
   }
  },
  "testEventBubblingHandlerChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "event": "test:testEventBubblingEvent",
     "action": "{!c.handleChild}"
    }
   },
   "methods": {},
   "dependencies": {
    "test:testEventBubblingEmitter": [
     {
      "aura:id": "emitter",
      "logId": "Event"
     }
    ],
    "test:testEventBubblingEmitterExtended": [
     {
      "aura:id": "emitterExtended",
      "logId": "Extended"
     }
    ],
    "test:testEventBubblingEmitterOther": [
     {
      "aura:id": "emitterOther",
      "logId": "Other"
     }
    ]
   }
  },
  "testEventBubblingHandlerChildWithoutHandlers.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testEventBubblingHandlerContainer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "event": "test:testEventBubblingEvent",
     "action": "{!c.handleContainer}"
    }
   },
   "methods": {},
   "dependencies": {
    "test:testEventBubblingHandlerGrandchild": [
     {
      "aura:id": "content",
      "logId": "{! v.logId + 'Content'}"
     }
    ]
   }
  },
  "testEventBubblingHandlerGrandchild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "event": "test:testEventBubblingEvent",
     "action": "{!c.handleGrandchild}"
    }
   },
   "methods": {},
   "dependencies": {
    "test:testEventBubblingEmitter": [
     {
      "aura:id": "emitter",
      "logId": "Event"
     }
    ],
    "test:testEventBubblingEmitterExtended": [
     {
      "aura:id": "emitterExtended",
      "logId": "Extended"
     }
    ],
    "test:testEventBubblingEmitterOther": [
     {
      "aura:id": "emitterOther",
      "logId": "Other"
     }
    ]
   }
  },
  "testEventBubblingHandlerGrandchildWithoutHandlers.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:testEventBubblingEmitter": [
     {
      "aura:id": "emitter",
      "logId": "Event"
     }
    ],
    "test:testEventBubblingEmitterExtended": [
     {
      "aura:id": "emitterExtended",
      "logId": "Extended"
     }
    ],
    "test:testEventBubblingEmitterOther": [
     {
      "aura:id": "emitterOther",
      "logId": "Other"
     }
    ]
   }
  },
  "testEventBubblingSuper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "bubblingEvent": {
     "name": "bubblingEvent",
     "event": "test:testEventBubblingEvent",
     "action": "{!c.handleSuper}"
    }
   },
   "methods": {},
   "dependencies": {
    "test:testEventBubblingEmitter": [
     {
      "aura:id": "emitter",
      "logId": "Super"
     }
    ]
   }
  },
  "testInValidCSS.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testJSTestSuite.cmp": {
   "attributes": {
    "num": {
     "name": "num",
     "type": "Integer",
     "default": "2"
    },
    "alpha": {
     "name": "alpha",
     "type": "String",
     "default": "Z"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testJSTestSuiteWithoutAttributes.cmp": {
   "attributes": {
    "num": {
     "name": "num",
     "type": "Integer",
     "default": "2"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testJavaProviderSettingAttributeValues.cmp": {
   "attributes": {
    "a1": {
     "name": "a1",
     "type": "String"
    },
    "a3": {
     "name": "a3",
     "type": "String"
    },
    "a2": {
     "name": "a2",
     "type": "String"
    },
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testJavaProviderSettingAttributeValuesHelper.cmp": {
   "attributes": {
    "a1": {
     "name": "a1",
     "type": "String"
    },
    "a2": {
     "name": "a2",
     "type": "String"
    },
    "ar1": {
     "name": "ar1",
     "type": "String[]"
    },
    "b1": {
     "name": "b1",
     "type": "String"
    },
    "b2": {
     "name": "b2",
     "type": "String"
    },
    "value": {
     "name": "value",
     "type": "String",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testJavaProviderSettingAttributeValuesViaComponentConfig.cmp": {
   "attributes": {
    "a1": {
     "name": "a1",
     "type": "String"
    },
    "a2": {
     "name": "a2",
     "type": "String"
    },
    "a3": {
     "name": "a3",
     "type": "String"
    },
    "value": {
     "name": "value",
     "type": "String",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testJavaProviderSettingAttributeValuesViaComponentConfigHelper.cmp": {
   "attributes": {
    "ar1": {
     "name": "ar1",
     "type": "String[]"
    },
    "b1": {
     "name": "b1",
     "type": "String"
    },
    "b2": {
     "name": "b2",
     "type": "String"
    },
    "facet": {
     "name": "facet",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testMultipleBodyFacetChild1.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "body"
     }
    ]
   }
  },
  "testMultipleBodyFacetParent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testNoJSControllers.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testNullExpressionAddition.cmp": {
   "attributes": {
    "dontset": {
     "name": "dontset",
     "type": "string"
    },
    "dontset2": {
     "name": "dontset2",
     "type": "string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testRenderIf.cmp": {
   "attributes": {
    "thang": {
     "name": "thang",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderif": [
     {
      "isTrue": "{!v.thang}"
     },
     {
      "isTrue": "{! !v.thang}"
     },
     {
      "isTrue": "{!false}"
     },
     {
      "isTrue": "{!true}"
     }
    ]
   }
  },
  "testRenderIfElse.cmp": {
   "attributes": {
    "thang": {
     "name": "thang",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderif": [
     {
      "isTrue": "{!v.thang}"
     },
     {
      "isTrue": "{! !v.thang}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ]
   }
  },
  "testRenderIfElseLiteral.cmp": {
   "attributes": {
    "thang": {
     "name": "thang",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderif": [
     {
      "isTrue": "{!v.thang}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else",
      "value": "Blah"
     }
    ]
   }
  },
  "testRenderIfEmptyBody.cmp": {
   "attributes": {
    "thang": {
     "name": "thang",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderif": [
     {
      "isTrue": "{!v.thang}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "testRenderIfUninitializedBody.cmp": {
   "attributes": {
    "thang": {
     "name": "thang",
     "type": "Boolean"
    },
    "uninitializedBody": {
     "name": "uninitializedBody",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderif": [
     {
      "isTrue": "{!v.thang}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "testSingleBodyFacetChild1.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "body"
     }
    ]
   }
  },
  "testSingleBodyFacetChild2.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "body"
     }
    ]
   }
  },
  "testSingleBodyFacetChild3.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "attr",
      "value": "text3"
     }
    ]
   }
  },
  "testSingleBodyFacetParent.cmp": {
   "attributes": {
    "attr": {
     "name": "attr",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testStyleNamespaceInvalidConditions.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testStyleNamespaceToken.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testStyleNamespaceTokenInvalidCSS.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testStyleNamespaceTokenValidCSS.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testStyleNamespaceTrueConditions.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testStyleSelectorCaseSensitivity.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testStyleValidChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testStyleValidParent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:testStyleValidChild": [
     {}
    ]
   }
  },
  "testTemplateCss.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testTwoCSSFiles.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testValidCSS.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testVirtualList.cmp": {
   "attributes": {
    "template": {
     "name": "template",
     "type": "Aura.ComponentDefRef[]",
     "description": "template"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:testVirtualListTemplate": [
     {},
     {
      "id": "{!item._id}",
      "index": "{!item.index}",
      "name": "{!item.name}",
      "balance": "{!item.balance}",
      "friends": "{!item.friends}"
     }
    ],
    "ui:virtualList": [
     {
      "aura:id": "list",
      "itemVar": "item"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "test:testVirtualListDataProvider": [
     {}
    ]
   }
  },
  "testVirtualListDataProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "testVirtualListTemplate.cmp": {
   "attributes": {
    "id": {
     "name": "id",
     "type": "String"
    },
    "index": {
     "name": "index",
     "type": "String"
    },
    "name": {
     "name": "name",
     "type": "String"
    },
    "balance": {
     "name": "balance",
     "type": "String"
    },
    "friends": {
     "name": "friends",
     "type": "Object"
    },
    "counter": {
     "name": "counter",
     "default": "0",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "friends",
      "items": "{!v.friends}",
      "var": "i"
     }
    ],
    "ui:button": [
     {
      "class": "showItemInfo",
      "label": "Show yourself!",
      "press": "{!c.like}"
     }
    ],
    "ui:outputText": [
     {
      "class": "outputItemInfo",
      "aura:id": "outputItemInfo",
      "value": ""
     }
    ],
    "test:testVirtualListTemplateChild": [
     {
      "name": "{!v.name}"
     }
    ]
   }
  },
  "testVirtualListTemplateChild.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "class": "changeNameButton",
      "label": "Change Name",
      "press": "{!c.nameChange}"
     }
    ],
    "ui:label": [
     {
      "label": "{!v.name}"
     }
    ],
    "ui:outputText": [
     {
      "class": "expectedNameChange",
      "aura:id": "outputName",
      "value": ""
     }
    ]
   }
  },
  "test_CompoundCntrlr.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String",
     "default": "Button"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_button": [
     {
      "label": "{!v.label}",
      "press": "{!c.handleClick}",
      "class": "test_locator"
     }
    ]
   }
  },
  "test_Events_BiggerComponentForEvent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "testBiggerPress": {
     "name": "testBiggerPress",
     "type": "test:test_Events_Event2"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_Events_ComponentForEvent": [
     {
      "label": "Smaller Component",
      "testPress": "{!c.changeLabel}",
      "testMouseOver": "{!c.changeLabel}"
     }
    ]
   }
  },
  "test_Events_ClientActions.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_Events_ComponentForEvent": [
     {
      "label": "#Event Generation#. Click or Mouse Over to Trigger an event",
      "aura:id": "withActions",
      "classIdentifier": "WithActions",
      "testPress": "{!c.changeLabel}",
      "testMouseOver": "{!c.changeLabel}"
     },
     {
      "label": "#No Events Generated#. Click or Mouse Over to Trigger an event but no Client Action",
      "aura:id": "noActions",
      "classIdentifier": "WithoutActions"
     }
    ]
   }
  },
  "test_Events_ComponentForEvent.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String"
    },
    "classIdentifier": {
     "name": "classIdentifier",
     "type": "String"
    }
   },
   "imports": {},
   "events": {
    "testPress": {
     "name": "testPress",
     "type": "test:test_Events_Event"
    },
    "testMouseOver": {
     "name": "testMouseOver",
     "type": "test:test_Events_ParentEvent"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Events_Properties.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_Events_ComponentForEvent": [
     {
      "aura:id": "innerComp",
      "label": "#Click#",
      "classIdentifier": "identifier",
      "testPress": "{!c.changeLabel}",
      "testMouseOver": "{!c.changeLabel2}"
     }
    ]
   }
  },
  "test_IfToggle.cmp": {
   "attributes": {
    "check": {
     "name": "check",
     "type": "Boolean",
     "default": "{!false}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.check}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "button",
      "label": "Toggle",
      "press": "{!c.toggleCheck}"
     }
    ]
   }
  },
  "test_Import.cmp": {
   "attributes": {},
   "imports": {
    "test:test_Library": {
     "library": "test:test_Library",
     "property": "testModule"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_ImportNoLibrary.cmp": {
   "attributes": {},
   "imports": {
    "undefined": {
     "property": "testLibrary"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_ImportNoProperty.cmp": {
   "attributes": {},
   "imports": {
    "test:test_Library": {
     "library": "test:test_Library"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_JSProvider_AbstractBasic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_JSProvider_Impl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_JavaRndr_Abstract.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_JavaRndr_Component.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_JavaRndr_Abstract": [
     {}
    ]
   }
  },
  "test_JavaRndr_Impl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_JavaRndr_Override.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_NoProvider_NonAbstract_Component.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_NonExistingJavaRenderer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Parser_Comments.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:parserChild": [
     {
      "at1": "at1Val"
     }
    ],
    "test:parserGrandChild": [
     {}
    ]
   }
  },
  "test_Preload_BadCmp.cmp": {
   "attributes": {
    "dup": {
     "type": "String",
     "name": "dup"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_Abstract1.cmp": {
   "attributes": {
    "implNumber": {
     "name": "implNumber",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_Abstract2.cmp": {
   "attributes": {
    "implNumber": {
     "name": "implNumber",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_Abstract3.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_Abstract4.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_AbstractBasic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_AbstractBasicExtends.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_AbstractCyclic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_AbstractNoExtends.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_Component.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_Provider_Interface": [
     {
      "implNumber": "3"
     }
    ]
   }
  },
  "test_Provider_Concrete.cmp": {
   "attributes": {
    "whatToDo": {
     "name": "whatToDo",
     "type": "String",
     "default": ""
    },
    "name": {
     "name": "name",
     "type": "String",
     "default": "nothing!"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_Concrete_Sub.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_InterfaceChainComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_InterfaceCyclicComponentA.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_Provider_InterfaceCyclicB": [
     {
      "cycle": "B"
     }
    ]
   }
  },
  "test_Provider_InterfaceCyclicComponentB.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_Provider_InterfaceCyclicA": [
     {
      "cycle": "A"
     }
    ]
   }
  },
  "test_Provider_NoExtends.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_NoImpl.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_NonAbstract.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_ThrowsQFE.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_providerImpl1.cmp": {
   "attributes": {
    "ComponentSpecificAttr": {
     "name": "ComponentSpecificAttr",
     "type": "String",
     "default": "iammine"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_providerImpl3.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_providerImpl4.cmp": {
   "attributes": {
    "implNumber": {
     "name": "implNumber",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_Provider_providerImplOverrideAttr.cmp": {
   "attributes": {
    "implNumber": {
     "name": "implNumber",
     "type": "String",
     "default": "leaveMeAsIs"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_ServerRenderable.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_ServerRendererOnly.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_ServerRenderingNegative.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_button": [
     {
      "label": "testForcingServerRenderingOfInteractiveComponents",
      "class": "button"
     }
    ]
   }
  },
  "test_SimpleJavaRenderer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test_button.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String"
    },
    "class": {
     "name": "class",
     "type": "String"
    }
   },
   "imports": {},
   "events": {
    "press": {
     "name": "press",
     "type": "test:test_press"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "text.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:parent": [
     {},
     {}
    ]
   }
  }
 },
 "tokenSanityTest": {
  "usingOverride.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "tokenOverrides": "tokenSanityTest:customTokens"
     }
    ],
    "tokenSanityTest:header": [
     {}
    ],
    "tokenSanityTest:header2": [
     {}
    ]
   }
  },
  "header.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "header2.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tokenVariable.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "tokenSanityTest:header": [
     {}
    ]
   }
  }
 },
 "uitest": {
  "containerManagerTest.app": {
   "attributes": {
    "useContainer": {
     "name": "useContainer",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {
    "ui:stackManagerLib": {
     "library": "ui:stackManagerLib",
     "property": "smLib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "aura:dependency": [
     {
      "resource": "markup://uiExamples:modalContent",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://uiExamples:panelHeader",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://uiExamples:panelFooter",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://ui:spinner",
      "type": "COMPONENT"
     }
    ],
    "ui:button": [
     {
      "label": "Create panel",
      "aura:id": "create",
      "press": "{!c.createPanel}"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm",
      "useSharedContainer": "{!v.useContainer}"
     }
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ],
    "ui:containerManager": [
     {
      "aura:id": "cm"
     }
    ]
   }
  },
  "localization_Test.app": {
   "attributes": {
    "submitCount": {
     "name": "submitCount",
     "type": "integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "unauthenticated",
      "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
      "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outSubmitCount",
      "value": "0"
     }
    ],
    "ui:inputDate": [
     {
      "aura:id": "inDate",
      "value": "{!m.dateOnly}"
     }
    ],
    "ui:button": [
     {
      "buttonTitle": "Date",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "DateTime",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Number",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Percent",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Currency",
      "label": "submit",
      "press": "{!c.submit}"
     }
    ],
    "ui:outputDate": [
     {
      "aura:id": "outDate",
      "value": "{!m.dateOnly}"
     }
    ],
    "ui:inputDateTime": [
     {
      "aura:id": "inDateTime",
      "value": "{!m.dateTimeISOString}",
      "timezone": "GMT"
     }
    ],
    "ui:outputDateTime": [
     {
      "aura:id": "outDateTime",
      "value": "{!m.dateTimeISOString}",
      "timezone": "GMT"
     }
    ],
    "ui:inputNumber": [
     {
      "aura:id": "inNumber",
      "value": "{!m.integer}"
     }
    ],
    "ui:outputNumber": [
     {
      "aura:id": "outNumber",
      "value": "{!m.integer}"
     }
    ],
    "ui:inputPercent": [
     {
      "aura:id": "inPercent",
      "value": "{!m.percent}"
     }
    ],
    "ui:outputPercent": [
     {
      "aura:id": "outPercent",
      "value": "{!m.percent}"
     }
    ],
    "ui:inputCurrency": [
     {
      "aura:id": "inCurrency",
      "value": "{!m.currency}"
     }
    ],
    "ui:outputCurrency": [
     {
      "aura:id": "outCurrency",
      "value": "{!m.currency}"
     }
    ]
   }
  },
  "menu_AttachToBodyTest.app": {
   "attributes": {
    "expandEventFired": {
     "name": "expandEventFired",
     "type": "boolean",
     "default": "false"
    },
    "collapseEventFired": {
     "name": "collapseEventFired",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.ui.MenuTestModel"
     }
    ],
    "ui:menu": [
     {
      "aura:id": "uiMenu",
      "class": "clubMenu"
     },
     {
      "aura:id": "uiMenuAttachToBody",
      "class": "uiMenuAttachToBody"
     }
    ],
    "ui:menuTriggerLink": [
     {
      "class": "trigger",
      "aura:id": "trigger",
      "label": "Please pick your favorite soccer club"
     },
     {
      "class": "triggerAttachToBody",
      "aura:id": "triggerAttachToBody",
      "label": "Please pick your favorite soccer club"
     }
    ],
    "ui:menuList": [
     {
      "class": "actionMenu",
      "aura:id": "actionMenu",
      "attachToBody": "true"
     },
     {
      "class": "actionMenuAttachToBody",
      "aura:id": "actionMenuAttachToBody",
      "attachToBody": "true"
     }
    ],
    "ui:actionMenuItem": [
     {
      "class": "actionItem1",
      "aura:id": "actionItem1",
      "label": "Bayern München",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItem2",
      "aura:id": "actionItem2",
      "label": "FC Barcelona",
      "click": "{!c.updateTriggerLabel}",
      "disabled": "true"
     },
     {
      "class": "actionItem3",
      "aura:id": "actionItem3",
      "label": "Inter Milan",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItem4",
      "aura:id": "actionItem4",
      "label": "Manchester United",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItemAttachToBody1",
      "aura:id": "actionItemAttachToBody1",
      "label": "Bayern München",
      "click": "{!c.updateTriggerLabelForAttachToBody}"
     },
     {
      "class": "actionItemAttachTBody2",
      "aura:id": "actionItemAttachToBody2",
      "label": "FC Barcelona",
      "click": "{!c.updateTriggerLabelForAttachToBody}",
      "disabled": "true"
     },
     {
      "class": "actionItemAttachToBody3",
      "aura:id": "actionItemAttachToBody3",
      "label": "Inter Milan",
      "click": "{!c.updateTriggerLabelForAttachToBody}"
     },
     {
      "class": "actionItemAttachToBody4",
      "aura:id": "actionItemAttachToBody4",
      "label": "Manchester United",
      "click": "{!c.updateTriggerLabelForAttachToBody}"
     }
    ],
    "ui:block": [
     {
      "aura:id": "overflowHidden"
     }
    ],
    "aura:set": [
     {
      "attribute": "right"
     }
    ]
   }
  },
  "menu_EventBubbling.app": {
   "attributes": {
    "eventBubbled": {
     "name": "eventBubbled",
     "type": "boolean"
    },
    "stopClickPropagation": {
     "name": "stopClickPropagation",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.ui.MenuTestModel"
     }
    ],
    "ui:menu": [
     {
      "aura:id": "uiMenu",
      "class": "clubMenu"
     }
    ],
    "ui:menuTriggerLink": [
     {
      "class": "trigger",
      "aura:id": "trigger",
      "label": "Please pick your favorite soccer club",
      "stopClickPropagation": "{!v.stopClickPropagation}"
     }
    ],
    "ui:menuList": [
     {
      "class": "actionMenu",
      "aura:id": "actionMenu"
     }
    ],
    "ui:actionMenuItem": [
     {
      "class": "actionItem1",
      "aura:id": "actionItem1",
      "label": "Bayern München",
      "click": "{!c.updateTriggerLabel}",
      "hideMenuAfterSelected": "{!v.hideMenuAfterSelected}"
     },
     {
      "class": "actionItem2",
      "aura:id": "actionItem2",
      "label": "FC Barcelona",
      "click": "{!c.updateTriggerLabel}",
      "disabled": "true"
     },
     {
      "class": "actionItem3",
      "aura:id": "actionItem3",
      "label": "Inter Milan",
      "click": "{!c.updateTriggerLabel}",
      "hideMenuAfterSelected": "{!v.hideMenuAfterSelected}"
     },
     {
      "class": "actionItem4",
      "aura:id": "actionItem4",
      "label": "Manchester United",
      "click": "{!c.updateTriggerLabel}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputStatus",
      "value": "Event Propogation To Parent Div did not happen"
     }
    ],
    "ui:button": [
     {
      "label": "Toggle stopClickPropagation",
      "press": "{!c.toggle}"
     }
    ]
   }
  },
  "menu_MetadataTest.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.ui.MenuTestModel"
     }
    ],
    "aura:dependency": [
     {
      "resource": "ui:*",
      "type": "COMPONENT"
     }
    ],
    "ui:menu": [
     {},
     {},
     {},
     {}
    ],
    "ui:menuTriggerLink": [
     {
      "aura:id": "metadatatrigger",
      "label": "Snow Resorts"
     },
     {
      "class": "trigger",
      "aura:id": "trigger",
      "label": "Please pick your favorite soccer club"
     },
     {
      "class": "checkboxMenuLabel",
      "aura:id": "checkboxMenuLabel",
      "label": "NFC West Teams"
     },
     {
      "aura:id": "imageTrigger",
      "class": "imageLink",
      "label": "Tiger"
     }
    ],
    "ui:menuList": [
     {
      "menuItems": "{!m.resorts}"
     },
     {
      "class": "actionMenu",
      "menuItems": "{!m.places}",
      "menuSelect": "{!c.pickPlace}"
     },
     {
      "class": "checkboxMenu",
      "aura:id": "checkboxMenu",
      "menuItems": "{!m.data}"
     },
     {
      "aura:id": "tigerMenu",
      "class": "inline",
      "menuItems": "{!m.images}",
      "menuSelect": "{!c.pickTiger}"
     }
    ],
    "ui:outputText": [
     {
      "value": "<ui:menu>"
     },
     {
      "value": "  <ui:menuTriggerLink aura:id=\"metadatatrigger\" label=\"Snow Resorts\"/>"
     },
     {
      "value": "  <ui:menuList menuItems=\"{ !m.resorts}\"/>"
     },
     {
      "value": "</ui:menu>"
     },
     {
      "value": "<ui:menu>"
     },
     {
      "value": "  <ui:menuTriggerLink aura:id=\"metadataAction\" label=\"Pick a ski place\"/>"
     },
     {
      "value": "  <ui:menuList menuItems=\"{ !m.places}\" menuSelect=\"{ !c.pickPlace}\"/>"
     },
     {
      "value": "</ui:menu>"
     },
     {
      "class": "checkboxMenuResult",
      "aura:id": "checkboxMenuResult",
      "value": "Which items get selected"
     },
     {
      "value": "<ui:menu>"
     },
     {
      "value": "  <ui:menuTriggerLink aura:id=\"metadatatrigger\" label=\"Snow Resorts\"/>"
     },
     {
      "value": "  <ui:menuList aura:id=\"myMenu\" menuItems=\"{ !m.data}\"/>"
     },
     {
      "value": "</ui:menu>"
     },
     {
      "value": "<ui:button press=\"{ !c.getMenuSelected}\" label=\"Check the selected menu items\"/>"
     },
     {
      "value": "<ui:outputText aura:id=\"result\" value=\"Which items get selected\"/>"
     }
    ],
    "ui:button": [
     {
      "class": "checkboxButton",
      "aura:id": "checkboxButton",
      "press": "{!c.getMenuSelected}",
      "label": "Check the selected menu items"
     }
    ]
   }
  },
  "menu_Test.app": {
   "attributes": {
    "expandEventFired": {
     "name": "expandEventFired",
     "type": "boolean",
     "default": "false"
    },
    "collapseEventFired": {
     "name": "collapseEventFired",
     "type": "boolean",
     "default": "false"
    },
    "hideMenuAfterSelected": {
     "name": "hideMenuAfterSelected",
     "type": "Boolean",
     "default": "true"
    },
    "menuSelectFireCount": {
     "name": "menuSelectFireCount",
     "type": "Integer",
     "default": "0"
    },
    "menuCondition": {
     "name": "menuCondition",
     "type": "Boolean",
     "default": "true"
    },
    "focus_counter": {
     "name": "focus_counter",
     "type": "Integer",
     "default": "0"
    },
    "blur_counter": {
     "name": "blur_counter",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.ui.MenuTestModel"
     }
    ],
    "ui:menu": [
     {
      "aura:id": "uiMenu",
      "class": "checkPositionMenu"
     },
     {
      "aura:id": "uiMenu",
      "class": "clubMenu"
     },
     {},
     {},
     {},
     {},
     {},
     {
      "aura:id": "uiMenu",
      "class": "clubMenu"
     },
     {},
     {
      "aura:id": "uiMenu",
      "class": "extendPositionMenu"
     },
     {
      "aura:id": "uiMenuImage",
      "class": "uiMenuImage"
     },
     {}
    ],
    "ui:menuTriggerLink": [
     {
      "class": "triggercheckPosition",
      "aura:id": "triggercheckPosition",
      "label": "Please pick your favorite soccer club"
     },
     {
      "class": "trigger",
      "aura:id": "trigger",
      "label": "Please pick your favorite soccer club"
     },
     {
      "class": "checkboxMenuLabel",
      "aura:id": "checkboxMenuLabel",
      "label": "NFC West Teams"
     },
     {
      "class": "radioMenuLabel",
      "aura:id": "radioMenuLabel",
      "label": "National League West"
     },
     {
      "aura:id": "iterationTrigger",
      "label": "iterationTrigger"
     },
     {
      "aura:id": "conditionTrigger",
      "label": "conditionTrigger"
     },
     {
      "aura:id": "conditionIterationTrigger",
      "label": "conditionIterationTrigger"
     },
     {
      "class": "triggerNested",
      "aura:id": "triggerNested",
      "label": "Please pick your favorite soccer club"
     },
     {
      "aura:id": "mytrigger",
      "label": "All teams"
     },
     {
      "class": "triggerLink",
      "aura:id": "triggerLink",
      "label": "Pick your favorite soccer club"
     },
     {
      "class": "triggerImage",
      "aura:id": "triggerImage"
     },
     {
      "class": "doubleClick",
      "aura:id": "doubleClick",
      "label": "Trigger (double-click disabled)",
      "disableDoubleClicks": "true"
     },
     {
      "aura:id": "menuLink",
      "label": "MenuTriggerLink",
      "focus": "{!c.countFocus}",
      "blur": "{!c.countBlur}"
     }
    ],
    "ui:menuList": [
     {
      "class": "checkPosition",
      "aura:id": "checkPosition",
      "menuCollapse": "{!c.menuCollapse}",
      "menuExpand": "{!c.menuExpand}",
      "menuSelect": "{!c.incrementMenuSelectFireCount}"
     },
     {
      "class": "actionMenu",
      "aura:id": "actionMenu"
     },
     {
      "aura:id": "checkboxMenu",
      "class": "checkboxMenu"
     },
     {
      "class": "radioMenu",
      "aura:id": "radioMenu"
     },
     {
      "aura:id": "iterationRadioMenu"
     },
     {
      "aura:id": "conditionRadioMenu"
     },
     {
      "aura:id": "conditionIterationMenu"
     },
     {
      "class": "actionMenuNested",
      "aura:id": "actionMenuNested"
     },
     {},
     {
      "class": "actionMenuImage",
      "aura:id": "actionMenuImage"
     },
     {
      "class": "doubleClickDisabledMenuList"
     }
    ],
    "ui:actionMenuItem": [
     {
      "class": "checkPositionItem1",
      "aura:id": "checkPositionItem1",
      "label": "Bayern München",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "checkPositionItem2",
      "aura:id": "checkPositionItem2",
      "label": "FC Barcelona",
      "click": "{!c.updateTriggerLabel}",
      "disabled": "true"
     },
     {
      "class": "checkPositionItem3",
      "aura:id": "checkPositionItem3",
      "label": "Inter Milan",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "checkPositionItem4",
      "aura:id": "checkPositionItem4",
      "label": "Manchester United",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItem1",
      "aura:id": "actionItem1",
      "label": "Bayern München",
      "click": "{!c.updateTriggerLabel}",
      "hideMenuAfterSelected": "{!v.hideMenuAfterSelected}"
     },
     {
      "class": "actionItem2",
      "aura:id": "actionItem2",
      "label": "FC Barcelona",
      "click": "{!c.updateTriggerLabel}",
      "disabled": "true"
     },
     {
      "class": "actionItem3",
      "aura:id": "actionItem3",
      "label": "Inter Milan",
      "click": "{!c.updateTriggerLabel}",
      "hideMenuAfterSelected": "{!v.hideMenuAfterSelected}"
     },
     {
      "class": "actionItem4",
      "aura:id": "actionItem4",
      "label": "Manchester United",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "label": "trueCondition",
      "value": "trueCondition"
     },
     {
      "class": "actionItem1Nested",
      "aura:id": "actionItem1Nested",
      "label": "Bayern München",
      "click": "{!c.updateTriggerLabelForNestedMenuItems}",
      "hideMenuAfterSelected": "{!v.hideMenuAfterSelected}"
     },
     {
      "class": "actionItem2Nested",
      "aura:id": "actionItem2Nested",
      "label": "FC Barcelona",
      "click": "{!c.updateTriggerLabelForNestedMenuItems}",
      "disabled": "true"
     },
     {
      "class": "actionItem3Nested",
      "aura:id": "actionItem3Nested",
      "label": "{!team}",
      "click": "{!c.updateTriggerLabelForNestedMenuItems}"
     },
     {
      "class": "actionItem4Nested",
      "aura:id": "actionItem4Nested",
      "label": "Manchester United",
      "click": "{!c.updateTriggerLabelForNestedMenuItems}",
      "hideMenuAfterSelected": "{!v.hideMenuAfterSelected}"
     },
     {
      "label": "Bayern München",
      "click": "{!c.updateLabel}"
     },
     {
      "label": "FC Barcelona",
      "click": "{!c.updateLabel}"
     },
     {
      "label": "Inter Milan",
      "click": "{!c.updateLabel}"
     },
     {
      "label": "Manchester United",
      "click": "{!c.updateLabel}"
     },
     {
      "class": "extendList1",
      "aura:id": "extendList1",
      "label": "Bayern München"
     },
     {
      "class": "extendList2",
      "aura:id": "extendList2",
      "label": "FC Barcelona",
      "disabled": "true"
     },
     {
      "class": "extendList3",
      "aura:id": "extendList3",
      "label": "Inter Milan"
     },
     {
      "class": "extendList4",
      "aura:id": "extendList4",
      "label": "Manchester United"
     },
     {
      "class": "actionItem1Image",
      "aura:id": "actionItem1Image",
      "label": "Bayern München",
      "click": "{!c.updateTriggerLabel}",
      "hideMenuAfterSelected": "{!v.hideMenuAfterSelected}"
     },
     {
      "class": "actionItem2Image",
      "aura:id": "actionItem2Image",
      "label": "FC Barcelona",
      "click": "{!c.updateTriggerLabel}",
      "disabled": "true"
     },
     {
      "class": "actionItem3Image",
      "aura:id": "actionItem3Image",
      "label": "Inter Milan",
      "click": "{!c.updateTriggerLabel}",
      "hideMenuAfterSelected": "{!v.hideMenuAfterSelected}"
     },
     {
      "class": "actionItem4Image",
      "aura:id": "actionItem4Image",
      "label": "Manchester United",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "label": "Menu item"
     }
    ],
    "ui:outputText": [
     {
      "value": "<ui:menu>"
     },
     {
      "value": "  <ui:menuTriggerLink aura:id=\"trigger\" label=\"Please pick your favorite soccer club\"/>"
     },
     {
      "value": "  <ui:menuList aura:id=\"actionMenu\">"
     },
     {
      "value": "    <ui:actionMenuItem aura:id=\"actionItem1\" label=\"Bayern München\" click=\"{ !c.updateTriggerLabel}\"/>"
     },
     {
      "value": "    <ui:actionMenuItem aura:id=\"actionItem2\" label=\"FC Barcelona\" click=\"{ !c.updateTriggerLabel}\"/>"
     },
     {
      "value": "    <ui:actionMenuItem aura:id=\"actionItem3\" label=\"Inter Milan\" click=\"{ !c.updateTriggerLabel}\"/>"
     },
     {
      "value": "    <ui:actionMenuItem aura:id=\"actionItem4\" label=\"Manchester United\" click=\"{ !c.updateTriggerLabel}\"/>"
     },
     {
      "value": "  </ui:menuList>"
     },
     {
      "value": "</ui:menu>"
     },
     {
      "class": "checkboxMenuResult",
      "aura:id": "checkboxMenuResult",
      "value": "Which items get selected"
     },
     {
      "value": "<ui:menu>"
     },
     {
      "value": "  <ui:menuTriggerLink aura:id=\"checkboxMenuLabel\" label=\"NFC West Teams\"/>"
     },
     {
      "value": "  <ui:menuList aura:id=\"checkboxMenu\">"
     },
     {
      "value": "    <ui:checkboxMenuItem aura:id=\"checkboxItem1\" label=\"San Francisco 49ers\"/>"
     },
     {
      "value": "    <ui:checkboxMnuItem aura:id=\"checkboxItem2\" label=\"Seattle Seahawks\"/>"
     },
     {
      "value": "    <ui:checkboxMenuItem aura:id=\"checkboxItem3\" label=\"St. Louis Rams\"/>"
     },
     {
      "value": "    <ui:checkboxMenuItem aura:id=\"checkboxItem4\" label=\"Arizona Cardinals\" disabled=\"true\" selected=\"true\"/>"
     },
     {
      "value": "  </ui:menuList>"
     },
     {
      "value": "</ui:menu>"
     },
     {
      "value": "<ui:button aura:id=\"checkboxButton\" press=\"{ !c.getMenuSelected}\" label=\"Check the selected menu items\"/>"
     },
     {
      "value": "<ui:outputText aura:id=\"result\" value=\"Which items get selected\"/>"
     },
     {
      "class": "radioMenuResult",
      "aura:id": "radioMenuResult",
      "value": "Which items get selected"
     },
     {
      "value": "<ui:menu>"
     },
     {
      "value": "  <ui:menuTriggerLink aura:id=\"radioMenuLabel\" label=\"National League West\"/>"
     },
     {
      "value": "  <ui:menuList aura:id=\"radioMenu\">"
     },
     {
      "value": "    <ui:radioMenuItem aura:id=\"radioItem1\" label=\"San Francisco\"/>"
     },
     {
      "value": "    <ui:radioMnuItem aura:id=\"radioItem2\" label=\"LA Dodgers\"/>"
     },
     {
      "value": "    <ui:radioMenuItem aura:id=\"radioItem3\" label=\"Arizona\"/>"
     },
     {
      "value": "    <ui:radioMenuItem aura:id=\"radioItem4\" label=\"Diego\" disabled=\"true\"/>"
     },
     {
      "value": "    <ui:radioMenuItem aura:id=\"radioItem5\" label=\"Colorado\"/>"
     },
     {
      "value": "  </ui:menuList>"
     },
     {
      "value": "</ui:menu>"
     },
     {
      "value": "<ui:button aura:id=\"radioButton\" press=\"{ !c.getRadioMenuSelected}\" label=\"Check the selected menu items\"/>"
     },
     {
      "value": "<ui:outputText aura:id=\"radioResult\" value=\"Which items get selected\"/>"
     },
     {
      "class": "iterationRadioMenuResult",
      "aura:id": "iterationRadioMenuResult",
      "value": "Which items get selected"
     },
     {
      "value": "<ui:menu>"
     },
     {
      "value": "  <ui:menuTriggerLink aura:id=\"iterationTrigger\" label=\"iterationTrigger\"/>"
     },
     {
      "value": "  <ui:menuList aura:id=\"iterationRadioMenu\">"
     },
     {
      "value": "    <aura:iteration items=\"{ !m.iterationItems}\" var=\"item\">"
     },
     {
      "value": "        <ui:radioMenuItem label=\"{ !item.label}\" value=\"{ !item.type} aura:id=\"{ !item.auraId}/>"
     },
     {
      "value": "    </aura:iteration>"
     },
     {
      "value": "  </ui:menuList>"
     },
     {
      "value": "</ui:menu>"
     },
     {
      "value": "<ui:button aura:id=\"radioIterationButton\" press=\"{ !c.getRadioIterationMenuSelected}\" label=\"Check the selected menu items\"/>"
     },
     {
      "value": "<ui:outputText aura:id=\"radioIterationResult\" value=\"Which items get selected\"/>"
     },
     {
      "class": "conditionRadioMenuResult",
      "aura:id": "conditionRadioMenuResult",
      "value": "Which items get selected"
     },
     {
      "class": "conditionIterationMenuResult",
      "aura:id": "conditionIterationMenuResult",
      "value": "Which items get selected"
     },
     {
      "value": "<ui:menu>"
     },
     {
      "value": "  <ui:menuTriggerLink label=\"All teams\"/>"
     },
     {
      "value": "  <ui:menuList>"
     },
     {
      "value": "    <ui:actionMenuItem label=\"Bayern München\" click=\"{ !c.updateLabel}\"/>"
     },
     {
      "value": "    <ui:actionMenuItem label=\"FC Barcelona\" click=\"{ !c.updateLabel}\"/>"
     },
     {
      "value": "    <ui:actionMenuItem label=\"Inter Milan\" click=\"{ !c.updateLabel}\"/>"
     },
     {
      "value": "    <ui:actionMenuItem label=\"Manchester United\" click=\"{ !c.updateLabel}\"/>"
     },
     {
      "value": "    <ui:menuItemSeparator/>"
     },
     {
      "value": "    <ui:checkboxMenuItem label=\"San Francisco 49ers\"/>"
     },
     {
      "value": "    <ui:checkboxMnuItem label=\"Seattle Seahawks\"/>"
     },
     {
      "value": "    <ui:checkboxMenuItem label=\"St. Louis Rams\"/>"
     },
     {
      "value": "    <ui:checkboxMenuItem label=\"Arizona Cardinals\"/>"
     },
     {
      "value": "    <ui:menuItemSeparator/>"
     },
     {
      "value": "    <ui:radioMenuItem label=\"San Francisco 49ers\"/>"
     },
     {
      "value": "    <ui:radioMnuItem label=\"San Francisco Giants\"/>"
     },
     {
      "value": "    <ui:radioMenuItem label=\"Oakland As\"/>"
     },
     {
      "value": "    <ui:radioMenuItem label=\"Golden State Warriors\"/>"
     },
     {
      "value": "  </ui:menuList>"
     },
     {
      "value": "</ui:menu>"
     }
    ],
    "ui:checkboxMenuItem": [
     {
      "class": "checkboxItem1",
      "aura:id": "checkboxItem1",
      "label": "San Francisco 49ers"
     },
     {
      "class": "checkboxItem2",
      "aura:id": "checkboxItem2",
      "label": "Seattle Seahawks"
     },
     {
      "class": "checkboxItem3",
      "aura:id": "checkboxItem3",
      "label": "St. Louis Rams"
     },
     {
      "class": "checkboxItem4",
      "aura:id": "checkboxItem4",
      "label": "Arizona Cardinals",
      "disabled": "true",
      "selected": "true"
     },
     {
      "label": "falseCondition",
      "value": "falseCondition"
     },
     {
      "label": "outsideCondition",
      "value": "outsideCondition"
     },
     {
      "label": "San Francisco 49ers"
     },
     {
      "label": "Seattle Seahawks"
     },
     {
      "label": "St. Louis Rams"
     },
     {
      "label": "Arizona Cardinals"
     }
    ],
    "ui:button": [
     {
      "class": "checkboxButton",
      "aura:id": "checkboxButton",
      "press": "{!c.getMenuSelected}",
      "label": "Check the selected menu items"
     },
     {
      "class": "radioButton",
      "aura:id": "radioButton",
      "press": "{!c.getRadioMenuSelected}",
      "label": "Check the selected menu items"
     },
     {
      "class": "radioIterationButton",
      "aura:id": "radioIterationButton",
      "press": "{!c.getRadioIterationMenuSelected}",
      "label": "Check the selected menu items"
     },
     {
      "class": "radioConditionButton",
      "aura:id": "radioConditionButton",
      "press": "{!c.getRadioConditionMenuSelected}",
      "label": "Check the selected menu items"
     },
     {
      "class": "conditionIterationButton",
      "aura:id": "conditionIterationButton",
      "press": "{!c.getConditionIterationMenuSelected}",
      "label": "Check the selected menu items"
     }
    ],
    "ui:radioMenuItem": [
     {
      "class": "radioItem1",
      "aura:id": "radioItem1",
      "label": "San Francisco"
     },
     {
      "class": "radioItem2",
      "aura:id": "radioItem2",
      "label": "LA Dodgers"
     },
     {
      "class": "radioItem3",
      "aura:id": "radioItem3",
      "label": "Arizona"
     },
     {
      "class": "radioItem4",
      "aura:id": "radioItem4",
      "label": "Diego",
      "disabled": "true"
     },
     {
      "class": "radioItem5",
      "aura:id": "radioItem5",
      "label": "Colorado"
     },
     {
      "label": "{!item.label}",
      "value": "{!item.value}"
     },
     {
      "label": "trueCondition",
      "value": "trueCondition"
     },
     {
      "label": "falseCondition1",
      "value": "falseCondition1"
     },
     {
      "label": "falseCondition2",
      "value": "falseCondition2"
     },
     {
      "label": "outsideCondition",
      "value": "outsideCondition"
     },
     {
      "label": "{!item.label}",
      "value": "{!item.value}"
     },
     {
      "label": "San Francisco"
     },
     {
      "label": "LA Dodgers"
     },
     {
      "label": "Arizona"
     },
     {
      "label": "San Diego"
     },
     {
      "label": "Colorado"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!m.iterationItems}",
      "var": "item"
     },
     {
      "items": "{!m.iterationItems}",
      "var": "item"
     },
     {
      "aura:id": "Iteration",
      "items": "Inter Milan",
      "var": "team"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.menuCondition}"
     },
     {
      "isTrue": "{!v.menuCondition}"
     },
     {
      "isTrue": "{!v.menuCondition}"
     },
     {
      "isTrue": "{!v.menuCondition}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ],
    "ui:menuItemSeparator": [
     {},
     {},
     {},
     {}
    ],
    "uitest:menuList_Extend": [
     {
      "aura:id": "extendMenuList",
      "class": "extendMenuList"
     }
    ],
    "ui:image": [
     {
      "aura:id": "image",
      "src": "/auraFW/resources/aura/auralogo.png",
      "imageType": "decorative"
     }
    ]
   }
  },
  "menu_extendMenuItem.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "model": "java://org.auraframework.components.ui.MenuTestModel"
     }
    ],
    "ui:menu": [
     {
      "aura:id": "uiMenu",
      "class": "clubMenu"
     }
    ],
    "ui:menuTriggerLink": [
     {
      "class": "trigger",
      "aura:id": "trigger",
      "label": "Please pick your favorite soccer club"
     }
    ],
    "ui:menuList": [
     {
      "class": "actionMenu",
      "aura:id": "actionMenu"
     }
    ],
    "uitest:menuItem_extend": [
     {
      "zclass": "actionItem1",
      "zlabel": "Bayern München",
      "aura:id": "actionItem1"
     },
     {
      "zclass": "actionItem2",
      "zlabel": "FC Barcelona",
      "aura:id": "actionItem2"
     },
     {
      "zclass": "actionItem3",
      "zlabel": "Inter Milan",
      "aura:id": "actionItem3"
     },
     {
      "zclass": "actionItem4",
      "zlabel": "Manchester United",
      "aura:id": "actionItem4"
     }
    ]
   }
  },
  "menu_extendMenuList.app": {
   "attributes": {
    "expandEventFired": {
     "name": "expandEventFired",
     "type": "boolean",
     "default": "false"
    },
    "collapseEventFired": {
     "name": "collapseEventFired",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "ui:menu": [
     {
      "aura:id": "uiMenuAttachToBody",
      "class": "uiMenuAttachToBody"
     }
    ],
    "ui:menuTriggerLink": [
     {
      "class": "triggerAttachToBody",
      "aura:id": "triggerAttachToBody",
      "label": "Please pick your favorite soccer club"
     }
    ],
    "uitest:menuList_Extend": [
     {
      "class": "actionMenuAttachToBody",
      "aura:id": "actionMenuAttachToBody",
      "attachToBody": "true"
     }
    ],
    "ui:actionMenuItem": [
     {
      "class": "actionItemAttachToBody1",
      "aura:id": "actionItemAttachToBody1",
      "label": "Bayern München",
      "click": "{!c.updateTriggerLabelForAttachToBody}"
     },
     {
      "class": "actionItemAttachTBody2",
      "aura:id": "actionItemAttachToBody2",
      "label": "FC Barcelona",
      "click": "{!c.updateTriggerLabelForAttachToBody}",
      "disabled": "true"
     },
     {
      "class": "actionItemAttachToBody3",
      "aura:id": "actionItemAttachToBody3",
      "label": "Inter Milan",
      "click": "{!c.updateTriggerLabelForAttachToBody}"
     },
     {
      "class": "actionItemAttachToBody4",
      "aura:id": "actionItemAttachToBody4",
      "label": "Manchester United",
      "click": "{!c.updateTriggerLabelForAttachToBody}"
     }
    ]
   }
  },
  "outputURL_LocationChange.app": {
   "attributes": {
    "locationChangeCountPeach": {
     "name": "locationChangeCountPeach",
     "type": "Integer",
     "default": "0"
    },
    "locationChangeCount": {
     "name": "locationChangeCount",
     "type": "Integer",
     "default": "0"
    },
    "locationTokenOrange": {
     "name": "locationTokenOrange",
     "type": "String",
     "default": "EMPTY"
    },
    "locationToken": {
     "name": "locationToken",
     "type": "String",
     "default": "EMPTY2"
    },
    "clickCount": {
     "name": "clickCount",
     "type": "Integer",
     "default": "0"
    },
    "debugMsg": {
     "name": "debugMsg",
     "type": "String",
     "default": "Nothing"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "auratest:locationChange",
     "action": "{!c.locationChanged}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "locationChangeEvent": "auratest:locationChange",
      "render": "client"
     }
    ],
    "ui:outputURL": [
     {
      "value": "#APPLE",
      "label": "hashLinkApple",
      "aura:id": "hashLinkA",
      "click": "{!c.clickApple}"
     },
     {
      "value": "{!'#' + BANANA}",
      "label": "hashLinkBanana",
      "aura:id": "hashLinkB",
      "click": "{!c.clickBanana}"
     },
     {
      "value": "{!'#' + v.locationTokenOrange}",
      "label": "hashLinkOrange",
      "aura:id": "hashLinkO",
      "click": "{!c.clickOrange}"
     },
     {
      "value": "{!'#' + v.locationChangeCountPeach}",
      "label": "hashLinkPeach",
      "aura:id": "hashLinkP",
      "click": "{!c.clickPeach}"
     }
    ]
   }
  },
  "panel2_Test.app": {
   "attributes": {
    "testPanelType": {
     "name": "testPanelType",
     "type": "String",
     "default": "modal"
    },
    "testTitle": {
     "name": "testTitle",
     "type": "String",
     "default": "New Panel"
    },
    "testDisplayTitle": {
     "name": "testDisplayTitle",
     "type": "Boolean",
     "default": "true"
    },
    "testClass": {
     "name": "testClass",
     "type": "String"
    },
    "testFlavor": {
     "name": "testFlavor",
     "type": "String"
    },
    "testIsVisible": {
     "name": "testIsVisible",
     "type": "Boolean",
     "default": "true"
    },
    "testStartOfDialogLabel": {
     "name": "testStartOfDialogLabel",
     "type": "String",
     "default": "Start of Dialog"
    },
    "testCloseOnClickOut": {
     "name": "testCloseOnClickOut",
     "type": "Boolean",
     "default": "false"
    },
    "testShowCloseButton": {
     "name": "testShowCloseButton",
     "type": "Boolean",
     "default": "true"
    },
    "testCloseDialogLabel": {
     "name": "testCloseDialogLabel",
     "type": "String",
     "default": "Close"
    },
    "testUseTransition": {
     "name": "testUseTransition",
     "type": "Boolean",
     "default": "true"
    },
    "testAnimation": {
     "name": "testAnimation",
     "type": "String",
     "default": "bottom"
    },
    "testAutoFocus": {
     "name": "testAutoFocus",
     "type": "Boolean",
     "default": "true"
    },
    "testDirection": {
     "name": "testDirection",
     "type": "String",
     "default": "north"
    },
    "testShowPointer": {
     "name": "testShowPointer",
     "type": "Boolean",
     "default": "false"
    },
    "testUseReferenceElementSelector": {
     "name": "testUseReferenceElementSelector",
     "type": "Boolean",
     "default": "false"
    },
    "testUseReferenceElement": {
     "name": "testUseReferenceElement",
     "type": "Boolean",
     "default": "false"
    },
    "testReferenceElementSelector": {
     "name": "testReferenceElementSelector",
     "type": "String"
    },
    "testUseHeader": {
     "name": "testUseHeader",
     "type": "Boolean",
     "default": "false"
    },
    "testUseFooter": {
     "name": "testUseFooter",
     "type": "Boolean",
     "default": "false"
    },
    "testPanelHeader": {
     "name": "testPanelHeader",
     "type": "Aura.Component[]"
    },
    "testPanelFooter": {
     "name": "testPanelFooter",
     "type": "Aura.Component[]"
    },
    "testMakeScrollable": {
     "name": "testMakeScrollable",
     "type": "Boolean",
     "default": "false"
    },
    "nonScrollable": {
     "name": "nonScrollable",
     "type": "Boolean",
     "default": "false"
    },
    "testCustomizeCloseAction": {
     "name": "testCustomizeCloseAction",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "ui:block": [
     {
      "aura:id": "overflowHidden"
     },
     {
      "aura:id": "overflowVisible",
      "overflow": "true",
      "tag": "span"
     }
    ],
    "aura:set": [
     {
      "attribute": "right"
     },
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:inputText": [
     {
      "class": "appInput",
      "aura:id": "appInput",
      "value": "TestingCloseOnClickOutFeature",
      "maxlength": "10"
     },
     {
      "class": "appInput2",
      "aura:id": "appInput2",
      "value": "this opens a panel",
      "click": "{!c.createPanel}"
     }
    ],
    "uitest:panel2_Tester": [
     {
      "aura:id": "tester",
      "panelType": "{!v.testPanelType}",
      "title": "{!v.testTitle}",
      "titleDisplay": "{!v.testDisplayTitle}",
      "class": "{!v.testClass}",
      "flavor": "{!v.testFlavor}",
      "isVisible": "{!v.testIsVisible}",
      "startOfDialogLabel": "{!v.testStartOfDialogLabel}",
      "closeOnCLickOut": "{!v.testCloseOnClickOut}",
      "showCloseButton": "{!v.testShowCloseButton}",
      "closeDialogLabel": "{!v.testCloseDialogLabel}",
      "useTransition": "{!v.testUseTransition}",
      "animation": "{!v.testAnimation}",
      "autoFocus": "{!v.testAutoFocus}",
      "direction": "{!v.testDirection}",
      "showPointer": "{!v.testShowPointer}",
      "useReferenceElementSelector": "{!v.testUseReferenceElementSelector}",
      "useReferenceElement": "{!v.testUseReferenceElement}",
      "referenceElementSelector": "{!v.testReferenceElementSelector}",
      "useHeader": "{!v.testUseHeader}",
      "useFooter": "{!v.testUseFooter}",
      "panelHeader": "{!v.testPanelHeader}",
      "panelFooter": "{!v.testPanelFooter}",
      "makeScrollable": "{!v.testMakeScrollable}",
      "customizeCloseAction": "{!v.testCustomizeCloseAction}"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm",
      "useSharedContainer": "true"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ],
    "ui:containerManager": [
     {}
    ]
   }
  },
  "panelManager_Test.app": {
   "attributes": {
    "_testPanels": {
     "name": "_testPanels",
     "type": "Object[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "aura:dependency": [
     {
      "resource": "markup://uitest:panel2Content",
      "type": "COMPONENT"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     }
    ],
    "uitest:panel2": [
     {
      "alias": "myPanel2"
     }
    ],
    "ui:button": [
     {
      "aura:id": "createPanelBtn",
      "label": "Create panelType: myPanel2",
      "press": "{!c.createP2}"
     }
    ]
   }
  },
  "popupTest.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ],
    "ui:popup": [
     {},
     {},
     {
      "aura:id": "popup1"
     },
     {},
     {},
     {},
     {},
     {}
    ],
    "ui:popupTrigger": [
     {
      "aura:id": "triggerExtendedTarget",
      "label": "extended target"
     },
     {
      "aura:id": "triggerExtendedTarget",
      "label": "!attachToBody"
     },
     {
      "aura:id": "triggerLabel",
      "label": "trigger via label"
     },
     {
      "aura:id": "triggerLabel",
      "label": "!closeOnClickOutside"
     },
     {
      "class": "customTrigger"
     },
     {
      "aura:id": "triggerPopupExtended"
     },
     {
      "aura:id": "triggerCurtain"
     },
     {
      "aura:id": "triggerManualPositionCurtain",
      "label": "label trigger + manualPosition + curtain"
     },
     {
      "class": "triggerExtendedTarget",
      "aura:id": "triggerExtendedTarget",
      "label": "Triggerglsc"
     }
    ],
    "uiTest:popupTestExtendedTarget": [
     {
      "aura:id": "targetExtendedTarget",
      "attachToBody": "true",
      "closeOnClickInside": "true"
     },
     {
      "aura:id": "targetNotAttached"
     }
    ],
    "ui:button": [
     {
      "press": "{!c.alert}",
      "label": "Alert + close"
     },
     {
      "press": "{!c.destroyPopup}",
      "label": "destroy popup1"
     }
    ],
    "ui:popupTarget": [
     {
      "aura:id": "targetLabel",
      "attachToBody": "true"
     },
     {
      "aura:id": "targetLabel",
      "attachToBody": "true",
      "closeOnClickOutside": "false"
     },
     {
      "class": "customTriggerTargetContainer",
      "aura:id": "targetTriggerElement",
      "attachToBody": "true"
     },
     {
      "aura:id": "targetPopupExtended"
     },
     {
      "aura:id": "targetCurtain",
      "attachToBody": "true",
      "curtain": "true"
     },
     {
      "aura:id": "targetManualPositionCurtain",
      "attachToBody": "true",
      "manualPosition": "true",
      "curtain": "true"
     },
     {
      "aura:id": "targetExtendedTarget",
      "attachToBody": "true",
      "manualPosition": "true",
      "autoPosition": "false"
     }
    ],
    "aura:set": [
     {
      "attribute": "trigger"
     }
    ],
    "uiTest:popupTestTriggerElement": [
     {
      "aura:id": "triggerTriggerElement"
     }
    ],
    "uiTest:popupTestExtendedPopup": [
     {}
    ]
   }
  },
  "testApp.app": {
   "attributes": {
    "submitCount": {
     "name": "submitCount",
     "type": "integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "access": "unauthenticated",
      "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
      "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outSubmitCount",
      "value": "0"
     },
     {
      "aura:id": "outCheckbox",
      "value": ""
     },
     {
      "aura:id": "outCurrency",
      "value": ""
     },
     {
      "aura:id": "outDate",
      "value": ""
     },
     {
      "aura:id": "outDateTime",
      "value": ""
     },
     {
      "aura:id": "outEmail",
      "value": ""
     },
     {
      "aura:id": "outNumber",
      "value": ""
     },
     {
      "aura:id": "outOption",
      "value": ""
     },
     {
      "aura:id": "outPercent",
      "value": ""
     },
     {
      "aura:id": "outPhone",
      "value": ""
     },
     {
      "aura:id": "outSearch",
      "value": ""
     },
     {
      "aura:id": "outSecret",
      "value": ""
     },
     {
      "aura:id": "outSelect",
      "value": ""
     },
     {
      "aura:id": "outSelectOption",
      "value": ""
     },
     {
      "aura:id": "outText",
      "value": ""
     },
     {
      "aura:id": "outTextArea",
      "value": ""
     },
     {
      "aura:id": "outUrl",
      "value": ""
     },
     {
      "aura:id": "outSelectMulti",
      "value": ""
     }
    ],
    "ui:inputCheckbox": [
     {
      "aura:id": "inCheckbox",
      "value": "{!m.checked}"
     }
    ],
    "ui:button": [
     {
      "buttonTitle": "Checkbox",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Currency",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Date",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "DateTime",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Email",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Number",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Option",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Percent",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Phone",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Search",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Secret",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Select",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "SelectOption",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Text",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "TextArea",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "Url",
      "label": "submit",
      "press": "{!c.submit}"
     },
     {
      "buttonTitle": "SelectMulti",
      "label": "submit",
      "press": "{!c.submit}"
     }
    ],
    "ui:inputCurrency": [
     {
      "aura:id": "inCurrency",
      "value": "{!m.currency}"
     }
    ],
    "ui:inputDate": [
     {
      "aura:id": "inDate",
      "value": "{!m.dateOnly}"
     }
    ],
    "ui:inputDateTime": [
     {
      "aura:id": "inDateTime",
      "value": "{!m.dateTime}"
     }
    ],
    "ui:inputEmail": [
     {
      "aura:id": "inEmail",
      "value": "{!m.email}"
     }
    ],
    "ui:inputNumber": [
     {
      "aura:id": "inNumber",
      "value": "{!m.number}"
     }
    ],
    "ui:inputOption": [
     {
      "aura:id": "inOption",
      "value": "{!m.option}"
     }
    ],
    "ui:inputPercent": [
     {
      "aura:id": "inPercent",
      "value": "{!m.percent}"
     }
    ],
    "ui:inputPhone": [
     {
      "aura:id": "inPhone",
      "value": "{!m.phone}"
     }
    ],
    "ui:inputSearch": [
     {
      "aura:id": "inSearch",
      "value": "{!m.search}"
     }
    ],
    "ui:inputSecret": [
     {
      "aura:id": "inSecret",
      "value": "{!m.secret}"
     }
    ],
    "ui:inputSelect": [
     {
      "aura:id": "inSelect",
      "options": "{!m.select}"
     },
     {
      "size": "{!m.selectOptions.length}",
      "value": "option1",
      "multiple": "true",
      "aura:id": "inSelectMulti",
      "options": "{!m.selectOptions}"
     }
    ],
    "ui:inputSelectOption": [
     {
      "aura:id": "inSelectOption",
      "value": "{!m.selectOption}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inText",
      "value": "{!m.text}",
      "maxlength": "10"
     }
    ],
    "ui:inputTextArea": [
     {
      "aura:id": "inTextArea",
      "value": "{!m.textAreaText}"
     }
    ],
    "ui:inputURL": [
     {
      "aura:id": "inUrl",
      "value": "{!m.url}"
     }
    ]
   }
  },
  "InputSelect_OptionsAttributeInitValue.cmp": {
   "attributes": {
    "whichToRender": {
     "name": "whichToRender",
     "type": "String",
     "default": "VUWND"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.whichToRender == 'VUWND'}"
     },
     {
      "isTrue": "{!v.whichToRender == 'VDSE'}"
     },
     {
      "isTrue": "{!v.whichToRender == 'VUWD'}"
     },
     {
      "isTrue": "{!v.whichToRender == 'VDSDNE'}"
     },
     {
      "isTrue": "{!v.whichToRender == 'VNNO'}"
     },
     {
      "isTrue": "{!v.whichToRender == 'VNWNNO'}"
     },
     {
      "isTrue": "{!v.whichToRender == 'VNWNO'}"
     },
     {
      "isTrue": "{!v.whichToRender == 'VNWDANO'}"
     },
     {
      "isTrue": "{!v.whichToRender == 'VNWDANNO'}"
     }
    ],
    "ui:inputSelect": [
     {
      "aura:id": "Value_Undef_With_No_Default",
      "options": "{!m.noOptionsSel}"
     },
     {
      "aura:id": "Value_Def_Selection_Exists",
      "value": "Bear",
      "options": "{!m.noOptionsSel}"
     },
     {
      "aura:id": "Value_Undef_With_Default",
      "options": "{!m.secondOptionSel}"
     },
     {
      "aura:id": "Value_Def_Selection_DNE",
      "value": "Moose",
      "options": "{!m.noOptionsSel}"
     },
     {
      "aura:id": "Value_Null_No_Options",
      "value": ""
     },
     {
      "aura:id": "Value_Null_With_No_Null_Option",
      "value": "",
      "options": "{!m.noOptionsSel}"
     },
     {
      "aura:id": "Value_Null_With_Null_Option",
      "value": "",
      "options": "{!m.noOptionsSelWithNone}"
     },
     {
      "aura:id": "Value_Null_With_Default_And_Null_Option",
      "value": "",
      "options": "{!m.thirdOptionSelWithNone}"
     },
     {
      "aura:id": "Value_Null_With_Default_And_No_Null_Option",
      "value": "",
      "options": "{!m.thirdOptionSel}"
     }
    ]
   }
  },
  "InputSelect_OptionsInBodyInitValue.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "uitest:inputSelect_Extend": [
     {
      "aura:id": "Value_Undef_With_Default"
     },
     {
      "aura:id": "Value_Undef_With_No_Default"
     },
     {
      "aura:id": "Value_Def_Selection_Exists",
      "value": "Bear"
     },
     {
      "aura:id": "Value_Def_Selection_DNE",
      "value": "Moose"
     },
     {
      "aura:id": "Value_Null_No_Options",
      "value": ""
     },
     {
      "aura:id": "Value_Null_With_No_Null_Option",
      "value": ""
     },
     {
      "aura:id": "Value_Null_With_Null_Option",
      "value": ""
     },
     {
      "aura:id": "Value_Null_With_Default_And_Null_Option",
      "value": ""
     },
     {
      "aura:id": "Value_Null_With_Default_And_No_Null_Option",
      "value": ""
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion",
      "value": "true"
     },
     {
      "text": "Bear",
      "label": "Bear"
     },
     {
      "text": "Moose",
      "label": "Moose"
     },
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion"
     },
     {
      "text": "Bear",
      "label": "Bear"
     },
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion"
     },
     {
      "text": "Bear",
      "label": "Bear"
     },
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion"
     },
     {
      "text": "Bear",
      "label": "Bear"
     },
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion"
     },
     {
      "text": "Bear",
      "label": "Bear"
     },
     {
      "text": "",
      "label": "None"
     },
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion"
     },
     {
      "text": "Bear",
      "label": "Bear"
     },
     {
      "text": "",
      "label": "None"
     },
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion",
      "value": "true"
     },
     {
      "text": "Bear",
      "label": "Bear"
     },
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion"
     },
     {
      "text": "Bear",
      "label": "Bear",
      "value": "true"
     }
    ]
   }
  },
  "LocalizationService_Test.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputDateTime": [
     {
      "value": "2004-09-23T16:30:00.000Z",
      "timezone": "GMT",
      "aura:id": "myOutputDateTimeComp"
     },
     {
      "value": "2004-09-23T16:30:00.000+0800",
      "timezone": "GMT",
      "aura:id": "myOutputDateTimeCompGMT8"
     },
     {
      "value": "2013-11-02T16:01:00.000Z",
      "timezone": "Asia/Hong_Kong",
      "aura:id": "myOutputDateTimeCompHongKong1"
     },
     {
      "value": "2013-11-02T17:01:00.000Z",
      "timezone": "Asia/Hong_Kong",
      "aura:id": "myOutputDateTimeCompHongKong2"
     },
     {
      "value": "2013-11-02T18:01:00.000Z",
      "timezone": "Asia/Hong_Kong",
      "aura:id": "myOutputDateTimeCompHongKong3"
     },
     {
      "value": "2013-11-03T04:01:00.000Z",
      "timezone": "America/New_York",
      "aura:id": "myOutputDateTimeCompNewYork1"
     },
     {
      "value": "2013-11-03T05:01:00.000Z",
      "timezone": "America/New_York",
      "aura:id": "myOutputDateTimeCompNewYork2"
     },
     {
      "value": "2013-11-03T06:01:00.000Z",
      "timezone": "America/New_York",
      "aura:id": "myOutputDateTimeCompNewYork3"
     }
    ],
    "ui:outputDate": [
     {
      "value": "2004-09-23",
      "aura:id": "myOutputDateComp"
     }
    ],
    "ui:outputText": [
     {
      "value": "4:30:00 PM",
      "aura:id": "myOutputTextComp"
     }
    ],
    "ui:outputNumber": [
     {
      "value": "3.14159",
      "format": ".00",
      "aura:id": "myOutputNumberComp"
     }
    ],
    "ui:outputPercent": [
     {
      "value": "0.14566",
      "format": ".00%",
      "aura:id": "myOutputPercentComp"
     }
    ],
    "ui:outputCurrency": [
     {
      "value": "1234567890",
      "format": "¤#,##0.00",
      "aura:id": "myOutputCurrencyComp"
     }
    ]
   }
  },
  "accessibilityTool.cmp": {
   "attributes": {
    "caseToRender": {
     "name": "caseToRender",
     "type": "String",
     "default": "full"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.caseToRender == 'testMultiULToOne'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testTopPanelHidden'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testActiveTopPanelAriaHiddenIsTrue'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testBasePanelAriaHiddenIsFalse'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testNoActiveTopPanelAriaHiddenOk'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testNoActiveTopPanelBasePanelAriaHiddenIsTrue'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testNoActiveTopPanelAriaHiddenNotExists'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testNoActiveSliderAriaHiddenCorrect'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testActiveSliderAriaHiddenIncorrect'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testActivePanelSliderAriaHiddenCorrect'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testInputDefaultError'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testWithNoHeader'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testThWithScopeNoTD'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testThWithIdNoTD'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testTableHeaderWithScope'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testTHandTDtagsAssociateCorrectly'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testTDUsesWrongID'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testTDWithOutHeaderAttrib'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testTableHeaderWoID'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testTableHeadersWandWoScope'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testThNoWoScope'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'testScopeWithWrongVal'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'skipIframeForVisForce'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'imageTagTest'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'buttonLabelValid'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'labelsNotNeeded'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'fieldSetWithStyles'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'full'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'labelTest'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'anchorWOInnerText'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'anchorWInnerText'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'anchorInOutputURLInfo'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'anchorInOutputURLDeco'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'anchorMenuTest'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'ckeditor_test'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'NoRadioErrors'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'RadioErrors'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'headersCorrectOrder'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'headersWrongOrder'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'headersWrongOrderReverse'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'headersWrongOrderWrapAround'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'tagsWithoutAttributes'}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inputTextId",
      "label": "hello"
     },
     {
      "aura:id": "first",
      "placeholder": "First name"
     },
     {
      "aura:id": "mid",
      "placeholder": "Middle Name"
     },
     {
      "aura:id": "last",
      "placeholder": "Last name"
     },
     {
      "aura:id": "first",
      "placeholder": "First name"
     },
     {
      "aura:id": "mid",
      "placeholder": "Middle Name"
     },
     {
      "aura:id": "last",
      "placeholder": "Last name"
     }
    ],
    "ui:inputDefaultError": [
     {
      "aura:id": "error1",
      "value": "first error, second error, third error, fourth error"
     },
     {
      "aura:id": "error2",
      "value": "first error, second error, third error, fourth error"
     },
     {
      "value": "first error, second error, third error, fourth error"
     }
    ],
    "uitest:inputDefaultError_Test": [
     {
      "aura:id": "inputErrorTest",
      "caseToRender": "all"
     }
    ],
    "ui:image": [
     {
      "src": "2",
      "alt": "",
      "imageType": "decorative"
     },
     {
      "src": "3",
      "alt": "  Blah  ",
      "imageType": "informational"
     },
     {
      "src": "9",
      "alt": "  UnDeFiNeD  ",
      "imageType": "informational"
     },
     {
      "src": "10",
      "alt": "  EMPTY  ",
      "imageType": "informational"
     },
     {
      "src": "11",
      "alt": "  NuLl  ",
      "imageType": "informational"
     }
    ],
    "ui:button": [
     {
      "iconImgSrc": "/auraFW/resources/aura/images/bug.png",
      "label": ""
     },
     {
      "labelDisplay": "false",
      "label": " "
     },
     {
      "label": ""
     },
     {
      "iconImgSrc": "/auraFW/resources/aura/images/bug.png",
      "label": "bug Icon"
     },
     {
      "label": "This should be shown"
     }
    ],
    "ui:block": [
     {},
     {},
     {},
     {}
    ],
    "ui:label": [
     {
      "for": "birthdayInput",
      "label": "Birthday"
     },
     {
      "label": "21-25"
     },
     {
      "label": "26-30"
     },
     {
      "label": "31-35"
     },
     {
      "label": "36-40"
     },
     {
      "for": "first",
      "label": "first"
     },
     {
      "for": "mid",
      "label": "mid"
     },
     {
      "for": "21-25",
      "label": "21-25"
     },
     {
      "for": "26-30",
      "label": "26-30"
     },
     {
      "for": "31-35",
      "label": "31-35"
     },
     {
      "for": "tellUsAboutYou",
      "label": "tellUsAboutYou"
     },
     {
      "for": "last",
      "label": "last"
     },
     {
      "for": "birthdayInput",
      "label": "Birthday"
     },
     {
      "for": "26-30",
      "label": "26-30"
     }
    ],
    "ui:inputDate": [
     {
      "aura:id": "birthdayInput",
      "displayDatePicker": "true"
     },
     {
      "aura:id": "birthdayInput",
      "displayDatePicker": "true"
     }
    ],
    "ui:inputRadio": [
     {
      "aura:id": "21-25"
     },
     {
      "aura:id": "26-30"
     },
     {
      "aura:id": "31-35"
     },
     {
      "aura:id": "36-40"
     },
     {
      "label": "Old and wise enough",
      "aura:id": "Old and wise enough"
     },
     {
      "label": "I WANT TO BE CLICKED!!!!",
      "aura:id": "click me"
     },
     {
      "aura:id": "21-25"
     },
     {
      "aura:id": "26-30"
     },
     {
      "aura:id": "31-35"
     },
     {
      "label": "Old and wise enough",
      "aura:id": "Old and wise enough"
     },
     {
      "label": "I WANT TO BE CLICKED!!!!",
      "aura:id": "click me"
     },
     {
      "aura:id": "26-30"
     },
     {
      "label": "Radio5",
      "name": "Group1"
     },
     {
      "label": "Radio6",
      "name": "Group1"
     },
     {
      "label": "Radio7",
      "name": "Group2"
     },
     {
      "label": "Radio9",
      "name": "Group4"
     },
     {
      "label": "Radio5",
      "name": "Group1"
     },
     {
      "label": "Radio6",
      "name": "Group1"
     },
     {
      "label": "Radio7",
      "name": "Group2"
     },
     {
      "label": "Radio8",
      "name": "Group2"
     },
     {
      "label": "Radio10",
      "name": "Group4"
     }
    ],
    "ui:inputTextArea": [
     {
      "aura:id": "tellUsAboutYou",
      "placeholder": "Tell us about yourself",
      "rows": "10",
      "cols": "20"
     },
     {
      "aura:id": "tellUsAboutYou",
      "placeholder": "Tell us about yourself",
      "rows": "10",
      "cols": "20"
     }
    ],
    "ui:menu": [
     {}
    ],
    "ui:menuTriggerLink": [
     {
      "class": "radioMenuLabel",
      "aura:id": "radioMenuLabel",
      "label": "National League West"
     }
    ],
    "ui:menuList": [
     {
      "class": "radioMenu",
      "aura:id": "radioMenu"
     }
    ],
    "ui:radioMenuItem": [
     {
      "class": "radioItem1",
      "aura:id": "radioItem1",
      "label": "San Francisco"
     },
     {
      "class": "radioItem2",
      "aura:id": "radioItem2",
      "label": "LA Dodgers"
     },
     {
      "class": "radioItem3",
      "aura:id": "radioItem3",
      "label": "Arizona"
     },
     {
      "class": "radioItem4",
      "aura:id": "radioItem4",
      "label": "Diego",
      "disabled": "true"
     },
     {
      "class": "radioItem5",
      "aura:id": "radioItem5",
      "label": "Colorado"
     }
    ],
    "ui:inputRichText": [
     {
      "aura:id": "RICH_TEXT",
      "label": "label For Rich Text",
      "value": "{!v.testContent}"
     }
    ],
    "ui:inputCheckbox": [
     {
      "label": "Radio1",
      "name": "Group1"
     },
     {
      "label": "Radio2",
      "name": "Group1"
     },
     {
      "label": "Radio3",
      "name": "Group1"
     },
     {
      "label": "Radio4",
      "name": "Group1"
     },
     {
      "label": "Radio8",
      "name": "Group3"
     },
     {
      "label": "Radio1",
      "name": "Group1"
     },
     {
      "label": "Radio2",
      "name": "Group1"
     },
     {
      "label": "Radio3",
      "name": "Group1"
     },
     {
      "label": "Radio4",
      "name": "Group1"
     },
     {
      "label": "Radio9",
      "name": "Group3"
     }
    ]
   }
  },
  "asyncImage_Test.cmp": {
   "attributes": {
    "defaultSrc": {
     "name": "defaultSrc",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "ui:asyncComponentLoaded",
      "type": "EVENT"
     },
     {
      "resource": "ui:asyncComponentRegister",
      "type": "EVENT"
     }
    ],
    "ui:asyncImage": [
     {
      "aura:id": "asyncImage",
      "actualImageSrc": "{!v.defaultSrc}",
      "alt": "hello"
     }
    ],
    "ui:button": [
     {
      "aura:id": "loadButton",
      "label": "Fire Load Event",
      "press": "{!c.load}"
     }
    ]
   }
  },
  "autoComplete_CustomOption.cmp": {
   "attributes": {
    "visible": {
     "name": "visible",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "autoComplete_CustomTemplate.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    },
    "visible": {
     "name": "visible",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "focus": {
     "name": "focus",
     "action": "{!c.handleFocus}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "autoComplete_Test.cmp": {
   "attributes": {
    "usePanel": {
     "name": "usePanel",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:autocomplete": [
     {
      "usePanel": "{!v.usePanel}",
      "aura:id": "autoComplete",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeAutoCompleteMatchDone}",
      "inputChange": "{!c.handleInputChangeAutoComplete}",
      "selectListOption": "{!c.handleSelectOptionAutoComplete}",
      "label": "Generic Auto Complete"
     },
     {
      "aura:id": "autoCompleteNoData",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeNoDataMatchDone}",
      "inputChange": "{!c.handleInputChangeNoData}",
      "selectListOption": "{!c.handleSelectOptionNoData}",
      "keydown": "{!c.handleKeyDown}"
     },
     {
      "aura:id": "autoCompleteLargeList",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeLargeListMatchDone}",
      "inputChange": "{!c.handleInputChangeLargeList}",
      "selectListOption": "{!c.handleSelectOptionLargeList}",
      "label": "Large List Auto Complete",
      "labelPosition": "hidden"
     },
     {
      "aura:id": "autoCompleteCustomTemplate",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeCustomTemplateMatchDone}",
      "inputChange": "{!c.handleInputChangeCustomTemplate}",
      "selectListOption": "{!c.handleSelectOptionCustomTemplate}"
     },
     {
      "aura:id": "autoCompleteCustomOption",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeCustomOptionMatchDone}",
      "inputChange": "{!c.handleInputChangeCustomOption}",
      "selectListOption": "{!c.handleSelectOptionCustomOption}"
     },
     {
      "class": "autoCompleteUpdateOn",
      "aura:id": "autoCompleteUpdateOn",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeNoDataMatchDone}",
      "inputChange": "{!c.handleInputChangeNoData}",
      "selectListOption": "{!c.handleSelectOptionNoData}",
      "keydown": "{!c.handleKeyDown}",
      "updateOn": "keydown,change"
     },
     {
      "aura:id": "autoCompleteEmptyListContent",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeEmptyListContentMatchDone}",
      "inputChange": "{!c.handleInputChangeEmptyListContent}",
      "selectListOption": "{!c.handleSelectOptionEmptyListContent}"
     },
     {
      "aura:id": "autoCompleteMatchFunc",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeMatchFuncMatchDone}",
      "inputChange": "{!c.handleInputChangeMatchFunc}",
      "selectListOption": "{!c.handleSelectOptionMatchFunc}",
      "matchFunc": "{!c.matchFuncShowAllMatchFunc}"
     },
     {
      "class": "autoCompleteFocus blur focus",
      "aura:id": "autoCompleteFocus",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeNoDataMatchDone}",
      "inputChange": "{!c.handleInputChangeNoData}",
      "selectListOption": "{!c.handleSelectOptionNoData}",
      "focus": "{!c.handleOnFocus}",
      "blur": "{!c.handleOnBlur}"
     },
     {
      "aura:id": "autoCompleteToggle",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeToggleMatchDone}",
      "inputChange": "{!c.handleInputChangeToggle}",
      "selectListOption": "{!c.handleSelectOptionToggle}",
      "matchFunc": "{!c.matchFuncShowAllToggle}"
     },
     {
      "setDefaultHighlight": "false",
      "usePanel": "{!v.usePanel}",
      "aura:id": "autoCompleteHeaderFooter",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeAutoCompleteMatchDoneHeaderFooter}",
      "inputChange": "{!c.handleInputChangeAutoCompleteHeaderFooter}",
      "selectListOption": "{!c.handleSelectOptionAutoCompleteHeaderFooter}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "emptyListContent"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "autocompleteButton"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "listHeader"
     },
     {
      "attribute": "listFooter"
     },
     {
      "attribute": "registeredPanels"
     }
    ],
    "uitest:autocomplete_TestDataProvider": [
     {},
     {
      "dataType": "emptyList"
     },
     {
      "dataType": "largeList"
     },
     {},
     {},
     {
      "dataType": "emptyList"
     },
     {},
     {},
     {
      "dataType": "emptyList"
     },
     {},
     {}
    ],
    "ui:autocompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "autoCompleteMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteNoDataMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteLargeListMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteCustomTemplateMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteCustomOptionMatchSize",
      "value": ""
     },
     {
      "aura:id": "outputLabel",
      "class": "outputLabel",
      "value": ""
     },
     {
      "value": "No matches found"
     },
     {
      "aura:id": "autoCompleteEmptyListContentMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteMatchFuncMatchSize",
      "value": ""
     },
     {
      "aura:id": "outputLabelOnFocusAndBlur",
      "class": "outputLabelOnFocusAndBlur",
      "value": ""
     },
     {
      "aura:id": "autoCompleteToggleMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteSelectedEventResult",
      "value": ""
     },
     {
      "aura:id": "autoCompleteHeaderFooterMatchSize",
      "value": ""
     }
    ],
    "uitest:autoComplete_CustomTemplate": [
     {
      "value": "{!row.label}",
      "visible": "{!row.visible}"
     }
    ],
    "uitest:autoComplete_CustomOption": [
     {
      "label": "{!row.label}",
      "visible": "{!row.visible}"
     }
    ],
    "ui:button": [
     {
      "label": "Toggle",
      "press": "{!c.handleToggleActionToggle}"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ]
   }
  },
  "autoComplete_updateOnTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:autocomplete": [
     {
      "aura:id": "autoCompleteNoData",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeNoDataMatchDone}",
      "inputChange": "{!c.handleInputChangeNoData}",
      "selectListOption": "{!c.handleSelectOptionNoData}",
      "keydown": "{!c.handleKeyDown}"
     },
     {
      "aura:id": "autoCompleteLargeList",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeLargeListMatchDone}",
      "inputChange": "{!c.handleInputChangeLargeList}",
      "selectListOption": "{!c.handleSelectOptionLargeList}",
      "label": "Large List Auto Complete",
      "labelPosition": "hidden"
     },
     {
      "aura:id": "autoCompleteCustomTemplate",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeCustomTemplateMatchDone}",
      "inputChange": "{!c.handleInputChangeCustomTemplate}",
      "selectListOption": "{!c.handleSelectOptionCustomTemplate}"
     },
     {
      "aura:id": "autoCompleteCustomOption",
      "optionVar": "row",
      "matchDone": "{!c.handleInputChangeCustomOptionMatchDone}",
      "inputChange": "{!c.handleInputChangeCustomOption}",
      "selectListOption": "{!c.handleSelectOptionCustomOption}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     }
    ],
    "uitest:autocomplete_TestDataProvider": [
     {
      "dataType": "emptyList"
     },
     {
      "dataType": "largeList"
     },
     {},
     {}
    ],
    "ui:autocompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     },
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row.value}",
      "visible": "{!row.visible}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "autoCompleteNoDataMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteLargeListMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteCustomTemplateMatchSize",
      "value": ""
     },
     {
      "aura:id": "autoCompleteCustomOptionMatchSize",
      "value": ""
     },
     {
      "aura:id": "outputLabel",
      "class": "outputLabel",
      "value": ""
     }
    ],
    "uitest:autoComplete_CustomTemplate": [
     {
      "value": "{!row.label}",
      "visible": "{!row.visible}"
     }
    ],
    "uitest:autoComplete_CustomOption": [
     {
      "label": "{!row.label}",
      "visible": "{!row.visible}"
     }
    ]
   }
  },
  "autocomplete_TestDataProvider.cmp": {
   "attributes": {
    "dataType": {
     "name": "dataType",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "badRenderer.cmp": {
   "attributes": {
    "skipRender": {
     "name": "skipRender",
     "type": "Boolean"
    },
    "skipAfterRender": {
     "name": "skipAfterRender",
     "type": "Boolean"
    },
    "skipRerender": {
     "name": "skipRerender",
     "type": "Boolean"
    },
    "skipUnrerender": {
     "name": "skipUnrerender",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "block_Test.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:block": [
     {
      "aura:id": "overflowHidden"
     },
     {
      "aura:id": "overflowVisible",
      "overflow": "true",
      "tag": "span"
     }
    ],
    "aura:set": [
     {
      "attribute": "left"
     },
     {
      "attribute": "right"
     }
    ]
   }
  },
  "button_LabelRequiredTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {}
    ]
   }
  },
  "button_Test.cmp": {
   "attributes": {
    "iconAndLabelButtonPressedMessage": {
     "name": "iconAndLabelButtonPressedMessage",
     "type": "String",
     "default": "Icon and label button NOT yet pressed"
    },
    "labelOnlyButtonPressedMessage": {
     "name": "labelOnlyButtonPressedMessage",
     "type": "String",
     "default": "Label only button NOT yet pressed"
    },
    "iconOnlyButtonPressedMessage": {
     "name": "iconOnlyButtonPressedMessage",
     "type": "String",
     "default": "Icon only button NOT yet pressed"
    },
    "isDomEventSet": {
     "name": "isDomEventSet",
     "type": "boolean",
     "default": "{!false}"
    },
    "numTimesToPerform": {
     "name": "numTimesToPerform",
     "type": "Integer",
     "default": "2",
     "description": "Number of times to perform mouseover/mouseout/focus/blur etc."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "class": "Icon_and_label",
      "label": "Icon and label",
      "disabled": "false",
      "press": "{!c.handleIconAndLabel}",
      "iconImgSrc": "/auraFW/resources/aura/images/checkbox_checked.gif",
      "accesskey": "i"
     },
     {
      "class": "Label_only",
      "label": "Label only!!",
      "disabled": "false",
      "press": "{!c.handleLabelOnly}",
      "iconImgSrc": "",
      "labelDir": "rtl"
     },
     {
      "class": "Icon_only",
      "disabled": "false",
      "press": "{!c.handleIconOnly}",
      "iconImgSrc": "/auraFW/resources/aura/images/checkbox_checked.gif",
      "label": "Icon_only",
      "labelDisplay": "false"
     },
     {
      "class": "testDomEventBtn",
      "label": "testDomEvent",
      "press": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "statefulBtn",
      "stateful": "true",
      "mouseover": "{!c.mouseoverfn}",
      "mouseout": "{!c.mouseoutfn}",
      "focus": "{!c.focusfn}",
      "blur": "{!c.blurfn}",
      "label": "Stateful Button",
      "press": "{!c.selected}"
     },
     {
      "aura:id": "insidebtn",
      "stateful": "false",
      "label": "Inside Button"
     }
    ],
    "ui:outputText": [
     {
      "class": "Icon_and_label",
      "value": "{!v.iconAndLabelButtonPressedMessage}"
     },
     {
      "class": "Label_only",
      "value": "{!v.labelOnlyButtonPressedMessage}"
     },
     {
      "class": "Icon_only",
      "value": "{!v.iconOnlyButtonPressedMessage}"
     },
     {
      "value": "Mouseover : "
     },
     {
      "aura:id": "mouseoverCounter",
      "value": "0"
     },
     {
      "value": "Mouseout : "
     },
     {
      "aura:id": "mouseoutCounter",
      "value": "0"
     },
     {
      "value": "Focus : "
     },
     {
      "aura:id": "focusCounter",
      "value": "0"
     },
     {
      "value": "Blur : "
     },
     {
      "aura:id": "blurCounter",
      "value": "0"
     }
    ]
   }
  },
  "carousel_AccessibilityTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:carousel": [
     {
      "aura:id": "carousel"
     }
    ],
    "aura:set": [
     {
      "attribute": "pageComponents"
     }
    ]
   }
  },
  "carousel_SpinnerTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "loadPage": {
     "name": "loadPage",
     "action": "{!c.loadPage}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "spinner"
     },
     {
      "attribute": "pageComponents"
     }
    ],
    "ui:spinner": [
     {
      "aura:id": "testSpinner",
      "isVisible": "false"
     }
    ],
    "ui:carouselPage": [
     {
      "aura:id": "p1"
     },
     {
      "aura:id": "p2"
     },
     {
      "aura:id": "p3"
     }
    ]
   }
  },
  "carousel_Test.cmp": {
   "attributes": {
    "isPageChangeActionCalled": {
     "name": "isPageChangeActionCalled",
     "type": "Boolean",
     "default": "{!false}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:carouselDeprecated": [
     {
      "aura:id": "carousel1",
      "width": "450",
      "height": "450",
      "class": "myclass"
     },
     {
      "aura:id": "carousel2"
     },
     {
      "aura:id": "carouselNavBottom",
      "width": "450",
      "height": "450",
      "pageIndicatorPosition": "bottom"
     },
     {
      "aura:id": "carouselDefaultOverride",
      "width": "450",
      "height": "450",
      "title": "Im A Carousel",
      "defaultPage": "3"
     },
     {
      "aura:id": "carouselMaxPages",
      "width": "450",
      "height": "450"
     },
     {
      "aura:id": "carouselInCarousel",
      "width": "450",
      "height": "450"
     },
     {
      "aura:id": "childCarousel-smaller",
      "width": "100",
      "height": "100"
     },
     {
      "aura:id": "childCarousel-sameDim",
      "width": "450",
      "height": "450"
     },
     {
      "aura:id": "childCarousel-larger",
      "width": "600",
      "height": "600"
     },
     {
      "aura:id": "carouselContinousFlow",
      "width": "450",
      "height": "450",
      "continuousFlow": "{!true}"
     },
     {
      "aura:id": "pgChangeAction",
      "width": "450",
      "height": "450",
      "onPageChange": "{!c.changePageAction}"
     },
     {
      "aura:id": "emptyCarousel",
      "width": "450",
      "height": "450",
      "title": "EMPTY CAROUSEL"
     }
    ],
    "aura:set": [
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     },
     {
      "attribute": "pageComponents"
     }
    ],
    "ui:carouselPageDeprecated": [
     {
      "aura:id": "c1-p1"
     },
     {
      "aura:id": "c1-p2",
      "isDefault": "{!true}"
     },
     {
      "aura:id": "c1-pageWithLongString",
      "title": "PAGE 3"
     },
     {
      "aura:id": "c1-bigImage"
     },
     {
      "aura:id": "c1-mixContent"
     },
     {
      "aura:id": "c1-empty"
     },
     {
      "aura:id": "c1-updateOutput"
     },
     {},
     {
      "aura:id": "cnb-p1"
     },
     {
      "aura:id": "cnb-p2"
     },
     {
      "aura:id": "cnb-p3"
     },
     {
      "title": "Im Page 1"
     },
     {
      "title": "Im Page 2",
      "isDefault": "{!true}"
     },
     {
      "title": "Im Page 3"
     },
     {},
     {
      "aura:id": "cinc-p1"
     },
     {
      "aura:id": "childCarousel-smaller-p1"
     },
     {
      "aura:id": "childCarousel-smaller-p2"
     },
     {
      "aura:id": "childCarousel-smaller-p3"
     },
     {
      "aura:id": "cinc-p2"
     },
     {
      "aura:id": "childCarousel-sameDim-p1"
     },
     {
      "aura:id": "childCarousel-sameDim-p2"
     },
     {
      "aura:id": "childCarousel-sameDim-p3"
     },
     {
      "aura:id": "cinc-p3"
     },
     {
      "aura:id": "childCarousel-larger-p1"
     },
     {
      "aura:id": "childCarousel-larger-p2"
     },
     {
      "aura:id": "childCarousel-larger-p3"
     },
     {},
     {},
     {},
     {
      "aura:id": "cpca-p1"
     },
     {
      "aura:id": "cpca-p2"
     },
     {
      "aura:id": "cpca-p3"
     }
    ],
    "ui:image": [
     {
      "src": "/auraFW/resources/aura/images/auraNoteDemo.png",
      "imageType": "decorative"
     },
     {
      "src": "/auraFW/resources/aura/images/hula.gif",
      "imageType": "decorative"
     }
    ],
    "ui:inputCheckbox": [
     {
      "label": "a checkbox"
     }
    ],
    "ui:inputNumber": [
     {
      "label": "enter a number"
     }
    ],
    "ui:outputText": [
     {
      "value": "hello, i'm an output text component"
     },
     {
      "aura:id": "output",
      "value": "i have something to say..."
     },
     {
      "aura:id": "cdo-p1-output",
      "value": "page 1"
     },
     {
      "aura:id": "cdo-p2-output",
      "value": "page 2"
     },
     {
      "aura:id": "cdo-p3-output",
      "value": "page 3"
     },
     {
      "aura:id": "ccf-p1-output",
      "value": "page 1"
     },
     {
      "aura:id": "ccf-p2-output",
      "value": "page 2"
     },
     {
      "aura:id": "ccf-p3-output",
      "value": "page 3"
     },
     {
      "aura:id": "cpca-p1-output",
      "value": "page 1"
     },
     {
      "aura:id": "cpca-p2-output",
      "value": "page 2"
     },
     {
      "aura:id": "cpca-p3-output",
      "value": "page 3"
     }
    ],
    "ui:button": [
     {
      "aura:id": "btnUpdateOutput",
      "press": "{!c.updateOutput}",
      "label": "update output"
     },
     {
      "aura:id": "btnCreatePages",
      "press": "{!c.addManyPgCarousel}",
      "label": "create pages"
     },
     {
      "aura:id": "btnForceRefresh",
      "press": "{!c.forceRefresh}",
      "label": "refresh"
     }
    ],
    "ui:scroller": [
     {}
    ],
    "aura:iteration": [
     {
      "items": "{!m.pageList}",
      "var": "page"
     }
    ]
   }
  },
  "dataGridPureHtmlTest.cmp": {
   "attributes": {
    "total": {
     "name": "total",
     "type": "Integer",
     "default": "3000"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dataGrid_Actions.cmp": {
   "attributes": {
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "100"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalPages": {
     "name": "totalPages",
     "type": "Integer",
     "default": "5"
    },
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "totalItems": {
     "name": "totalItems",
     "type": "Integer"
    },
    "mode": {
     "name": "mode",
     "type": "String",
     "default": "VIEW"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:dataGrid": [
     {
      "aura:id": "grid",
      "mode": "{!v.mode}",
      "sortBy": "{!v.sortBy}"
     }
    ],
    "aura:set": [
     {
      "attribute": "columns"
     },
     {
      "attribute": "actionDelegate"
     },
     {
      "attribute": "dataProvider"
     }
    ],
    "ui:dataGridSelectionColumn": [
     {}
    ],
    "ui:dataGridColumn": [
     {
      "label": "Id",
      "name": "id",
      "sortable": "true"
     },
     {
      "label": "Subject",
      "name": "subject"
     },
     {
      "label": "Name",
      "name": "name"
     },
     {
      "label": "Related To",
      "name": "relatedTo"
     },
     {
      "label": "Due Date",
      "name": "date"
     }
    ],
    "ui:dataGridActionColumn": [
     {
      "label": "Actions"
     }
    ],
    "ui:actionButton": [
     {
      "name": "disable",
      "label": "Disable",
      "index": "{!index}",
      "disabled": "{!disabled}"
     },
     {
      "name": "enable",
      "label": "Enable",
      "index": "{!index}",
      "disabled": "{!!disabled}"
     },
     {
      "name": "toggleClass",
      "label": "Toggle Class",
      "index": "{!index}",
      "disabled": "{!disabled}"
     }
    ],
    "ui:actionDelegate": [
     {
      "onaction": "{!c.handleAction}"
     }
    ],
    "uitest:dataGrid_TestDataProvider": [
     {
      "aura:id": "provider",
      "sortBy": "{!v.sortBy}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalPages": "{!v.totalPages}",
      "totalItems": "{!v.totalItems}"
     }
    ]
   }
  },
  "dataGrid_ColumnsTest.cmp": {
   "attributes": {
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "10"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalPages": {
     "name": "totalPages",
     "type": "Integer",
     "default": "5"
    },
    "colCount": {
     "name": "colCount",
     "type": "Integer",
     "default": "0"
    },
    "useSecondColumnType": {
     "name": "useSecondColumnType",
     "type": "Boolean",
     "default": "true"
    },
    "appendOrOverwrite": {
     "name": "appendOrOverwrite",
     "type": "String",
     "default": "overwrite"
    },
    "useDynamicColumns": {
     "name": "useDynamicColumns",
     "type": "Boolean",
     "default": "true"
    },
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "totalItems": {
     "name": "totalItems",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:dataGrid"
     },
     {
      "resource": "markup://ui:dataGridColumn"
     }
    ],
    "ui:button": [
     {
      "label": "Add a Column",
      "press": "{!c.addAColumn}",
      "aura:id": "addAColumn"
     },
     {
      "label": "5 Columns",
      "press": "{!c.goTo5Columns}",
      "aura:id": "goTo5Columns"
     },
     {
      "label": "2 Columns",
      "press": "{!c.goTo2Columns}",
      "aura:id": "goTo2Columns"
     },
     {
      "label": "1 Columns",
      "press": "{!c.goTo1Column}",
      "aura:id": "goTo1Column"
     },
     {
      "label": "use wrong name",
      "press": "{!c.goToColumnWithWrongName}",
      "aura:id": "goToColumnWithWrongName"
     },
     {
      "label": "remove Columns",
      "press": "{!c.removeColumns}",
      "aura:id": "removeColumns"
     },
     {
      "label": "Sortable Columns",
      "press": "{!c.goToSortedColumns}",
      "aura:id": "goToSortedColumns"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.useDynamicColumns}"
     }
    ],
    "ui:dataGrid": [
     {
      "aura:id": "grid",
      "mode": "VIEW",
      "sortBy": "{!v.sortBy}"
     },
     {
      "aura:id": "grid",
      "mode": "VIEW",
      "sortBy": "{!v.sortBy}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "else"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataProvider"
     }
    ],
    "uitest:dataGrid_TestDataProvider": [
     {
      "aura:id": "provider",
      "sortBy": "{!v.sortBy}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalPages": "{!v.totalPages}",
      "totalItems": "{!v.totalItems}"
     },
     {
      "aura:id": "provider",
      "sortBy": "{!v.sortBy}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalPages": "{!v.totalPages}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:dataGridColumn": [
     {
      "label": "Item Id",
      "name": "id",
      "sortable": "true",
      "title": "Item Id",
      "width": "100"
     },
     {
      "label": "Item Subject",
      "name": "subject",
      "title": "Item Subject",
      "width": "100"
     }
    ]
   }
  },
  "dataGrid_Test.cmp": {
   "attributes": {
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "100"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalPages": {
     "name": "totalPages",
     "type": "Integer",
     "default": "5"
    },
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "numItems2Create": {
     "name": "numItems2Create",
     "type": "Integer",
     "default": "1"
    },
    "currentRandNum": {
     "name": "currentRandNum",
     "type": "Integer",
     "default": "6000"
    },
    "totalItems": {
     "name": "totalItems",
     "type": "Integer"
    },
    "mode": {
     "name": "mode",
     "type": "String",
     "default": "VIEW"
    },
    "index": {
     "name": "index",
     "type": "Integer"
    },
    "count": {
     "name": "count",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.currentPage}",
     "action": "{!c.handleCurrentPageChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "refireDP",
      "label": "Re-fire datagrid's provide",
      "press": "{!c.replaceData}"
     },
     {
      "aura:id": "addRow",
      "label": "Add row",
      "press": "{!c.handleAddRow}"
     },
     {
      "aura:id": "insert",
      "label": "Insert",
      "press": "{!c.handleInsert}"
     },
     {
      "aura:id": "remove",
      "label": "Remove",
      "press": "{!c.handleRemove}"
     }
    ],
    "ui:inputText": [
     {
      "placeholder": "index",
      "label": "index",
      "labelPosition": "hidden",
      "aura:id": "index",
      "value": "{!v.index}"
     },
     {
      "placeholder": "count",
      "label": "count",
      "labelPosition": "hidden",
      "aura:id": "count",
      "value": "{!v.count}"
     }
    ],
    "ui:dataGrid": [
     {
      "aura:id": "grid",
      "mode": "{!v.mode}",
      "sortBy": "{!v.sortBy}"
     }
    ],
    "aura:set": [
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataProvider"
     }
    ],
    "ui:dataGridSelectionColumn": [
     {}
    ],
    "ui:dataGridColumn": [
     {
      "label": "Id",
      "name": "id",
      "sortable": "true"
     },
     {
      "label": "Subject",
      "name": "subject"
     },
     {
      "label": "Name",
      "name": "name"
     },
     {
      "label": "Related To",
      "name": "relatedTo"
     },
     {
      "label": "Due Date",
      "name": "date"
     }
    ],
    "uitest:dataGrid_TestDataProvider": [
     {
      "aura:id": "provider",
      "sortBy": "{!v.sortBy}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalPages": "{!v.totalPages}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:pagerNextPrevious": [
     {
      "aura:id": "pagerNextPrev",
      "pageCount": "{!v.totalPages}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:pagerPageInfo": [
     {
      "aura:id": "pageInfo",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalItems": "{!v.totalItems}"
     }
    ]
   }
  },
  "dataGrid_TestDataProvider.cmp": {
   "attributes": {
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer"
    },
    "pageSize": {
     "name": "pageSize",
     "type": "Integer"
    },
    "loadData": {
     "name": "loadData",
     "type": "Integer"
    },
    "totalPages": {
     "name": "totalPages",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "provide": {
     "name": "provide",
     "action": "{!c.handleProvide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "dataTable_EmptyItems.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:dataTable": [
     {
      "aura:id": "dataTable"
     }
    ]
   }
  },
  "dataTable_NoHeaderValue.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:dataTable": [
     {
      "aura:id": "dataTable"
     }
    ]
   }
  },
  "datePickerGrid_FirstWeekDayTest.cmp": {
   "attributes": {
    "firstDayOfWeek": {
     "name": "firstDayOfWeek",
     "type": "String",
     "default": ""
    },
    "namesOfWeekdaysStr": {
     "name": "namesOfWeekdaysStr",
     "type": "String",
     "default": ""
    },
    "totalWeekdays": {
     "name": "totalWeekdays",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:datePickerGrid": [
     {
      "aura:id": "grid",
      "selectedDate": "2015-4-15",
      "date": "15",
      "month": "4",
      "year": "2015"
     }
    ]
   }
  },
  "datePickerManager_Test.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "default": "2013-09-25"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputDateTrigger": [
     {
      "aura:id": "inputWDefValue",
      "displayDatePicker": "true",
      "format": "yyyy-MM-dd",
      "value": "{!v.value}"
     },
     {
      "aura:id": "inputWODefValue",
      "class": "date_input_box",
      "displayDatePicker": "true",
      "format": "MM/dd/yyyy"
     }
    ],
    "ui:inputDate": [
     {
      "value": "{!v.value}",
      "aura:id": "inputWNoDatePicker",
      "displayDatePicker": "true",
      "loadDatePicker": "true",
      "format": "yyyy-MM-dd"
     }
    ],
    "ui:datePickerManager": [
     {
      "aura:id": "dpm"
     }
    ]
   }
  },
  "datePicker_PositioningTest.cmp": {
   "attributes": {
    "pos": {
     "name": "pos",
     "type": "Integer",
     "default": "1",
     "description": "Position at which the datePicker currently is"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "backBtn",
      "class": "btn",
      "label": "back",
      "press": "{!c.back}"
     },
     {
      "aura:id": "forwardBtn",
      "class": "btn",
      "label": "forward",
      "press": "{!c.forward}"
     }
    ],
    "ui:inputDate": [
     {
      "aura:id": "inputDate",
      "displayDatePicker": "true"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "pos1",
      "value": ""
     },
     {
      "aura:id": "pos2",
      "class": "pos2",
      "value": "Position 2"
     },
     {
      "aura:id": "pos3",
      "class": "pos3",
      "value": "Position 3"
     },
     {
      "aura:id": "pos4",
      "class": "pos4",
      "value": "Position 4"
     },
     {
      "aura:id": "pos5",
      "class": "pos5",
      "value": "Position 5"
     },
     {
      "aura:id": "pos6",
      "class": "pos6",
      "value": "Position 6"
     },
     {
      "aura:id": "pos7",
      "class": "pos7",
      "value": "Position 7"
     },
     {
      "aura:id": "pos8",
      "class": "pos8",
      "value": "Position 8"
     },
     {
      "aura:id": "pos9",
      "class": "pos9",
      "value": "Position 9"
     }
    ]
   }
  },
  "datePicker_TodayButtonTest.cmp": {
   "attributes": {
    "selectedDate": {
     "name": "selectedDate",
     "type": "DateTime",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "expectedDiffCase": {
     "name": "expectedDiffCase",
     "type": "String",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "timeDiffCase": {
     "name": "timeDiffCase",
     "type": "String",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "todayDate_str": {
     "name": "todayDate_str",
     "type": "String",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "todayDate": {
     "name": "todayDate",
     "type": "String",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "todayDate1": {
     "name": "todayDate1",
     "type": "String",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "todayDate2": {
     "name": "todayDate2",
     "type": "String",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "timezone1": {
     "name": "timezone1",
     "type": "String",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "timezone2": {
     "name": "timezone2",
     "type": "String",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    },
    "renderItem": {
     "name": "renderItem",
     "type": "String",
     "default": "",
     "description": "used to selectively pick the right block to run the tests"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{! v.renderItem == 'testShowTodayDatepickerFlag'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testHideTodayDatepickerFlag'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testDefaultValueOfDatePicker'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testLocalizedTodayWithTimezoneAPI'}"
     }
    ],
    "ui:datePicker": [
     {
      "aura:id": "datePicker",
      "showToday": "true",
      "selectDate": "{!c.handleSelectedDate}",
      "visible": "true"
     },
     {
      "aura:id": "datePicker",
      "showToday": "false",
      "selectDate": "{!c.handleSelectedDate}",
      "visible": "true"
     },
     {
      "aura:id": "datePicker",
      "showToday": "true",
      "selectDate": "{!c.handleSelectedDate}",
      "visible": "true",
      "value": "2015-7-15"
     }
    ]
   }
  },
  "datepicker_RegressionTest.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "default": "2015-07-01"
    },
    "renderItem": {
     "name": "renderItem",
     "type": "String",
     "default": "testAccessibiltyHeaderTagDefValue"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{! v.renderItem == 'testSFXAccessibiltyHeaderTagDefValue'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testSFXAccessibiltyCustomHeaderTag'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testDatepickerSetFocus'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testSingleInputFlag'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testDisabledInputDate'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testCloseOnClickOut'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testOpenOnClickOut'}"
     },
     {
      "isTrue": "{! v.renderItem == 'simpleInputDateTime'}"
     }
    ],
    "ui:datePicker": [
     {
      "aura:id": "standAloneDatepicker",
      "visible": "true"
     },
     {
      "aura:id": "standAloneDatepicker",
      "visible": "true",
      "titleHeadingLevel": "h3"
     },
     {
      "aura:id": "standAloneDatepicker",
      "visible": "true",
      "closeOnClickOut": "true"
     },
     {
      "aura:id": "standAloneDatepicker",
      "visible": "true",
      "closeOnClickOut": "false"
     }
    ],
    "ui:inputDate": [
     {
      "aura:id": "inputDate",
      "displayDatePicker": "true"
     },
     {
      "aura:id": "inputDate",
      "disabled": "true"
     }
    ],
    "ui:inputDateTime": [
     {
      "aura:id": "inputDatetime",
      "useSingleInput": "true",
      "displayDatePicker": "true"
     },
     {
      "aura:id": "inputDatetime_disabled",
      "useSingleInput": "false",
      "displayDatePicker": "true"
     },
     {
      "displayDatePicker": "true"
     }
    ],
    "ui:button": [
     {
      "aura:id": "btnPressMe",
      "label": "Press Me and The Datepicker will disappear"
     },
     {
      "aura:id": "btnPressMe",
      "label": "Press Me and the Datepicker still stays opened"
     }
    ]
   }
  },
  "demoMenuTrigger.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String",
     "default": "Trigger",
     "description": "The text to display as a tooltip."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputURL": [
     {
      "value": "javascript:void(0)",
      "iconClass": "iconClassLink",
      "click": "{!c.relay}",
      "label": "{!v.label}",
      "alt": "{!v.label}",
      "class": "{!v.class}"
     }
    ]
   }
  },
  "demoMenuTriggerDefault.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String",
     "default": "Trigger",
     "description": "The text to display as a tooltip."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "demoRelay.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:menu": [
     {},
     {}
    ],
    "uitest:demoMenuTrigger": [
     {
      "aura:id": "trigger",
      "label": "Select your favorite team"
     }
    ],
    "ui:menuList": [
     {
      "class": "actionMenu",
      "aura:id": "actionMenu"
     },
     {
      "class": "actionMenu",
      "aura:id": "actionMenu2"
     }
    ],
    "ui:actionMenuItem": [
     {
      "class": "actionItem1",
      "aura:id": "actionItem1",
      "label": "Something 1",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItem2",
      "aura:id": "actionItem2",
      "label": "Something 2",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItem3",
      "aura:id": "actionItem3",
      "label": "Something 3",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItem4",
      "aura:id": "actionItem4",
      "label": "Something 4",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItem5",
      "aura:id": "actionItem5",
      "label": "Something 5",
      "click": "{!c.updateTriggerLabel}"
     },
     {
      "class": "actionItem6",
      "aura:id": "actionItem6",
      "label": "Something 6",
      "click": "{!c.updateTriggerLabel}"
     }
    ],
    "uitest:demoMenuTriggerDefault": [
     {
      "aura:id": "trigger-default",
      "label": "Select another team"
     }
    ]
   }
  },
  "dialog_ModalFocusTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "ui:closeDialog",
     "action": "{!c.closeDialog}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:dialogManager": [
     {}
    ],
    "ui:inputText": [
     {
      "aura:id": "resultLabel",
      "class": "resultLabel",
      "value": ""
     }
    ],
    "ui:button": [
     {
      "aura:id": "1",
      "class": "launchDialogButton",
      "label": "Click for Modal!",
      "press": "{!c.openDialog}"
     }
    ],
    "ui:dialog": [
     {
      "clickOutToClose": "false",
      "aura:id": "dialogBoxId",
      "title": "Bang!",
      "description": "Testing Modal Dialog Box",
      "isModal": "true"
     }
    ]
   }
  },
  "dialog_ModalTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "ui:closeDialog",
     "action": "{!c.closeDialog}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:dialogManager": [
     {}
    ],
    "ui:inputText": [
     {
      "aura:id": "resultLabel",
      "class": "resultLabel",
      "value": ""
     }
    ],
    "ui:button": [
     {
      "aura:id": "1",
      "class": "launchDialogButton",
      "label": "Click for Modal!",
      "press": "{!c.openDialog}"
     }
    ],
    "ui:dialog": [
     {
      "clickOutToClose": "false",
      "aura:id": "dialogBoxId",
      "title": "Bang!",
      "description": "Testing Modal Dialog Box",
      "isModal": "true"
     }
    ]
   }
  },
  "dialog_NonModalTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "ui:closeDialog",
     "action": "{!c.closeDialog}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:dialogManager": [
     {}
    ],
    "ui:inputText": [
     {
      "aura:id": "resultLabel",
      "class": "resultLabel",
      "value": ""
     }
    ],
    "ui:button": [
     {
      "aura:id": "1",
      "class": "launchDialogButton",
      "label": "Click for Non-Modal!",
      "press": "{!c.openDialog}"
     }
    ],
    "ui:dialog": [
     {
      "aura:id": "dialogBoxId",
      "title": "BOOM!",
      "description": "Testing Non ModalDialog Box"
     }
    ],
    "aura:set": [
     {
      "attribute": "buttons"
     }
    ],
    "ui:dialogButtons": [
     {
      "defaultButtons": "both"
     }
    ]
   }
  },
  "dialog_NonModalWCheckboxesTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "ui:closeDialog",
     "action": "{!c.closeDialog}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:dialogManager": [
     {}
    ],
    "ui:inputText": [
     {
      "aura:id": "resultLabel",
      "class": "resultLabel",
      "value": ""
     }
    ],
    "ui:button": [
     {
      "aura:id": "1",
      "class": "launchDialogButton",
      "label": "Click for Non-Modal!",
      "press": "{!c.openDialog}"
     }
    ],
    "ui:dialog": [
     {
      "aura:id": "dialogBoxId",
      "title": "BOOM!",
      "description": "Testing Non ModalDialog Box"
     }
    ],
    "aura:set": [
     {
      "attribute": "buttons"
     }
    ],
    "ui:dialogButtons": [
     {
      "defaultButtons": "both"
     }
    ],
    "ui:inputCheckbox": [
     {
      "aura:id": "checkbox",
      "name": "Pudding",
      "class": "checkbox1",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Puppies",
      "class": "checkbox2",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Bananas",
      "class": "checkbox3",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Owls",
      "class": "checkbox4",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Cheese",
      "class": "checkbox5",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Koala",
      "class": "checkbox6",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Water Bottles",
      "class": "checkbox7",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Coffee",
      "class": "checkbox8",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Computers",
      "class": "checkbox9",
      "value": "false"
     },
     {
      "aura:id": "checkbox",
      "name": "Nerds",
      "class": "checkbox10",
      "value": "false"
     }
    ]
   }
  },
  "dragAndDrop_Test.cmp": {
   "attributes": {
    "_dropzoneContext1": {
     "name": "_dropzoneContext1",
     "access": "private",
     "type": "Object"
    },
    "_dropzoneContext2": {
     "name": "_dropzoneContext2",
     "access": "private",
     "type": "Object"
    },
    "_dropzoneContext3": {
     "name": "_dropzoneContext3",
     "access": "private",
     "type": "Object"
    },
    "_dropzoneContext4": {
     "name": "_dropzoneContext4",
     "access": "private",
     "type": "Object"
    },
    "_draggableContext1": {
     "name": "_draggableContext1",
     "access": "private",
     "type": "Object"
    },
    "_draggableContext2": {
     "name": "_draggableContext2",
     "access": "private",
     "type": "Object"
    },
    "_draggableContext3": {
     "name": "_draggableContext3",
     "access": "private",
     "type": "Object"
    },
    "_draggableContext4": {
     "name": "_draggableContext4",
     "access": "private",
     "type": "Object"
    },
    "_accessibilityComponent": {
     "name": "_accessibilityComponent",
     "access": "private",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:dragAndDropAccessibilityMenu": [
     {
      "aura:id": "accessibilityComponent"
     }
    ],
    "ui:dropzone": [
     {
      "inContextOf": "{!v._dropzoneContext1}",
      "class": "sampleList",
      "drop": "{!c.handleDrop}",
      "aura:id": "dropzoneCopy",
      "types": "copy"
     },
     {
      "inContextOf": "{!v._dropzoneContext2}",
      "label": "Dropzone Type: Move",
      "class": "sampleList",
      "drop": "{!c.handleDrop}",
      "aura:id": "dropzoneMove",
      "types": "move"
     },
     {
      "inContextOf": "{!v._dropzoneContext3}",
      "class": "sampleList",
      "drop": "{!c.handleDrop}",
      "aura:id": "dropzoneNone",
      "types": ""
     },
     {
      "inContextOf": "{!v._dropzoneContext4}",
      "label": "Dropzone Type: Move2",
      "class": "sampleList",
      "drop": "{!c.handleDrop}",
      "aura:id": "dropzoneMove2",
      "types": "move"
     }
    ],
    "ui:infinitelist": [
     {
      "aura:id": "list",
      "itemVar": "item"
     },
     {
      "aura:id": "list",
      "itemVar": "item"
     },
     {
      "aura:id": "list",
      "itemVar": "item"
     },
     {
      "aura:id": "list",
      "itemVar": "item"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "uiExamples:dragAndDropProvider": [
     {
      "prefix": "Draggable Type: None",
      "count": "1"
     },
     {
      "prefix": "Draggable Type: Copy",
      "count": "1"
     },
     {
      "prefix": "Draggable Type: Move",
      "count": "1"
     },
     {
      "prefix": "Draggable Type: Move2",
      "count": "1"
     }
    ],
    "ui:draggable": [
     {
      "inContextOf": "{!v._draggableContext1}",
      "dragEnd": "{!c.handleDragEnd}",
      "dataTransfer": "{!item}",
      "class": "sampleCard",
      "dragClass": "dragging",
      "aura:id": "draggableNone",
      "type": "",
      "accessibilityComponent": "{!v._accessibilityComponent}"
     },
     {
      "inContextOf": "{!v._draggableContext2}",
      "dataTransfer": "{!item}",
      "dragEnd": "{!c.handleDragEnd}",
      "class": "sampleCard",
      "dragClass": "dragging",
      "aura:id": "draggableCopy",
      "type": "copy",
      "accessibilityComponent": "{!v._accessibilityComponent}"
     },
     {
      "inContextOf": "{!v._draggableContext3}",
      "dataTransfer": "{!item}",
      "dragEnd": "{!c.handleDragEnd}",
      "class": "sampleCard",
      "dragClass": "dragging",
      "aura:id": "draggableMove",
      "type": "move",
      "accessibilityComponent": "{!v._accessibilityComponent}"
     },
     {
      "inContextOf": "{!v._draggableContext4}",
      "dataTransfer": "{!item}",
      "dragEnd": "{!c.handleDragEnd}",
      "class": "sampleCard",
      "dragClass": "dragging",
      "aura:id": "draggableMove2",
      "type": "move",
      "accessibilityComponent": "{!v._accessibilityComponent}"
     }
    ]
   }
  },
  "dragAndDrop_TestProvider.cmp": {
   "attributes": {
    "prefix": {
     "name": "prefix",
     "type": "String",
     "default": "Acme"
    },
    "count": {
     "name": "count",
     "type": "Integer",
     "default": "5"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "hasModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "image_ErrorTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:image": [
     {
      "aura:id": "image1",
      "title": "broken image with onerror",
      "src": "/auraFW/resources/aura/brokenImageUrl.png",
      "alt": "broken",
      "onerror": "{!c.hideImage1}"
     },
     {
      "aura:id": "image2",
      "title": "unbroken image with onerror",
      "src": "/auraFW/resources/aura/auralogo.png",
      "alt": "unbroken",
      "onerror": "{!c.hideImage2}"
     },
     {
      "aura:id": "image3",
      "title": "broken image without onerror",
      "src": "/auraFW/resources/aura/brokenImageUrl.png",
      "alt": "broken"
     }
    ]
   }
  },
  "image_OnLoadTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:image": [
     {
      "aura:id": "image",
      "alt": "image",
      "onload": "{!c.callOnLoad}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputStatus",
      "value": ""
     }
    ],
    "ui:button": [
     {
      "aura:id": "loadButton",
      "label": "Load New Image",
      "press": "{!c.loadNewImage}"
     }
    ]
   }
  },
  "infiniteDataProvider.cmp": {
   "attributes": {
    "listType": {
     "name": "listType",
     "type": "String"
    },
    "getDataFromServer": {
     "name": "getDataFromServer",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "infiniteDataProvider_StorableActions.cmp": {
   "attributes": {
    "cachedDataRows": {
     "name": "cachedDataRows",
     "type": "Integer"
    },
    "serverDataRows": {
     "name": "serverDataRows",
     "type": "Integer"
    },
    "cachedTargetPage": {
     "name": "cachedTargetPage",
     "type": "Integer"
    },
    "serverTargetPage": {
     "name": "serverTargetPage",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "infiniteListCscc_Test.cmp": {
   "attributes": {
    "isDoneRendering": {
     "name": "isDoneRendering",
     "type": "Boolean",
     "default": "{!false}"
    },
    "isGetDataFromServer": {
     "name": "isGetDataFromServer",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:infiniteList": [
     {
      "aura:id": "list",
      "itemVar": "row",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}",
      "listComplete": "{!c.handleListComplete}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "uitest:infiniteDataProvider": [
     {
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}",
      "getDataFromServer": "{!v.isGetDataFromServer}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "btnShowMore",
      "label": "show more",
      "press": "{!c.showMore}"
     }
    ]
   }
  },
  "infiniteListRow_Test.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "showMore": {
     "name": "showMore",
     "action": "{!c.showMore}"
    },
    "refresh": {
     "name": "refresh",
     "action": "{!c.refresh}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:infiniteList": [
     {
      "aura:id": "list",
      "itemVar": "row",
      "enableRowSwipe": "true",
      "onRowOpen": "{!c.openRow}",
      "onRowClose": "{!c.closeRow}",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "swipeBody"
     }
    ],
    "uitest:infiniteDataProvider": [
     {
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:infiniteListRow": [
     {}
    ],
    "ui:button": [
     {
      "aura:id": "btnShowMore",
      "class": "btnShowMore",
      "label": "show more",
      "press": "{!c.showMore}"
     },
     {
      "aura:id": "btnRefresh",
      "class": "btnRefresh",
      "label": "refresh",
      "press": "{!c.refresh}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "rowOpened",
      "class": "rowOpened",
      "value": "No Rows opened"
     },
     {
      "aura:id": "rowClosed",
      "class": "rowClosed",
      "value": "No Rows closed"
     }
    ]
   }
  },
  "infiniteList_ScrollerTest.cmp": {
   "attributes": {
    "extendedPullAtrib": {
     "name": "extendedPullAtrib",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:scroller": [
     {
      "aura:id": "scroller1",
      "onPullToRefresh": "{!c.refresh}",
      "onPullToShowMore": "{!c.showMore}",
      "class": "test"
     },
     {
      "aura:id": "scroller2",
      "onPullToRefresh": "{!c.refresh2}",
      "onPullToShowMore": "{!c.showMore2}",
      "class": "test"
     },
     {
      "aura:id": "scroller3",
      "class": "test"
     }
    ],
    "ui:infiniteList": [
     {
      "aura:id": "list",
      "itemVar": "row",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     },
     {
      "aura:id": "list2",
      "itemVar": "row",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     },
     {
      "aura:id": "list3",
      "itemVar": "row",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "uitest:infiniteDataProvider": [
     {
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     },
     {
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}",
      "listType": "single"
     },
     {
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}",
      "listType": "single"
     }
    ]
   }
  },
  "infiniteList_StorableActionsTest.cmp": {
   "attributes": {
    "cachedDataRows": {
     "name": "cachedDataRows",
     "type": "Integer"
    },
    "serverDataRows": {
     "name": "serverDataRows",
     "type": "Integer"
    },
    "cachedTargetPage": {
     "name": "cachedTargetPage",
     "type": "Integer"
    },
    "serverTargetPage": {
     "name": "serverTargetPage",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:infiniteList": [
     {
      "aura:id": "list",
      "itemVar": "row",
      "currentPage": "{!v.currentPage}",
      "pageSize": "3",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "uitest:infiniteDataProvider_StorableActions": [
     {
      "cachedDataRows": "{!v.cachedDataRows}",
      "serverDataRows": "{!v.serverDataRows}",
      "cachedTargetPage": "{!v.cachedTargetPage}",
      "serverTargetPage": "{!v.serverTargetPage}",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     }
    ]
   }
  },
  "infiniteList_Test.cmp": {
   "attributes": {
    "showMoreCallback": {
     "name": "showMoreCallback",
     "type": "boolean",
     "default": "false"
    },
    "refreshCallBack": {
     "name": "refreshCallBack",
     "type": "boolean",
     "default": "false"
    },
    "loaded": {
     "name": "loaded",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "refresh": {
     "name": "refresh",
     "action": "{!c.refresh}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:infiniteList": [
     {
      "aura:id": "list",
      "itemVar": "row",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}",
      "listComplete": "{!c.listComplete}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "uitest:infiniteDataProvider": [
     {
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "btnShowMore",
      "label": "show more",
      "press": "{!c.showMore}"
     },
     {
      "aura:id": "btnRefresh",
      "label": "refresh",
      "press": "{!c.refresh}"
     }
    ]
   }
  },
  "inputCheckBox_Test.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputCheckbox": [
     {
      "aura:id": "checkbox",
      "label": "CheckBox",
      "change": "{!c.changed}",
      "click": "{!c.clicked}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "changedEvt_ot",
      "value": "Default Value"
     },
     {
      "aura:id": "clickedEvt_ot",
      "value": "Default Value"
     }
    ]
   }
  },
  "inputCurrency_FormattingWithNullOrEmptyStringTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputCurrency": [
     {
      "aura:id": "inputCurrencyEmpty",
      "value": "{!m.stringEmpty}"
     },
     {
      "aura:id": "inputCurrencyNull",
      "value": "{!m.stringNull}"
     }
    ]
   }
  },
  "inputDateRange_Test.cmp": {
   "attributes": {
    "startDate": {
     "name": "startDate",
     "type": "String"
    },
    "endDate": {
     "name": "endDate",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputDateRange": [
     {
      "aura:id": "datePickerTestCmpRange",
      "displayDatePicker": "true",
      "format": "yyyy-MM-dd",
      "startDate": "{!v.startDate}",
      "endDate": "{!v.endDate}",
      "startInputPlaceholder": "Start Date",
      "endInputPlaceholder": "End Date"
     }
    ]
   }
  },
  "inputDateTime_Test.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    },
    "format": {
     "name": "format",
     "type": "String"
    },
    "dateFormat": {
     "name": "dateFormat",
     "type": "String"
    },
    "timeFormat": {
     "name": "timeFormat",
     "type": "String"
    },
    "timezone": {
     "name": "timezone",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputDateTime": [
     {
      "aura:id": "dateTimePickerTest",
      "label": "label",
      "displayDatePicker": "true",
      "class": "date_input_box",
      "value": "{!v.value}",
      "format": "{!v.format}",
      "dateFormat": "{!v.dateFormat}",
      "timeFormat": "{!v.timeFormat}",
      "timezone": "{!v.timezone}"
     }
    ]
   }
  },
  "inputDate_Test.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    },
    "format": {
     "name": "format",
     "default": "yyyy-MM-dd",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.value}",
     "action": "{!c.valueChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "class": "outputStatus",
      "aura:id": "outputStatus",
      "value": ""
     }
    ],
    "ui:label": [
     {
      "for": "datePickerTestCmp",
      "label": "date picker with label"
     }
    ],
    "ui:inputDate": [
     {
      "aura:id": "datePickerTestCmp",
      "displayDatePicker": "true",
      "class": "date_input_box",
      "format": "{!v.format}",
      "value": "{!v.value}"
     }
    ]
   }
  },
  "inputDate_TestCreation.cmp": {
   "attributes": {
    "addl": {
     "name": "addl",
     "type": "String"
    },
    "count": {
     "name": "count",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Add New InputDate",
      "press": "{!c.addInputDate}"
     }
    ]
   }
  },
  "inputDefaultErrorDynamic_test.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String",
     "description": "label of the property"
    },
    "name": {
     "name": "name",
     "type": "String",
     "description": "name of the property"
    },
    "value": {
     "name": "value",
     "type": "Integer",
     "description": "value of the property"
    },
    "newClass": {
     "name": "newClass",
     "type": "String",
     "description": "name of the property"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputNumber": [
     {
      "label": "{!v.label}",
      "value": "{!v.value}",
      "class": "{!v.newClass}",
      "aura:id": "myInputNumber"
     }
    ]
   }
  },
  "inputDefaultError_Test.cmp": {
   "attributes": {
    "caseToRender": {
     "name": "caseToRender",
     "type": "String",
     "default": "default"
    },
    "errors": {
     "name": "errors",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {
    "validateInput": {
     "errors": {
      "name": "errors",
      "type": "List"
     }
    }
   },
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.caseToRender == 'dynamic' }"
     },
     {
      "isTrue": "{!v.caseToRender == 'default' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'customUsage'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'staticCustomError'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'select' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'search' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'textArea' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'date' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'dateTime'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'radio' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'range' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'autoCompleteTextArea' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'autoCompleteText' || v.caseToRender == 'all'}"
     },
     {
      "isTrue": "{!v.caseToRender == 'text' || v.caseToRender == 'all'}"
     }
    ],
    "ui:button": [
     {
      "label": "New",
      "aura:id": "new_button",
      "press": "{!c.createNew}"
     },
     {
      "label": "validate",
      "press": "{!c.validateInput}",
      "aura:id": "validate"
     }
    ],
    "ui:label": [
     {
      "label": "testing inputNumber, inputCurrency, inputPercent"
     },
     {
      "for": "defaultValid",
      "label": "testingInvalidInput"
     },
     {
      "for": "defaultInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "customUsageInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "staticCustomErrorInvalid",
      "label": "staticCustomError"
     },
     {
      "for": "selectInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "searchInvalid",
      "label": "testingInvalidInput"
     },
     {
      "label": "Test for inputRichText"
     },
     {
      "for": "textAreaInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "dateInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "dateTimeInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "radioInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "rangeInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "autoCompleteTextAreaInvalid",
      "label": "testingInvalidInput"
     },
     {
      "for": "autoCompleteTextInvalid",
      "label": "testingInvalidInput"
     },
     {
      "label": "Test for inputEmail, inputPhone, inputSecret, InputURL"
     },
     {
      "for": "textInvalid",
      "label": "testingInvalidInput"
     }
    ],
    "ui:inputNumber": [
     {
      "class": "formInput",
      "aura:id": "defaultValid",
      "value": "20",
      "placeholder": "at least 6 chars"
     },
     {
      "class": "formInput",
      "aura:id": "defaultInvalid",
      "value": "100000",
      "placeholder": "at least 6 chars"
     },
     {
      "class": "formInput",
      "aura:id": "customUsageInvalid",
      "value": "100000",
      "placeholder": "at least 6 chars"
     },
     {
      "class": "formInput",
      "aura:id": "staticCustomErrorInvalid",
      "value": "100000",
      "placeholder": "at least 6 chars"
     }
    ],
    "aura:set": [
     {
      "attribute": "errorComponent"
     },
     {
      "attribute": "errorComponent"
     }
    ],
    "ui:inputDefaultError": [
     {}
    ],
    "uitest:inputErrorComponent": [
     {}
    ],
    "ui:inputSelect": [
     {
      "aura:id": "selectInvalid"
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "hello1b",
      "label": "hello1b"
     },
     {
      "text": "hello2b",
      "label": "hello2b"
     },
     {
      "text": "hello3b",
      "label": "hello3b"
     },
     {
      "text": "hello4b",
      "label": "hello4b"
     }
    ],
    "ui:inputSearch": [
     {
      "aura:id": "searchInvalid"
     }
    ],
    "ui:inputTextArea": [
     {
      "aura:id": "textAreaInvalid"
     }
    ],
    "ui:inputDate": [
     {
      "aura:id": "dateInvalid"
     }
    ],
    "ui:inputDateTime": [
     {
      "aura:id": "dateTimeInvalid"
     }
    ],
    "ui:inputRadio": [
     {
      "aura:id": "radioInvalid"
     }
    ],
    "ui:inputRange": [
     {
      "aura:id": "rangeInvalid"
     }
    ],
    "ui:inputTextAreaForAutoComplete": [
     {
      "aura:id": "autoCompleteTextAreaInvalid"
     }
    ],
    "ui:inputTextForAutoComplete": [
     {
      "aura:id": "autoCompleteTextInvalid"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "textInvalid"
     }
    ]
   }
  },
  "inputErrorComponent.cmp": {
   "attributes": {
    "errors": {
     "name": "errors",
     "type": "Object[]",
     "description": "The list of errors to be displayed."
    },
    "ariaDescribedBy": {
     "name": "ariaDescribedBy",
     "type": "String",
     "default": ""
    },
    "domId": {
     "name": "domId",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{! !empty(v.errors)}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.errors}",
      "var": "error"
     }
    ]
   }
  },
  "inputError_CustomTest.cmp": {
   "attributes": {
    "errorMessage": {
     "name": "errorMessage",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "inputCmp",
      "value": "",
      "onError": "{!c.handleError}",
      "onClearErrors": "{!c.handleClearError}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputStatus",
      "value": ""
     }
    ],
    "ui:button": [
     {
      "label": "Server error - Fire onError event",
      "press": "{!c.doServerErrorFireOnErrorEvent}"
     },
     {
      "label": "Clear error - Fire onClearErrors event",
      "press": "{!c.clearErrorFireOnClearErrorsEvent}"
     }
    ]
   }
  },
  "inputError_Test.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "inputCmp",
      "value": ""
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputStatus",
      "value": ""
     }
    ],
    "ui:button": [
     {
      "label": "Error - From server",
      "press": "{!c.doServerError}"
     },
     {
      "label": "Error - No event fire",
      "press": "{!c.doErrorNoEventFire}"
     },
     {
      "label": "Clear error - No event fire",
      "press": "{!c.clearErrorNoEventFire}"
     },
     {
      "label": "Error - No error message",
      "press": "{!c.doErrorNoErrorMsg}"
     },
     {
      "label": "Clear error - Null errors message",
      "press": "{!c.clearErrorNullErrorMsg}"
     }
    ]
   }
  },
  "inputLocalizedNumber_Test.cmp": {
   "attributes": {
    "cmpType": {
     "name": "cmpType",
     "type": "string",
     "default": "Decimal"
    },
    "ref": {
     "name": "ref",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputNumber": [
     {
      "aura:id": "inputValue",
      "value": "{!m.decimal}",
      "step": "0.001",
      "updateOn": "keyup"
     }
    ],
    "ui:button": [
     {
      "label": "submit",
      "press": "{!c.submit}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputValue",
      "value": ""
     }
    ]
   }
  },
  "inputMultiSelect_NestedOptionsTest.cmp": {
   "attributes": {
    "testCmpName": {
     "name": "testCmpName",
     "type": "string",
     "default": "SelectMulti"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "multiple": "true",
      "aura:id": "SelectMulti",
      "value": "{!m.selectValue}",
      "updateOn": "blur"
     }
    ],
    "ui:inputSelectOption": [
     {
      "name": "Opt1",
      "value": "false",
      "text": "option1",
      "label": "Option1"
     },
     {
      "name": "Opt2",
      "value": "false",
      "text": "option2",
      "label": "Option2"
     },
     {
      "name": "Opt3",
      "value": "false",
      "text": "option3",
      "label": "Option3"
     }
    ],
    "auratest:baseInputTest": [
     {
      "cmpType": "{!v.testCmpName}",
      "ref": "{!m.selectValue}"
     }
    ]
   }
  },
  "inputMultiSelect_OverridingDefBehaviorTest.cmp": {
   "attributes": {
    "testCmpName": {
     "name": "testCmpName",
     "type": "string",
     "default": "SelectMulti"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "multiple": "true",
      "aura:id": "SelectMulti",
      "updateOn": "blur"
     }
    ],
    "ui:inputSelectOption": [
     {
      "aura:id": "option1",
      "name": "Opt1",
      "value": "false",
      "text": "option1",
      "label": "Option1"
     },
     {
      "aura:id": "option2",
      "name": "Opt2",
      "value": "true",
      "text": "option2",
      "label": "Option2"
     },
     {
      "aura:id": "option3",
      "name": "Opt3",
      "value": "true",
      "text": "option3",
      "label": "Option3"
     }
    ]
   }
  },
  "inputMultiSelect_Test.cmp": {
   "attributes": {
    "testCmpName": {
     "name": "testCmpName",
     "type": "string",
     "default": "SelectMulti"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "uitest:inputSelect_Extend": [
     {
      "multiple": "true",
      "aura:id": "SelectMulti",
      "options": "{!m.selectOptions}",
      "value": "{!m.selectValue}",
      "updateOn": "blur"
     }
    ],
    "auratest:baseInputTest": [
     {
      "cmpType": "{!v.testCmpName}",
      "ref": "{!m.selectValue}"
     }
    ]
   }
  },
  "inputNumber_FormattingWithNullOrEmptyStringTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputNumber": [
     {
      "aura:id": "inputNumberEmpty",
      "value": "{!m.stringEmpty}"
     },
     {
      "aura:id": "inputNumberNull",
      "value": "{!m.stringNull}"
     }
    ]
   }
  },
  "inputNumber_Test.cmp": {
   "attributes": {
    "testCmpName": {
     "name": "testCmpName",
     "type": "string",
     "default": "Number"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputNumber": [
     {
      "aura:id": "Number",
      "value": "{!m.number}",
      "updateOn": "keyup"
     },
     {
      "aura:id": "UnsetNumber",
      "updateOn": "keyup"
     }
    ],
    "auratest:baseInputTest": [
     {
      "cmpType": "{!v.testCmpName}",
      "ref": "{!m.number}"
     }
    ]
   }
  },
  "inputPercent_FormattingWithNullOrEmptyStringTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputPercent": [
     {
      "aura:id": "inputPercentEmpty",
      "value": "{!m.stringEmpty}"
     },
     {
      "aura:id": "inputPercentNull",
      "value": "{!m.stringNull}"
     }
    ]
   }
  },
  "inputRadio_Test.cmp": {
   "attributes": {
    "myValueString": {
     "name": "myValueString",
     "type": "String"
    },
    "myValueBoolean": {
     "name": "myValueBoolean",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "yup",
      "press": "{!c.onYup}",
      "label": "Yup"
     },
     {
      "aura:id": "nope",
      "press": "{!c.onNope}",
      "label": "Nope"
     }
    ],
    "ui:inputRadio": [
     {
      "aura:id": "expYup",
      "change": "{!c.changeHandlerString}",
      "name": "myValueStringGroup",
      "text": "yup",
      "value": "{!equals(v.myValueString, 'yup')}",
      "label": "Yup (String)",
      "labelPosition": "right"
     },
     {
      "aura:id": "expNope",
      "change": "{!c.changeHandlerString}",
      "name": "myValueStringGroup",
      "text": "nope",
      "value": "{!equals(v.myValueString, 'nope')}",
      "label": "Nope (String)",
      "labelPosition": "right"
     },
     {
      "aura:id": "booleanYup",
      "change": "{!c.changeHandlerBoolean}",
      "name": "myValueBooleanGroup",
      "text": "true",
      "value": "{!v.myValueBoolean}",
      "label": "Yup (Boolean)",
      "labelPosition": "right"
     },
     {
      "aura:id": "booleanNope",
      "change": "{!c.changeHandlerBoolean}",
      "name": "myValueBooleanGroup",
      "text": "false",
      "value": "{!!v.myValueBoolean}",
      "label": "Nope (Boolean)",
      "labelPosition": "right"
     }
    ]
   }
  },
  "inputRichText_DisableTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "disableBtn",
      "label": "disable",
      "press": "{!c.toggle}"
     }
    ],
    "ui:inputRichText": [
     {
      "aura:id": "rt",
      "value": "abc"
     }
    ]
   }
  },
  "inputRichText_ExtendedTest.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "default": "abc"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputRichText_Test.cmp": {
   "attributes": {
    "testCmpName": {
     "name": "testCmpName",
     "type": "String",
     "default": "Text"
    },
    "testContent": {
     "name": "testContent",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputRichText": [
     {
      "aura:id": "Text",
      "value": "{!v.testContent}"
     },
     {
      "aura:id": "rtCustom"
     }
    ],
    "auratest:baseInputTest": [
     {
      "aura:id": "base",
      "cmpType": "{!v.testCmpName}",
      "ref": "{!v.testContent}"
     }
    ]
   }
  },
  "inputSearch_HandlingSearchEvent.cmp": {
   "attributes": {
    "searched": {
     "name": "searched",
     "type": "boolean",
     "default": "false"
    },
    "value": {
     "name": "value",
     "type": "string"
    },
    "showClear": {
     "name": "showClear",
     "type": "boolean",
     "default": "{!false}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputSearch": [
     {
      "aura:id": "searchCmp",
      "class": "search",
      "updateOn": "search",
      "search": "{!c.doSearch}",
      "value": "{!v.value}",
      "showClear": "{!v.showClear}"
     }
    ]
   }
  },
  "inputSelect_CheckWarnings.cmp": {
   "attributes": {
    "case": {
     "name": "case",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.case == 'badsel'}"
     }
    ],
    "ui:inputSelect": [
     {
      "aura:id": "dynamicSelect"
     },
     {
      "options": "{!m.selectOptions}"
     }
    ]
   }
  },
  "inputSelect_DynamicOptions.cmp": {
   "attributes": {
    "whichOption": {
     "name": "whichOption",
     "type": "String",
     "default": "4"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "aura:id": "dynamicSelect",
      "class": "dynamicSelect"
     },
     {
      "aura:id": "inputSelectIteration"
     }
    ],
    "aura:iteration": [
     {
      "items": "1,2,3,4,5",
      "var": "item"
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "{!item}",
      "label": "{!item}"
     }
    ]
   }
  },
  "inputSelect_Extend.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.options}",
     "action": "{!c.optionsChange}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "inputSelect_OptionsInBody.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "class": "single",
      "aura:id": "InputSelectSingle",
      "label": "test"
     },
     {
      "multiple": "true",
      "class": "multiple",
      "size": "5",
      "aura:id": "InputSelectMultiple",
      "updateOn": "blur"
     }
    ],
    "ui:inputSelectOptionGroup": [
     {
      "label": "Mammal"
     },
     {
      "label": "Insect"
     },
     {
      "label": "Mammal"
     },
     {
      "label": "Insect"
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion",
      "value": "true"
     },
     {
      "text": "Bear",
      "label": "Bear"
     },
     {
      "text": "Butterfly"
     },
     {
      "text": "Dragonfly"
     },
     {
      "text": "Emmet",
      "label": "Ant"
     },
     {
      "text": "Cockroach",
      "label": "Cockroach",
      "disabled": "true"
     },
     {
      "text": "Tiger",
      "label": "Tiger"
     },
     {
      "text": "Lion",
      "label": "Lion",
      "value": "true"
     },
     {
      "text": "Bear",
      "label": "Bear",
      "value": "true"
     },
     {
      "text": "Butterfly"
     },
     {
      "text": "Dragonfly"
     },
     {
      "text": "Emmet",
      "label": "Ant"
     },
     {
      "text": "Cockroach",
      "label": "Cockroach",
      "disabled": "true"
     }
    ]
   }
  },
  "inputSelect_OptionsInBodySetValue.cmp": {
   "attributes": {
    "cities": {
     "name": "cities",
     "type": "String[]",
     "default": "Toronto,Vancouver,Montreal"
    },
    "condition": {
     "name": "condition",
     "type": "Boolean"
    },
    "multi": {
     "name": "multi",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "multiple": "{!v.multi}",
      "aura:id": "InputSelectIteration",
      "class": "InputSelectIteration"
     },
     {
      "multiple": "{!v.multi}",
      "aura:id": "InputSelectCondition",
      "class": "InputSelectCondition"
     },
     {
      "multiple": "{!v.multi}",
      "aura:id": "InputSelectRenderIf",
      "class": "InputSelectRenderIf"
     },
     {
      "multiple": "{!v.multi}",
      "aura:id": "InputSelectRenderIfCondition",
      "class": "InputSelectRenderIfCondition"
     },
     {
      "multiple": "{!v.multi}",
      "aura:id": "InputSelectOptionGroup",
      "class": "InputSelectOptionGroup"
     },
     {
      "multiple": "{!v.multi}",
      "aura:id": "InputSelectNested",
      "class": "InputSelectNested"
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "Quebec",
      "label": "Quebec",
      "class": "Quebec"
     },
     {
      "text": "{!city}",
      "label": "{!city}",
      "class": "{!city}"
     },
     {
      "text": "Quebec",
      "label": "Quebec"
     },
     {
      "text": "Toronto",
      "label": "Toronto"
     },
     {
      "text": "Montreal",
      "label": "Montreal"
     },
     {
      "text": "Quebec",
      "label": "Quebec"
     },
     {
      "text": "Toronto",
      "label": "Toronto"
     },
     {
      "text": "Montreal",
      "label": "Montreal"
     },
     {
      "text": "{!city}",
      "label": "{!city}"
     },
     {
      "text": "Ottawa",
      "label": "Ottawa"
     },
     {
      "text": "{!city}",
      "label": "{!city}"
     },
     {
      "text": "Quebec",
      "label": "Quebec"
     },
     {
      "text": "Toronto",
      "label": "Toronto"
     },
     {
      "text": "Ottawa",
      "label": "Ottawa"
     },
     {
      "text": "Quebec",
      "label": "Quebec"
     },
     {
      "text": "{!city}",
      "label": "{!city}"
     },
     {
      "text": "Ottawa",
      "label": "Ottawa"
     },
     {
      "text": "{!city}",
      "label": "{!city}"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "Iteration",
      "items": "{!v.cities}",
      "var": "city"
     },
     {
      "aura:id": "Iteration",
      "items": "{!v.cities}",
      "var": "city"
     },
     {
      "aura:id": "Iteration",
      "items": "{!v.cities}",
      "var": "city"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.condition}"
     },
     {
      "isTrue": "{!city == 'Toronto'}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ],
    "aura:renderIf": [
     {
      "isTrue": "{!v.condition}"
     },
     {
      "isTrue": "{!city == 'Toronto'}"
     }
    ],
    "ui:inputSelectOptionGroup": [
     {
      "label": "Ontario"
     },
     {
      "label": "Ontario"
     }
    ]
   }
  },
  "inputSelect_SemiColonOptions.cmp": {
   "attributes": {
    "selectedValue": {
     "name": "selectedValue",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "aura:id": "inputSelectSemicolon",
      "change": "{!c.onSelectChange}"
     }
    ],
    "ui:label": [
     {
      "aura:id": "labelSelectedValue",
      "label": "{!v.selectedValue}"
     }
    ]
   }
  },
  "inputSelect_UseOptionsAtribTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "aura:id": "dynamicSelect"
     },
     {
      "options": "{!m.selectOptions}",
      "aura:id": "dynamicSelectModel"
     }
    ]
   }
  },
  "inputTextArea_MaxLength.cmp": {
   "attributes": {
    "maxlength": {
     "name": "maxlength",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputTextArea": [
     {
      "class": "textArea",
      "aura:id": "textArea",
      "maxlength": "{!v.maxlength}"
     }
    ]
   }
  },
  "inputTextArea_UpdateOnTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputTextArea": [
     {
      "aura:id": "textAreaWithLabel",
      "label": "textAreaWithLabel",
      "value": "textAreaWithLabel",
      "updateOn": "keyup"
     }
    ],
    "ui:outputText": [
     {
      "value": ""
     }
    ]
   }
  },
  "inputTextArea_UpdateOnValueChange.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputTextArea": [
     {
      "aura:id": "textAreaWithLabel",
      "label": "textAreaWithLabel",
      "keyup": "{!c.onChange}",
      "value": "{!v.value}"
     }
    ],
    "ui:outputText": [
     {
      "value": ""
     }
    ]
   }
  },
  "inputText_CutCopyPasteEventTest.cmp": {
   "attributes": {
    "copyEventFired": {
     "name": "copyEventFired",
     "type": "boolean",
     "default": "false"
    },
    "cutEventFired": {
     "name": "cutEventFired",
     "type": "boolean",
     "default": "false"
    },
    "pasteEventFired": {
     "name": "pasteEventFired",
     "type": "boolean",
     "default": "false"
    },
    "value": {
     "name": "value",
     "type": "string",
     "default": "testText"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "inputCmp",
      "copy": "{!c.doCopy}",
      "paste": "{!c.doPaste}",
      "cut": "{!c.doCut}",
      "value": "{!v.value}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputStatus",
      "value": ""
     }
    ]
   }
  },
  "inputText_MaxLength.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "maxlength": "5"
     }
    ]
   }
  },
  "inputText_NoMaxLength.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {}
    ]
   }
  },
  "inputText_updateOnTest.cmp": {
   "attributes": {
    "isDomEventSet": {
     "name": "isDomEventSet",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "blur",
      "class": "blur",
      "value": "{!m.string}",
      "updateOn": "blur",
      "blur": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "change",
      "class": "change",
      "value": "{!m.string}",
      "updateOn": "change"
     },
     {
      "aura:id": "click",
      "class": "click",
      "value": "{!m.string}",
      "updateOn": "click",
      "click": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "dblclick",
      "class": "dblclick",
      "value": "{!m.string}",
      "updateOn": "dblclick",
      "dblclick": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "focus",
      "class": "focus",
      "value": "{!m.string}",
      "updateOn": "focus",
      "focus": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mousedown",
      "class": "mousedown",
      "value": "{!m.string}",
      "updateOn": "mousedown",
      "mousedown": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mousemove",
      "class": "mousemove",
      "value": "{!m.string}",
      "updateOn": "mousemove",
      "mousemove": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mouseout",
      "class": "mouseout",
      "value": "{!m.string}",
      "updateOn": "mouseout",
      "mouseout": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mouseover",
      "class": "mouseover",
      "value": "{!m.string}",
      "updateOn": "mouseover",
      "mouseover": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mouseup",
      "class": "mouseup",
      "value": "{!m.string}",
      "updateOn": "mouseup",
      "mouseup": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "keydown",
      "class": "keydown",
      "value": "{!m.string}",
      "updateOn": "keydown",
      "keydown": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "keypress",
      "class": "keypress",
      "value": "{!m.string}",
      "updateOn": "keypress",
      "keypress": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "keyup",
      "class": "keyup",
      "value": "{!m.string}",
      "updateOn": "keyup",
      "keyup": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "select",
      "class": "select",
      "value": "{!m.string}",
      "updateOn": "select"
     },
     {
      "aura:id": "invalid",
      "class": "invalid",
      "value": "{!m.string}",
      "updateOn": "invalid"
     },
     {
      "aura:id": "keyup2",
      "class": "keyup2",
      "value": "{!m.string}",
      "updateOn": "keyup",
      "keypress": "{!c.inspectKeyEvent}",
      "mousedown": "{!c.inspectMouseEvent}"
     },
     {
      "aura:id": "inputwithLabel",
      "label": "inputwithLabel",
      "value": "inputwithLabel",
      "updateOn": "keyup"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!m.string}"
     },
     {
      "aura:id": "outputValue",
      "class": "outputValue",
      "value": ""
     }
    ]
   }
  },
  "inputText_updateOnWithLabelTest.cmp": {
   "attributes": {
    "isDomEventSet": {
     "name": "isDomEventSet",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "blur",
      "label": "blur",
      "class": "blur",
      "value": "{!m.string}",
      "updateOn": "blur",
      "blur": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "change",
      "label": "change",
      "class": "change",
      "value": "{!m.string}",
      "updateOn": "change"
     },
     {
      "aura:id": "click",
      "label": "click",
      "class": "click",
      "value": "{!m.string}",
      "updateOn": "click",
      "click": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "dblclick",
      "label": "dblclick",
      "class": "dblclick",
      "value": "{!m.string}",
      "updateOn": "dblclick",
      "dblclick": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "focus",
      "label": "focus",
      "class": "focus",
      "value": "{!m.string}",
      "updateOn": "focus",
      "focus": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mousedown",
      "label": "mousedown",
      "class": "mousedown",
      "value": "{!m.string}",
      "updateOn": "mousedown",
      "mousedown": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mousemove",
      "label": "mousemove",
      "class": "mousemove",
      "value": "{!m.string}",
      "updateOn": "mousemove",
      "mousemove": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mouseout",
      "label": "mouseout",
      "class": "mouseout",
      "value": "{!m.string}",
      "updateOn": "mouseout",
      "mouseout": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mouseover",
      "label": "mouseover",
      "class": "mouseover",
      "value": "{!m.string}",
      "updateOn": "mouseover",
      "mouseover": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "mouseup",
      "label": "mouseup",
      "class": "mouseup",
      "value": "{!m.string}",
      "updateOn": "mouseup",
      "mouseup": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "keydown",
      "label": "keydown",
      "class": "keydown",
      "value": "{!m.string}",
      "updateOn": "keydown",
      "keydown": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "keypress",
      "label": "keypress",
      "class": "keypress",
      "value": "{!m.string}",
      "updateOn": "keypress",
      "keypress": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "keyup",
      "label": "keyup",
      "class": "keyup",
      "value": "{!m.string}",
      "updateOn": "keyup",
      "keyup": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "select",
      "label": "select",
      "class": "select",
      "value": "{!m.string}",
      "updateOn": "select"
     },
     {
      "aura:id": "empty",
      "label": "",
      "class": "empty",
      "value": "{!m.string}",
      "updateOn": "blur",
      "blur": "{!c.checkDomEventSet}"
     },
     {
      "aura:id": "keyup",
      "label": "inspectBaseEvent",
      "class": "keyup",
      "value": "{!m.string}",
      "updateOn": "keyup",
      "keypress": "{!c.inspectKeyEvent}",
      "mousedown": "{!c.inspectMouseEvent}"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!m.string}"
     },
     {
      "aura:id": "outputValue",
      "class": "outputValue",
      "value": ""
     }
    ]
   }
  },
  "input_themeingTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:label": [
     {
      "label": "ui:inputCheckBox Not disabled checked "
     },
     {
      "label": "ui:inputCheckBox Not disabled or checked "
     },
     {
      "label": "ui:inputCheckBox disabled and checked "
     },
     {
      "label": "ui:inputCheckBox disabled and not checked "
     },
     {
      "label": "ui:inputText focused "
     },
     {
      "label": "ui:inputText not focused "
     },
     {
      "label": "ui:inputSearch "
     },
     {
      "label": "ui:inputSearch with clear "
     },
     {
      "label": "ui:inputDefaultError "
     }
    ],
    "ui:inputCheckbox": [
     {
      "disabled": "false",
      "value": "true"
     },
     {
      "disabled": "false",
      "value": "false"
     },
     {
      "disabled": "true",
      "value": "true"
     },
     {
      "disabled": "true",
      "value": "false"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inputTextBoxFocusable"
     },
     {}
    ],
    "ui:inputSearch": [
     {},
     {
      "value": "clear",
      "showClear": "true"
     }
    ],
    "ui:inputDefaultError": [
     {
      "value": "error1, error2, error3"
     }
    ]
   }
  },
  "label_Test.cmp": {
   "attributes": {
    "whichPosition": {
     "default": "left",
     "type": "String",
     "name": "whichPosition"
    },
    "labelTitle": {
     "type": "String",
     "name": "labelTitle"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:label": [
     {
      "aura:id": "rawStringLabel",
      "for": "myrawid",
      "label": "My Input Text"
     },
     {},
     {
      "for": "myinputtext",
      "label": "My Input Text",
      "aura:id": "myinputtextLabel"
     },
     {
      "aura:id": "myHiddenLabel",
      "labelDisplay": "false",
      "for": "myHiddeninputtext",
      "label": "My Input Text"
     },
     {
      "aura:id": "destroyLabel"
     },
     {
      "aura:id": "destroyLabelHidden"
     },
     {
      "aura:id": "destroyLabelNested"
     },
     {
      "aura:id": "destroyLabelInner"
     },
     {
      "aura:id": "destroyLabelInnermost"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "rawStringinput",
      "domId": "myrawid",
      "value": "I'm an inputText"
     },
     {
      "value": "my input"
     },
     {
      "aura:id": "myinputtext",
      "value": "I'm an inputText"
     },
     {
      "aura:id": "myHiddeninputtext",
      "value": "I'm an inputText"
     },
     {
      "label": "{!item.label}",
      "value": "{!item.value}",
      "aura:id": "iteration"
     },
     {
      "label": "inputTest",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputText"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!m.iterationItems}",
      "var": "item"
     }
    ],
    "ui:inputPercent": [
     {
      "label": "inputPercent",
      "value": "42"
     },
     {
      "label": "inputPercent",
      "labelPosition": "{!v.whichPosition}",
      "value": "42"
     }
    ],
    "ui:inputCurrency": [
     {
      "label": "inputCurrency",
      "value": "42",
      "labelPosition": "left",
      "aura:id": "leftPosition"
     },
     {
      "label": "inputCurrency",
      "labelPosition": "{!v.whichPosition}",
      "value": "42"
     }
    ],
    "ui:inputCheckbox": [
     {
      "label": "inputCheckbox",
      "labelPosition": "{!v.whichPosition}",
      "value": "false",
      "aura:id": "myInputCheckbox"
     },
     {
      "aura:id": "inputCheckboxWithLabelTitle",
      "labelTitle": "{!v.labelTitle}",
      "label": "inputCheckboxWithLabelTitle",
      "labelPosition": "{!v.whichPosition}",
      "value": "false"
     }
    ],
    "ui:inputDate": [
     {
      "label": "inputDate",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputDate"
     }
    ],
    "ui:inputDateTime": [
     {
      "label": "inputDateTime",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputDateTime"
     }
    ],
    "ui:inputNumber": [
     {
      "label": "inputNumber",
      "labelPosition": "{!v.whichPosition}",
      "value": "42"
     }
    ],
    "ui:inputRadio": [
     {
      "label": "inputRadio",
      "labelPosition": "{!v.whichPosition}",
      "value": "42"
     }
    ],
    "ui:inputRange": [
     {
      "label": "inputRange",
      "labelPosition": "{!v.whichPosition}",
      "value": "6"
     }
    ],
    "ui:inputSearch": [
     {
      "label": "inputSearch",
      "labelPosition": "{!v.whichPosition}",
      "value": "6"
     }
    ],
    "ui:inputSelect": [
     {
      "label": "inputSelect",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputSelect"
     }
    ],
    "ui:inputTextArea": [
     {
      "label": "inputTextArea",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputTextArea"
     },
     {
      "label": "inputTextArea",
      "labelPosition": "hidden",
      "value": "I'm an inputTextArea",
      "aura:id": "hiddenPosition"
     }
    ],
    "ui:inputPhone": [
     {
      "label": "inputPhone",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputPhone"
     }
    ],
    "ui:inputEmail": [
     {
      "label": "I'm a inputEmail",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputEmail"
     }
    ],
    "ui:inputSecret": [
     {
      "label": "I'm an inputSecret",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputSecret"
     }
    ],
    "ui:inputURL": [
     {
      "label": "I'm an inputURL",
      "labelPosition": "{!v.whichPosition}",
      "value": "I'm an inputURL"
     }
    ]
   }
  },
  "listSorterDataProvider.cmp": {
   "attributes": {
    "dataType": {
     "name": "dataType",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    },
    "provide": {
     "name": "provide",
     "action": "{!c.onProvide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "listSorter_Test.cmp": {
   "attributes": {
    "cancelEventFired": {
     "name": "cancelEventFired",
     "type": "boolean",
     "default": "false"
    },
    "title": {
     "name": "title",
     "type": "String",
     "default": "Sort",
     "description": "The title of this component."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:listSorter": [
     {
      "aura:id": "defaultListSorter",
      "class": "defaultListSorter",
      "onApply": "{!c.handleApplyPressed}",
      "onCancel": "{!c.handleCancelPressed}",
      "title": "{!v.title}",
      "rowVar": "item"
     },
     {
      "aura:id": "largeListSorter",
      "onApply": "{!c.handleApplyPressedForLargeList}",
      "onCancel": "{!c.handleCancelPressed}",
      "rowVar": "item"
     },
     {
      "aura:id": "emptyListSorter",
      "rowVar": "item"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "rowDef"
     },
     {
      "attribute": "trigger"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "rowDef"
     },
     {
      "attribute": "trigger"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "rowDef"
     },
     {
      "attribute": "trigger"
     }
    ],
    "uitest:listSorterDataProvider": [
     {},
     {
      "dataType": "largeList"
     },
     {
      "dataType": "emptyList"
     }
    ],
    "ui:radioToggleMenuItem": [
     {
      "value": "{!item.fieldName}",
      "label": "{!item.label}",
      "aura:id": "defaultRadioToggleMenuItem"
     },
     {
      "value": "{!item.fieldName}",
      "label": "{!item.label}"
     },
     {
      "value": "{!item.fieldName}",
      "label": "{!item.label}"
     }
    ],
    "ui:menuTriggerLink": [
     {
      "class": "defaultListSorterTrigger",
      "label": "Default List Sorter",
      "aura:id": "defaultListSorterTrigger"
     },
     {
      "label": "Large List Sorter",
      "aura:id": "largeListSorterTrigger"
     },
     {
      "label": "Empty List Sorter",
      "aura:id": "emptyListSorterTrigger"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "defaultListSorterResult",
      "value": ""
     },
     {
      "aura:id": "largeListSorterResult",
      "value": ""
     }
    ]
   }
  },
  "list_MultipleDataProvidersTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:list": [
     {
      "aura:id": "list",
      "itemVar": "row",
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "uitest:infiniteDataProvider": [
     {
      "currentPage": "{!v.currentPage}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     },
     {
      "currentPage": "{!v.currentPage + 1}",
      "pageSize": "{!v.pageSize}",
      "totalItems": "{!v.totalItems}"
     },
     {
      "currentPage": "1",
      "pageSize": "0",
      "totalItems": "{!v.totalItems}"
     },
     {
      "currentPage": "1",
      "pageSize": "1",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "btnDP1",
      "label": "Get Data From Data Provider 1",
      "press": "{!c.getDP1Data}"
     },
     {
      "aura:id": "btnDP2",
      "label": "Get Data From Data Provider 2",
      "press": "{!c.getDP2Data}"
     },
     {
      "aura:id": "btnEmpty",
      "label": "Get Empty List",
      "press": "{!c.getEmptyList}"
     },
     {
      "aura:id": "btnIndex",
      "label": "Index Out Of Bound",
      "press": "{!c.getOutOfBound}"
     },
     {
      "aura:id": "btnInline",
      "label": "Fire Provide Inline",
      "press": "{!c.fireInline}"
     }
    ]
   }
  },
  "localStorageFiller.cmp": {
   "attributes": {
    "message": {
     "name": "message",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Fill up Local Storage",
      "press": "{!c.fillLocalStorage}"
     }
    ]
   }
  },
  "menuItem_extend.cmp": {
   "attributes": {
    "zclass": {
     "name": "zclass",
     "type": "string"
    },
    "zlabel": {
     "name": "zlabel",
     "type": "string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "class",
      "value": "{!v.zclass}"
     },
     {
      "attribute": "label",
      "value": "{!v.zlabel}"
     }
    ]
   }
  },
  "menuList_Extend.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "menu_WithPanel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:menu": [
     {
      "aura:id": "uiMenu",
      "class": "checkPositionMenu"
     }
    ],
    "ui:menuTriggerLink": [
     {
      "aura:id": "menuWithPanelTrigger",
      "label": "My Menu"
     }
    ],
    "ui:menuList": [
     {
      "aura:id": "menuWithPanel"
     }
    ],
    "ui:actionMenuItem": [
     {
      "aura:id": "menuWithPanelItem1",
      "label": "open panel",
      "click": "{!c.openPanel}"
     }
    ],
    "ui:panelManager2": [
     {}
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ]
   }
  },
  "messageDemo.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:message": [
     {
      "title": "Alert",
      "closable": "true"
     },
     {
      "title": "Alert",
      "severity": "error"
     },
     {
      "title": "Warn",
      "severity": "warning"
     },
     {
      "title": "Confirmation",
      "severity": "confirm"
     },
     {
      "title": "Information",
      "severity": "info"
     }
    ]
   }
  },
  "outputCmps_EmptyStringValue.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputDate": [
     {
      "aura:id": "date",
      "value": ""
     }
    ],
    "ui:outputCurrency": [
     {
      "aura:id": "currency",
      "value": ""
     }
    ],
    "ui:outputDateTime": [
     {
      "aura:id": "dateTime",
      "value": ""
     }
    ],
    "ui:outputNumber": [
     {
      "aura:id": "number",
      "value": ""
     }
    ],
    "ui:outputPercent": [
     {
      "aura:id": "percent",
      "value": ""
     }
    ]
   }
  },
  "outputCurrency_FormattingWithNullOrEmptyStringTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputCurrency": [
     {
      "aura:id": "outputCurrencyEmpty",
      "value": "{!m.stringEmpty}"
     },
     {
      "aura:id": "outputCurrencyNull",
      "value": "{!m.stringNull}"
     }
    ]
   }
  },
  "outputDateTime_JavaModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputDateTime": [
     {
      "value": "{!m.dateTimeISOString}",
      "aura:id": "ISOStringFromJava",
      "format": "MM/dd/yyyy HH:mm:ss Z",
      "timezone": "GMT"
     },
     {
      "value": "{!m.dateTimeISOString}",
      "timezone": "America/Phoenix",
      "format": "yyyy-MM-dd hh:mm:ss",
      "aura:id": "ISOStringFromJavaWithTZOverride"
     },
     {
      "value": "{!m.calendar}",
      "aura:id": "calendarFromJava",
      "timezone": "GMT"
     },
     {
      "value": "{!m.calendarWithTimeZone}",
      "timezone": "America/Phoenix",
      "format": "yyyy-MM-dd hh:mm:ss",
      "aura:id": "calendarFromJavaWithTZOverride"
     }
    ]
   }
  },
  "outputDateTime_NumericValueFromJavaObj.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputDateTime": [
     {
      "value": "{!m.timestamp}",
      "timezone": "America/Chicago",
      "format": "M/d/yy h:m",
      "aura:id": "NumericValueFromJava"
     }
    ]
   }
  },
  "outputDateTime_OverriddenFormatDateTime.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "value",
      "value": "2004-09-23T16:30:00.000Z"
     }
    ]
   }
  },
  "outputDateTime_OverriddenGetFormat.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputDateTime_OverriddenGetTimeZone.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputDate_JavaModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputDate": [
     {
      "value": "{!m.date}",
      "format": "M/dd/yy",
      "aura:id": "dateFromJava"
     }
    ]
   }
  },
  "outputDate_NonDateJavaObj.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputDate": [
     {
      "value": "{!m.string}",
      "aura:id": "NonDateFromJava"
     }
    ]
   }
  },
  "outputDate_OverriddenFormatDate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "value",
      "value": "2004-09-23"
     }
    ]
   }
  },
  "outputMultiSelect_JavaModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputMultiSelect": [
     {
      "value": "{!m.string}",
      "aura:id": "String"
     },
     {
      "value": "{!m.stringArray}",
      "aura:id": "StringArray"
     },
     {
      "value": "{!m.stringList}",
      "aura:id": "StringList"
     },
     {
      "value": "{!m.integerArray}",
      "aura:id": "IntegerArray"
     }
    ]
   }
  },
  "outputNumber_BlankValue.cmp": {
   "attributes": {
    "noVal": {
     "name": "noVal",
     "type": "Decimal"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputNumber": [
     {
      "value": "{!v.noVal}",
      "aura:id": "uninitializedVariable"
     }
    ]
   }
  },
  "outputNumber_FormattingWithNullOrEmptyStringTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputNumber": [
     {
      "aura:id": "outputNumberEmpty",
      "value": "{!m.stringEmpty}"
     },
     {
      "aura:id": "outputNumberNull",
      "value": "{!m.stringNull}"
     }
    ]
   }
  },
  "outputPercent_FormattingWithNullOrEmptyStringTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputPercent": [
     {
      "aura:id": "outputPercentEmpty",
      "value": "{!m.stringEmpty}"
     },
     {
      "aura:id": "outputPercentNull",
      "value": "{!m.stringNull}"
     }
    ]
   }
  },
  "outputRichText_JavaModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputRichText": [
     {
      "value": "{!m.stringNull}",
      "aura:id": "myComp1"
     },
     {
      "value": "{!m.stringEmpty}",
      "aura:id": "myComp2"
     },
     {
      "value": "{!m.text}",
      "aura:id": "myComp3"
     },
     {
      "value": "{!m.textWithScriptTag}",
      "aura:id": "myComp4"
     },
     {
      "value": "{!m.textWithStyleTag}",
      "aura:id": "myComp5"
     },
     {
      "value": "{!m.textWithBlacklistedTags}",
      "aura:id": "myComp6"
     },
     {
      "value": "{!m.textWithBlacklistedNestedTags}",
      "aura:id": "myComp7"
     },
     {
      "value": "{!m.textWithWhitelistedChildrenTags}",
      "aura:id": "myComp8"
     },
     {
      "value": "{!m.textWithBlacklistedChildrenTags}",
      "aura:id": "myComp9"
     },
     {
      "value": "{!m.textWithEvent}",
      "aura:id": "myComp10"
     },
     {
      "value": "{!m.textWithMultipleEvents}",
      "aura:id": "myComp11"
     }
    ]
   }
  },
  "outputText_JavaModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "value": "{!m.objectNull}",
      "aura:id": "myComp1"
     },
     {
      "value": "{!m.booleanTrue}",
      "aura:id": "myComp2"
     },
     {
      "value": "{!m.text}",
      "aura:id": "myComp3"
     },
     {
      "value": "{!m.number}",
      "aura:id": "myComp4"
     }
    ]
   }
  },
  "outputText_SettingBody.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "value": "foo",
      "aura:id": "settingBody"
     }
    ]
   }
  },
  "output_themeingTest.cmp": {
   "attributes": {
    "item": {
     "name": "item",
     "type": "String",
     "default": "A long time ago, in a galaxy far, far away... "
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:label": [
     {
      "label": "ui:outputCheckbox  checked: "
     },
     {
      "label": "ui:outputCheckbox  Not checked: "
     },
     {
      "label": "ui:outputURL   Not disabled checked: "
     },
     {
      "label": "ui:outputTextArea  Not disabled checked: "
     },
     {
      "label": "ui:outputLabel  Not disabled checked: "
     }
    ],
    "ui:outputCheckbox": [
     {
      "value": "true"
     },
     {
      "value": "false"
     }
    ],
    "ui:outputURL": [
     {
      "iconClass": "iconClassLink",
      "label": "temp",
      "value": "SomethingSomethingDarkSide"
     }
    ],
    "ui:outputTextArea": [
     {
      "value": "{!v.item}"
     }
    ],
    "ui:outputLabel": [
     {
      "value": "THIS IS A LABEL"
     }
    ]
   }
  },
  "panel2.cmp": {
   "attributes": {
    "instanceId": {
     "name": "instanceId",
     "type": "Integer",
     "default": "-1"
    },
    "alias": {
     "name": "alias",
     "type": "String",
     "default": "panel2"
    },
    "title": {
     "name": "title",
     "type": "String",
     "default": "Default Title"
    },
    "visible": {
     "name": "visible",
     "type": "Boolean",
     "default": "false"
    },
    "active": {
     "name": "active",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {
    "notify": {
     "name": "notify",
     "type": "ui:notify"
    }
   },
   "handlers": {
    "notify": {
     "name": "notify",
     "event": "ui:notify",
     "action": "{!c.handleNotify}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "panel2Content.cmp": {
   "attributes": {
    "counter": {
     "name": "counter",
     "type": "Integer",
     "default": "0"
    },
    "payload": {
     "name": "payload",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {
    "notify": {
     "name": "notify",
     "type": "ui:notify"
    }
   },
   "handlers": {},
   "methods": {
    "incrementCounter": {
     "payload": {
      "name": "payload",
      "type": "Object"
     }
    }
   },
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "notify",
      "label": "Notify!",
      "press": "{!c.notify}"
     },
     {
      "aura:id": "notifyAll",
      "label": "Notify All!",
      "press": "{!c.notifyAll}"
     }
    ]
   }
  },
  "panel2_Tester.cmp": {
   "attributes": {
    "panelType": {
     "name": "panelType",
     "type": "String",
     "default": "modal"
    },
    "title": {
     "name": "title",
     "type": "String",
     "default": "New Panel"
    },
    "titleDisplay": {
     "name": "titleDisplay",
     "type": "Boolean",
     "default": "true"
    },
    "class": {
     "name": "class",
     "type": "String"
    },
    "flavor": {
     "name": "flavor",
     "type": "String"
    },
    "isVisible": {
     "name": "isVisible",
     "type": "Boolean",
     "default": "true"
    },
    "startOfDialogLabel": {
     "name": "startOfDialogLabel",
     "type": "String",
     "default": "Start of Dialog"
    },
    "closeOnClickOut": {
     "name": "closeOnClickOut",
     "type": "Boolean",
     "default": "false"
    },
    "showCloseButton": {
     "name": "showCloseButton",
     "type": "Boolean",
     "default": "true"
    },
    "closeDialogLabel": {
     "name": "closeDialogLabel",
     "type": "String",
     "default": "Close"
    },
    "useTransition": {
     "name": "useTransition",
     "type": "Boolean",
     "default": "true"
    },
    "animation": {
     "name": "animation",
     "type": "String",
     "default": "bottom"
    },
    "autoFocus": {
     "name": "autoFocus",
     "type": "Boolean",
     "default": "true"
    },
    "direction": {
     "name": "direction",
     "type": "String",
     "default": "north"
    },
    "showPointer": {
     "name": "showPointer",
     "type": "Boolean",
     "default": "false"
    },
    "useReferenceElementSelector": {
     "name": "useReferenceElementSelector",
     "type": "Boolean",
     "default": "false"
    },
    "useReferenceElement": {
     "name": "useReferenceElement",
     "type": "Boolean",
     "default": "false"
    },
    "referenceElementSelector": {
     "name": "referenceElementSelector",
     "type": "String"
    },
    "useHeader": {
     "name": "useHeader",
     "type": "Boolean",
     "default": "false"
    },
    "useFooter": {
     "name": "useFooter",
     "type": "Boolean",
     "default": "false"
    },
    "panelHeader": {
     "name": "panelHeader",
     "type": "Aura.Component[]"
    },
    "panelFooter": {
     "name": "panelFooter",
     "type": "Aura.Component[]"
    },
    "makeScrollable": {
     "name": "makeScrollable",
     "type": "Boolean",
     "default": "false"
    },
    "nonScrollable": {
     "name": "nonScrollable",
     "type": "Boolean",
     "default": "false"
    },
    "customizeCloseAction": {
     "name": "customizeCloseAction",
     "type": "Boolean",
     "default": "false"
    },
    "closeActionCalled": {
     "name": "closeActionCalled",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:createPanel",
      "type": "EVENT"
     }
    ],
    "ui:outputText": [
     {
      "value": "Create a panel to your liking"
     },
     {
      "class": "idCurrent",
      "aura:id": "idCurrent",
      "value": "{!globalId}"
     },
     {
      "class": "idCreated",
      "aura:id": "idCreated",
      "value": ""
     },
     {
      "class": "idDestroyed",
      "aura:id": "idDestroyed",
      "value": ""
     },
     {
      "class": "idRefEl",
      "aura:id": "idRefEl",
      "value": ""
     },
     {
      "class": "formFactorInfo",
      "aura:id": "formFactorInfo",
      "value": "{!$Browser.formFactor}"
     },
     {
      "class": "labelFromGVP",
      "aura:id": "labelFromGVP",
      "value": "{!$Label.Related_Lists.task_mode_today}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inputPanelType",
      "label": "Panel Type",
      "value": "{!v.panelType}",
      "class": "inputPanelTypeClass"
     },
     {
      "aura:id": "inputTitle",
      "label": "Title",
      "value": "{!v.title}",
      "class": "inputTitle`Class"
     },
     {
      "aura:id": "inputClass",
      "label": "class",
      "value": "{!v.class}",
      "class": "inputClassClass"
     },
     {
      "aura:id": "inputFlavor",
      "label": "Flavor",
      "value": "{!v.flavor}",
      "class": "inputFlavorClass"
     },
     {
      "aura:id": "inputStartOfDialogLabel",
      "label": "Start of Dialog Label",
      "value": "{!v.startOfDialogLabel}",
      "class": "inputStartOfDialogLabelClass"
     },
     {
      "aura:id": "inputCloseDialogLabel",
      "label": "Close Dialog Label",
      "value": "{!v.closeDialogLabel}",
      "class": "inputDialogLabelClass"
     },
     {
      "aura:id": "inputAnimation",
      "label": "Animation",
      "value": "{!v.animation}",
      "class": "inputAnimationClass"
     },
     {
      "aura:id": "inputDirection",
      "label": "Direction",
      "value": "{!v.direction}",
      "class": "inputDirectionClass"
     },
     {
      "aura:id": "inputReferenceElementSelector",
      "label": "Reference Element Selector",
      "value": "{!v.referenceElementSelector}",
      "class": "inputReferenceElementSelector"
     }
    ],
    "ui:inputCheckbox": [
     {
      "aura:id": "inputTitleDisplay",
      "label": "Disaplay Title",
      "value": "{!v.titleDisplay}",
      "class": "inputTitleDisplayClass"
     },
     {
      "aura:id": "inputIsVisible",
      "label": "Is Visible",
      "value": "{!v.isVisible}",
      "class": "inputIsVisibleClass"
     },
     {
      "aura:id": "inputCloseOnClickOut",
      "label": "Close on Click Out",
      "value": "{!v.closeOnClickOut}",
      "class": "inputcloseOnClickOutClass"
     },
     {
      "aura:id": "inputShowCloseButton",
      "label": "Show Close Button",
      "value": "{!v.showCloseButton}",
      "class": "inputShowCloseButtonClass"
     },
     {
      "aura:id": "inputUseTransition",
      "label": "Use Transition",
      "value": "{!v.useTransition}",
      "class": "inputUseTransitionClass"
     },
     {
      "aura:id": "inputAutoFocus",
      "label": "Auto Focus",
      "value": "{!v.autoFocus}",
      "class": "inputAutoFocusClass"
     },
     {
      "aura:id": "inputShowPointer",
      "label": "Show Pointer",
      "value": "{!v.showPointer}",
      "class": "inputShowPointerClass"
     },
     {
      "aura:id": "inputUseReferenceElementSelector",
      "label": "Use Reference Element Selector",
      "value": "{!v.useReferenceElementSelector}",
      "class": "inputUseReferenceElementSelector"
     },
     {
      "aura:id": "inputUseReferenceElement",
      "label": "Use Reference Element",
      "value": "{!v.useReferenceElement}",
      "class": "inputUseReferenceElement"
     },
     {
      "aura:id": "inputUseHeader",
      "label": "Use Header",
      "value": "{!v.useHeader}",
      "class": "inputUseHeaderClass"
     },
     {
      "aura:id": "inputUseFooter",
      "label": "Use Footer",
      "value": "{!v.useFooter}",
      "class": "inputUseFooterClass"
     },
     {
      "aura:id": "inputMakeScrollable",
      "label": "Make Scrollable",
      "value": "{!v.makeScrollable}",
      "class": "inputMakeScrollableClass"
     },
     {
      "aura:id": "inputNonScrollable",
      "label": "Non Scrollable Modal",
      "value": "{!v.nonScrollable}",
      "class": "inputNonScrollableClass"
     },
     {
      "aura:id": "inputCustomizeCloseAction",
      "label": "Customize CloseAction",
      "value": "{!v.customizeCloseAction}",
      "class": "inputCustomizeCloseAction"
     }
    ],
    "ui:button": [
     {
      "aura:id": "createPanelBtn",
      "label": "Create Panel",
      "press": "{!c.createPanel}",
      "class": "createPanelBtnClass"
     }
    ]
   }
  },
  "panelPositioning_Test.cmp": {
   "attributes": {},
   "imports": {
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "positioningLib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "aura:unescapedHtml",
      "type": "COMPONENT"
     }
    ],
    "ui:inputSelect": [
     {
      "aura:id": "direction",
      "label": "Direction"
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "north"
     },
     {
      "text": "east"
     },
     {
      "text": "west"
     },
     {
      "text": "south"
     },
     {
      "text": "northwest"
     },
     {
      "text": "northeast"
     },
     {
      "text": "southeast"
     },
     {
      "text": "southwest"
     },
     {
      "text": "brokendirection"
     }
    ],
    "ui:inputCheckbox": [
     {
      "label": "Use Advanced",
      "value": "true",
      "aura:id": "isAdvanced"
     },
     {
      "label": "inside",
      "value": "false",
      "aura:id": "isInside"
     },
     {
      "label": "Show Pointer",
      "value": "true",
      "aura:id": "showPointer"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "align",
      "label": "Align",
      "value": "left bottom"
     },
     {
      "aura:id": "targetAlign",
      "label": "Target Align",
      "value": "left top"
     }
    ],
    "ui:inputNumber": [
     {
      "aura:id": "pad",
      "label": "pad",
      "value": "0"
     },
     {
      "aura:id": "padTop",
      "label": "vertPad",
      "value": ""
     }
    ],
    "ui:button": [
     {
      "label": "GO!",
      "press": "{!c.handlePress}"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ]
   }
  },
  "panelRefElement_Test.cmp": {
   "attributes": {
    "directions": {
     "name": "directions",
     "type": "String[]",
     "default": "north,east,west,south,northwest,southwest,northeast,southeast"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "class": "title",
      "value": "Panel Reference Element Tester"
     },
     {
      "aura:id": "refElement1",
      "class": "refElement1",
      "value": "RefElem1"
     }
    ],
    "ui:button": [
     {
      "aura:id": "changeRefBtn",
      "class": "changeRefBtn",
      "label": "ChangeRefElem",
      "press": "{!c.changeReferenceElement}"
     },
     {
      "aura:id": "refElement2",
      "class": "refElement2",
      "label": "RefElem2",
      "press": "{!c.openPanel}"
     }
    ],
    "ui:inputSelect": [
     {
      "aura:id": "directions",
      "label": "Directions",
      "change": "{!c.onSelectChange}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.directions}",
      "var": "direction"
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "{!direction}",
      "label": "{!direction}"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "aura:set": [
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:panel": [
     {
      "aura:id": "panel",
      "class": "newPanel",
      "alias": "panel"
     }
    ]
   }
  },
  "panelTest.cmp": {
   "attributes": {
    "autoFocus": {
     "name": "autoFocus",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:button"
     }
    ],
    "ui:button": [
     {
      "class": "panelDialogModalButton",
      "press": "{!c.showSimpleModal}",
      "label": "Show Simple Modal Panel Dialog",
      "aura:id": "simpleModalButton"
     },
     {
      "class": "panelDialogModalButton",
      "press": "{!c.showModal}",
      "label": "Show Modal Panel Dialog",
      "aura:id": "modalButton"
     },
     {
      "class": "panelDialogNonModalButton",
      "press": "{!c.showNonModal}",
      "label": "Show Non-Modal Panel Dialog",
      "aura:id": "nonModalButton"
     },
     {
      "class": "panelDialogNonModalNonTransientButton",
      "press": "{!c.showNonModalNonTransient}",
      "label": "Show NonTransient,Non-Modal Panel Dialog",
      "aura:id": "nonModalNonTransientButton"
     }
    ],
    "ui:inputText": [
     {
      "class": "inputText",
      "aura:id": "inText",
      "value": "TestingCloseOnClickOutFeature",
      "maxlength": "10"
     }
    ],
    "ui:panelManager": [
     {}
    ]
   }
  },
  "pillContainerAutoCompleteDataProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "pillContainer_AsOutputField.cmp": {
   "attributes": {
    "maxAllowed": {
     "name": "maxAllowed",
     "type": "Integer",
     "default": "10",
     "description": "Max pills this container should have."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:pillContainer": [
     {
      "aura:id": "pillContainer",
      "maxAllowed": "{!v.maxAllowed}"
     }
    ]
   }
  },
  "pillContainer_Bubbling.cmp": {
   "attributes": {
    "maxAllowed": {
     "name": "maxAllowed",
     "type": "Integer",
     "default": "10",
     "description": "Max pills this container should have."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "pillInserted": {
     "name": "pillInserted",
     "event": "ui:response",
     "action": "{!c.processPillInserted}"
    },
    "pillRemoved": {
     "name": "pillRemoved",
     "event": "ui:response",
     "action": "{!c.processPillRemoved}"
    },
    "blur": {
     "name": "blur",
     "event": "ui:blur",
     "action": "{!c.processBlur}"
    },
    "focus": {
     "name": "focus",
     "event": "ui:focus",
     "action": "{!c.processFocus}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:pillContainer": [
     {
      "aura:id": "pillContainer",
      "maxAllowed": "{!v.maxAllowed}"
     }
    ],
    "aura:set": [
     {
      "attribute": "pillInput"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     }
    ],
    "ui:pillContainerAutoComplete": [
     {
      "aura:id": "autocomplete",
      "optionVar": "row"
     }
    ],
    "uitest:pillContainerAutoCompleteDataProvider": [
     {}
    ],
    "ui:pillContainerAutoCompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row}",
      "visible": "{!row.visible}",
      "iconUrl": "{!row.icon.url}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "result"
     }
    ]
   }
  },
  "pillContainer_InputText.cmp": {
   "attributes": {},
   "imports": {
    "ui:eventLib": {
     "library": "ui:eventLib",
     "property": "lib"
    }
   },
   "events": {
    "keydown": {
     "name": "keydown",
     "type": "ui:keydown",
     "access": "GLOBAL",
     "description": "The event fired when the user presses a keyboard key on the component."
    }
   },
   "handlers": {
    "keydown": {
     "name": "keydown",
     "action": "{!c.onKeydown}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "pillContainer_WithAutoComplete.cmp": {
   "attributes": {
    "flavor": {
     "name": "flavor",
     "type": "String",
     "default": "default",
     "description": ""
    },
    "maxLines": {
     "name": "maxLines",
     "type": "Integer",
     "default": "0",
     "description": "Maximum lines to show. Hidden lines can be expanded. Use 0 to disable."
    },
    "maxAllowed": {
     "name": "maxAllowed",
     "type": "Integer",
     "default": "10",
     "description": "Max pills this container should have."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:pillContainer": [
     {
      "aura:id": "pillContainer",
      "maxLines": "{!v.maxLines}",
      "aura:flavor": "{!v.flavor}",
      "pillFlavor": "{!v.flavor}",
      "maxAllowed": "{!v.maxAllowed}"
     }
    ],
    "aura:set": [
     {
      "attribute": "pillInput"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     }
    ],
    "ui:pillContainerAutoComplete": [
     {
      "aura:id": "autocomplete",
      "optionVar": "row",
      "label": "lookupLabel",
      "labelPosition": "hidden"
     }
    ],
    "uitest:pillContainerAutoCompleteDataProvider": [
     {}
    ],
    "ui:pillContainerAutoCompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row}",
      "visible": "{!row.visible}",
      "iconUrl": "{!row.icon.url}",
      "iconBackgroundColor": "{!row.icon.backgroundColor}"
     }
    ]
   }
  },
  "pillContainer_WithAutoCompleteAndPlaceHolderText.cmp": {
   "attributes": {
    "flavor": {
     "name": "flavor",
     "type": "String",
     "default": "default",
     "description": ""
    },
    "maxLines": {
     "name": "maxLines",
     "type": "Integer",
     "default": "0",
     "description": "Maximum lines to show. Hidden lines can be expanded. Use 0 to disable."
    },
    "maxAllowed": {
     "name": "maxAllowed",
     "type": "Integer",
     "default": "10",
     "description": "Max pills this container should have."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:pillContainer": [
     {
      "aura:id": "pillContainer",
      "maxLines": "{!v.maxLines}",
      "aura:flavor": "{!v.flavor}",
      "pillFlavor": "{!v.flavor}",
      "maxAllowed": "{!v.maxAllowed}"
     }
    ],
    "aura:set": [
     {
      "attribute": "pillInput"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     }
    ],
    "ui:pillContainerAutoComplete": [
     {
      "placeholder": "testPLaceHolder",
      "aura:id": "autocomplete",
      "optionVar": "row",
      "label": "lookupLabel",
      "labelPosition": "hidden"
     }
    ],
    "uitest:pillContainerAutoCompleteDataProvider": [
     {}
    ],
    "ui:pillContainerAutoCompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row}",
      "visible": "{!row.visible}",
      "iconUrl": "{!row.icon.url}",
      "iconBackgroundColor": "{!row.icon.backgroundColor}"
     }
    ]
   }
  },
  "pillContainer_WithAutoCompleteHeader.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:pillContainer": [
     {
      "aura:id": "pillContainer"
     }
    ],
    "aura:set": [
     {
      "attribute": "pillInput"
     },
     {
      "attribute": "listHeader"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     }
    ],
    "ui:pillContainerAutoComplete": [
     {
      "aura:id": "autocomplete",
      "optionVar": "row"
     }
    ],
    "ui:inputSelect": [
     {
      "aura:id": "select",
      "change": "{!c.onSelectChange}"
     }
    ],
    "ui:inputSelectOption": [
     {
      "text": "Even",
      "label": "Even"
     },
     {
      "text": "Odd",
      "label": "Odd"
     }
    ],
    "uitest:pillContainerAutoCompleteDataProvider": [
     {}
    ],
    "ui:pillContainerAutoCompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row}",
      "visible": "{!row.visible}",
      "iconUrl": "{!row.icon.url}"
     }
    ]
   }
  },
  "pillContainer_WithAutoCompleteUsePanelSet.cmp": {
   "attributes": {
    "flavor": {
     "name": "flavor",
     "type": "String",
     "default": "default",
     "description": ""
    },
    "maxLines": {
     "name": "maxLines",
     "type": "Integer",
     "default": "0",
     "description": "Maximum lines to show. Hidden lines can be expanded. Use 0 to disable."
    },
    "maxAllowed": {
     "name": "maxAllowed",
     "type": "Integer",
     "default": "10",
     "description": "Max pills this container should have."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:pillContainer": [
     {
      "aura:id": "pillContainer",
      "maxLines": "{!v.maxLines}",
      "aura:flavor": "{!v.flavor}",
      "pillFlavor": "{!v.flavor}",
      "maxAllowed": "{!v.maxAllowed}"
     }
    ],
    "aura:set": [
     {
      "attribute": "pillInput"
     },
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "listOption"
     },
     {
      "attribute": "registeredPanels"
     }
    ],
    "ui:pillContainerAutoComplete": [
     {
      "usePanel": "true",
      "aura:id": "autocomplete",
      "optionVar": "row",
      "label": "lookupLabel",
      "labelPosition": "hidden"
     }
    ],
    "uitest:pillContainerAutoCompleteDataProvider": [
     {}
    ],
    "ui:pillContainerAutoCompleteOption": [
     {
      "label": "{!row.label}",
      "keyword": "{!row.keyword}",
      "value": "{!row}",
      "visible": "{!row.visible}",
      "iconUrl": "{!row.icon.url}",
      "iconBackgroundColor": "{!row.icon.backgroundColor}"
     }
    ],
    "ui:panelManager2": [
     {
      "aura:id": "pm"
     }
    ],
    "ui:panel": [
     {
      "alias": "panel"
     }
    ],
    "ui:modal": [
     {
      "alias": "modal"
     }
    ]
   }
  },
  "pillContainer_WithTextInput.cmp": {
   "attributes": {
    "pillInsertFired": {
     "name": "pillInsertFired",
     "type": "boolean",
     "default": "false"
    },
    "pillRemovedFired": {
     "name": "pillRemovedFired",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:pillContainer": [
     {
      "aura:id": "pillContainer",
      "pillInserted": "{!c.processPillInserted}",
      "pillRemoved": "{!c.processPillRemoved}"
     }
    ],
    "aura:set": [
     {
      "attribute": "pillInput"
     }
    ],
    "uitest:pillContainer_InputText": [
     {
      "aura:id": "textInput"
     }
    ]
   }
  },
  "pill_Test.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:pill": [
     {
      "label": "Some Text",
      "iconBackgroundColor": "f0f",
      "iconUrl": "https://pi.pardot.com/images/salesforce.png"
     },
     {
      "label": "Pill with empty iconUrl",
      "iconBackgroundColor": "abc",
      "iconUrl": ""
     },
     {
      "label": "Pill with default iconUrl",
      "iconBackgroundColor": "def"
     }
    ]
   }
  },
  "popupTestExtendedPopup.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "popupTestExtendedTarget.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "popupTestFrame.cmp": {
   "attributes": {
    "frameId": {
     "name": "frameId",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "press": "{!c.handlePress}",
      "label": "{!v.frameId + ': press me'}"
     }
    ]
   }
  },
  "popupTestTriggerElement.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "popupTargetToggle": {
     "name": "popupTargetToggle",
     "type": "ui:popupTargetToggle"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:label": [
     {
      "class": "customTriggerLabel",
      "label": "Custom trigger"
     }
    ],
    "ui:button": [
     {
      "class": "customTriggerButton",
      "press": "{!c.hideTarget}",
      "label": "Close Target"
     }
    ],
    "ui:inputText": [
     {
      "class": "customTriggerInput",
      "focus": "{!c.showTarget}"
     }
    ]
   }
  },
  "scrollerNative.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:scroller": [
     {
      "class": "scrollWrapper",
      "useNativeScroller": "true",
      "onScrollMove": "{!c.scrollMoveHandler}",
      "aura:id": "test-scroller",
      "showScrollbars": "true"
     }
    ]
   }
  },
  "scroller_BidirectionalTest.cmp": {
   "attributes": {
    "scrollerId": {
     "name": "scrollerId",
     "type": "String",
     "default": "horizontalScroll"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "toTop",
      "label": "Scroll to Top",
      "press": "{!c.scrollToTop}"
     },
     {
      "aura:id": "toBottom",
      "label": "Scroll to Bottom",
      "press": "{!c.scrollToBottom}"
     },
     {
      "aura:id": "toRight",
      "label": "Scroll to Right",
      "press": "{!c.scrollToRight}"
     },
     {
      "aura:id": "toLeft",
      "label": "Scroll to Left",
      "press": "{!c.scrollToLeft}"
     },
     {
      "aura:id": "byUp",
      "label": "Scroll Up",
      "press": "{!c.scrollUp}"
     },
     {
      "aura:id": "byDown",
      "label": "Scroll Down",
      "press": "{!c.scrollDown}"
     },
     {
      "aura:id": "byRight",
      "label": "Scroll Right",
      "press": "{!c.scrollRight}"
     },
     {
      "aura:id": "byLeft",
      "label": "Scroll Left",
      "press": "{!c.scrollLeft}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "newScrollerId",
      "value": "{!v.scrollerId}"
     }
    ],
    "ui:outputText": [
     {
      "value": "bidirectional"
     },
     {
      "value": "lockVertical"
     },
     {
      "value": "lockHorizontal"
     },
     {
      "value": "invalidDirection"
     },
     {
      "value": "verticalSroll"
     },
     {
      "value": "horizontalScroll"
     }
    ],
    "ui:scroller": [
     {
      "aura:id": "bidirectional",
      "scroll": "bidirectional"
     },
     {
      "aura:id": "lockVertical",
      "lockOnDirection": "vertical"
     },
     {
      "aura:id": "lockHorizontal",
      "lockOnDirection": "horizontal"
     },
     {
      "aura:id": "invalidDirection",
      "scroll": "overtherainbow"
     },
     {
      "aura:id": "verticalSroll",
      "scroll": "vertical"
     },
     {
      "aura:id": "horizontalScroll",
      "scroll": "horizontal"
     }
    ]
   }
  },
  "scroller_InfiniteLoading.cmp": {
   "attributes": {
    "initialSize": {
     "name": "initialSize",
     "type": "Integer",
     "default": "40"
    },
    "loadDelay_ms": {
     "name": "loadDelay_ms",
     "type": "Integer",
     "default": "250",
     "description": "delay before the scroller load the new items"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:scroller": [
     {
      "class": "scrollWrapper",
      "aura:id": "test-scroller",
      "useNativeScroller": "true",
      "bindEventsToScroller": "true",
      "infiniteLoading": "true",
      "infiniteLoadingDataProvider": "{!c.onLoadMore}",
      "infiniteLoadingLoadingLabel": "Test Loading...1234567890"
     }
    ]
   }
  },
  "scroller_Test.cmp": {
   "attributes": {
    "scrollToBottomCount": {
     "name": "scrollToBottomCount",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:scroller": [
     {
      "aura:id": "basic"
     },
     {
      "aura:id": "missingAfterRender"
     },
     {
      "aura:id": "rubberbanding"
     },
     {
      "aura:id": "rubberbandingBecauseMissingRefresh"
     },
     {
      "aura:id": "pullToRefresh",
      "onPullToRefresh": "{!c.replaceBodyContent}"
     },
     {},
     {
      "aura:id": "scrollToYTest",
      "canShowMore": "true",
      "onPullToRefresh": "{!c.replaceBodyContent}",
      "onPullToShowMore": "{!c.replaceBodyContent}"
     },
     {
      "aura:id": "horizontalScrollBottom",
      "scroll": "horizontal"
     },
     {
      "aura:id": "verticalScrollBottom",
      "scroll": "vertical"
     }
    ],
    "uitest:badRenderer": [
     {
      "skipAfterRender": "true"
     }
    ],
    "ui:inputTextArea": [
     {
      "aura:id": "inTextArea",
      "value": "{!m.textAreaText}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "toTopButton",
      "label": "ScrollToTop",
      "press": "{!c.scrollToTop}"
     },
     {
      "aura:id": "toBotButton",
      "label": "ScrollToBottom",
      "press": "{!c.scrollToBottom}"
     },
     {
      "aura:id": "toStepButton",
      "label": "ScrollRelative",
      "press": "{!c.scrollDown}"
     },
     {
      "aura:id": "toStepUpButton",
      "label": "ScrollRelative",
      "press": "{!c.scrollUp}"
     },
     {
      "label": "ScrollToTop",
      "press": "{!c.scrollToTop}"
     },
     {
      "aura:id": "hztlScrollButton",
      "label": "ScrollToBottom",
      "press": "{!c.hztlScrollToBottom}"
     },
     {
      "aura:id": "vrtScrollButton",
      "label": "ScrollToBottom",
      "press": "{!c.vrtScrollToBottom}"
     }
    ]
   }
  },
  "scroller_basic.cmp": {
   "attributes": {
    "enabled": {
     "name": "enabled",
     "default": "true",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:scroller": [
     {
      "class": "scrollWrapper",
      "onPullToRefresh": "{!c.fetchDataPTR}",
      "onPullToShowMore": "{!c.fetchDataPTL}",
      "onBeforeScrollStart": "{!c.beforeScrollStartHandler}",
      "onScrollStart": "{!c.scrollStartHandler}",
      "onScrollMove": "{!c.scrollMoveHandler}",
      "onScrollEnd": "{!c.scrollEndHandler}",
      "aura:id": "test-scroller",
      "showScrollbars": "true",
      "enabled": "{!v.enabled}"
     }
    ]
   }
  },
  "scroller_basicPerf.cmp": {
   "attributes": {
    "rows": {
     "name": "rows",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:scroller": [
     {
      "aura:id": "outer",
      "class": "scrollWrapper"
     },
     {
      "aura:id": "inner",
      "class": "scrollWrapper"
     }
    ],
    "aura:iteration": [
     {
      "var": "row",
      "items": "{!v.rows}"
     }
    ],
    "ui:outputURL": [
     {
      "value": "javascript:void(0);",
      "label": "{!row.text}",
      "click": "{!c.handleClick}"
     }
    ]
   }
  },
  "stampdemo.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:stamp": [
     {},
     {
      "severity": "success"
     },
     {
      "severity": "warning"
     },
     {
      "severity": "important"
     },
     {
      "severity": "info"
     },
     {
      "severity": "inverse"
     }
    ]
   }
  },
  "tab_afterRenderCustomTab.cmp": {
   "attributes": {
    "_afterRenderWidth": {
     "name": "_afterRenderWidth",
     "type": "String",
     "default": "",
     "description": "after render tab content width"
    },
    "_afterRenderHeight": {
     "name": "_afterRenderHeight",
     "type": "String",
     "default": "",
     "description": "after render tab content height"
    },
    "_isDomPresent": {
     "name": "_isDomPresent",
     "type": "Boolean",
     "default": "false",
     "description": "whether or not the dom is present"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tab_lazyCustomTab.cmp": {
   "attributes": {
    "rendered": {
     "name": "rendered",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tabset_DynamicOverflowTest.cmp": {
   "attributes": {
    "numTabs": {
     "name": "numTabs",
     "type": "Integer",
     "default": "20"
    },
    "headerWidth": {
     "name": "headerWidth",
     "type": "Integer",
     "default": "300"
    },
    "isCloseable": {
     "name": "isCloseable",
     "type": "Boolean",
     "default": "false"
    },
    "isNestedTabs": {
     "name": "isNestedTabs",
     "type": "Boolean",
     "default": "false"
    },
    "indexAddRemove": {
     "name": "indexAddRemove",
     "type": "Integer",
     "default": "0"
    },
    "titleOfAddTab": {
     "name": "titleOfAddTab",
     "type": "String",
     "default": "Dynamic-"
    },
    "targetContainer": {
     "name": "targetContainer",
     "type": "String",
     "default": "testTabContainer"
    },
    "newHeaderTitle": {
     "name": "newHeaderTitle",
     "type": "String"
    },
    "newHeaderTitleIndex": {
     "name": "newHeaderTitleIndex",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:tabset",
      "type": "COMPONENT"
     }
    ],
    "ui:inputNumber": [
     {
      "aura:id": "inputNumTabs",
      "label": "Number of tabs to create",
      "value": "{!v.numTabs}"
     },
     {
      "aura:id": "inputHeaderWidth",
      "label": "Max Header Width",
      "value": "{!v.headerWidth}"
     },
     {
      "aura:id": "inputDynamicTabIndex",
      "label": "Index to add/remove",
      "value": "{!v.indexAddRemove}"
     },
     {
      "aura:id": "inputNewHeaderTitleIndex",
      "label": "Index of New Header Title",
      "value": "{!v.newHeaderTitleIndex}"
     }
    ],
    "ui:inputCheckbox": [
     {
      "aura:id": "inputIsCloseable",
      "label": "Are tabs closeable",
      "value": "{!v.isCloseable}",
      "click": "{!c.toggleIsCloseable}"
     },
     {
      "aura:id": "inputIsNestedTabs",
      "label": "Are tabs nested",
      "value": "{!v.isNestedTabs}",
      "click": "{!c.toggleIsNestedTabs}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "btnCreateTabs",
      "label": "Create tabs",
      "press": "{!c.loadTabs}"
     },
     {
      "aura:id": "btnCreateMultiTabsets",
      "label": "Create multiple tabsets",
      "press": "{!c.loadMultiTabsets}"
     },
     {
      "aura:id": "btnCreateTabsetsForAutomation",
      "label": "Create tabsets for Automation",
      "press": "{!c.loadAutomationTabsets}"
     },
     {
      "aura:id": "btnAddTab",
      "label": "Add",
      "press": "{!c.addTab}"
     },
     {
      "aura:id": "btnRemoveTab",
      "label": "Remove",
      "press": "{!c.removeTab}"
     },
     {
      "aura:id": "btnChangeHeaderTitle",
      "label": "Dynamically change header Title",
      "press": "{!c.changeHeaderTitle}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inputTargetContainerAddRemove",
      "label": "Target container",
      "value": "{!v.targetContainer}",
      "blur": "{!c.updateTargetContainerAddRemove}"
     },
     {
      "aura:id": "inputDynamicTabTitle",
      "label": "Title of added tab",
      "value": "{!v.titleOfAddTab}"
     },
     {
      "aura:id": "inputTargetContainerChangeTitle",
      "label": "Target container",
      "value": "{!v.targetContainer}",
      "blur": "{!c.updateTargetContainerChangeTitle}"
     },
     {
      "aura:id": "inputNewHeaderTitle",
      "label": "New Header Title",
      "value": "{!v.newHeaderTitle}"
     }
    ]
   }
  },
  "tabset_RegressionTest.cmp": {
   "attributes": {
    "renderItem": {
     "name": "renderItem",
     "type": "String",
     "default": "none"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{! v.renderItem == 'testAddTab'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testTabItemAltText'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testAfterRenderStateTab0Active'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testAfterRenderStateTab1Active'}"
     },
     {
      "isTrue": "{! v.renderItem == 'testAfterRenderStateNoActiveTab'}"
     },
     {
      "isTrue": "{! v.renderItem == 'none'}"
     }
    ],
    "ui:tabset": [
     {
      "class": "tabset",
      "aura:id": "tabSet"
     },
     {
      "class": "tabset",
      "aura:id": "tabSet"
     }
    ],
    "ui:tab": [
     {
      "title": "tab 0 title"
     },
     {
      "title": "tab 1 title"
     }
    ],
    "uitest:tabset_extendsTest": [
     {
      "class": "tabset",
      "aura:id": "tabSet"
     },
     {
      "class": "tabset",
      "aura:id": "tabSet"
     },
     {
      "class": "tabset",
      "aura:id": "tabSet"
     }
    ],
    "uitest:tab_afterRenderCustomTab": [
     {
      "aura:id": "tab0",
      "title": "tab 0",
      "active": "true"
     },
     {
      "aura:id": "tab1",
      "title": "tab 1"
     },
     {
      "aura:id": "tab0",
      "title": "tab 0"
     },
     {
      "aura:id": "tab1",
      "title": "tab 1",
      "active": "true"
     },
     {
      "aura:id": "tab0",
      "title": "tab 0"
     },
     {
      "aura:id": "tab1",
      "title": "tab 1"
     }
    ]
   }
  },
  "tabset_Test.cmp": {
   "attributes": {
    "renderItem": {
     "name": "renderItem",
     "type": "String",
     "default": "none"
    },
    "lazyRender": {
     "name": "lazyRender",
     "type": "Boolean",
     "default": "true"
    },
    "closable": {
     "name": "closable",
     "type": "Boolean",
     "default": "false"
    },
    "conditionalShow": {
     "name": "conditionalShow",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{! v.renderItem == 'basic' || v.renderItem == 'all'}"
     },
     {
      "isTrue": "{!!v.conditionalShow}"
     },
     {
      "isTrue": "{!v.conditionalShow}"
     },
     {
      "isTrue": "{! v.renderItem == 'nestedTabs' || v.renderItem == 'all'}"
     },
     {
      "isTrue": "{! v.renderItem == 'noTabs'}"
     },
     {
      "isTrue": "{! v.renderItem == 'tab' || v.renderItem == 'all'}"
     },
     {
      "isTrue": "{! v.renderItem == 'tab_lazyCustomTab'}"
     },
     {
      "isTrue": "{! v.renderItem == 'none'}"
     }
    ],
    "uitest:tabset_extendsTest": [
     {
      "aura:id": "tabset2",
      "class": "tabset1",
      "lazyRenderTabs": "{!v.lazyRender}"
     },
     {
      "aura:id": "tabset3",
      "class": "tabset1",
      "lazyRenderTabs": "{!v.lazyRender}"
     },
     {
      "aura:id": "tabset_lazyLoading",
      "class": "tabset",
      "lazyRenderTabs": "true"
     }
    ],
    "ui:tab": [
     {
      "title": "Dummy Tab",
      "aura:id": "inputForActivateByIndex",
      "closable": "{!v.closable}"
     },
     {
      "title": "Accounts",
      "aura:id": "inputForActivateByIndex",
      "closable": "{!v.closable}"
     },
     {
      "title": "Contacts",
      "name": "contacts",
      "closable": "{!v.closable}"
     },
     {
      "title": "Opportunities",
      "closable": "{!v.closable}"
     },
     {
      "title": "Leads",
      "closable": "{!v.closable}"
     },
     {
      "title": "Chatter",
      "active": "true",
      "aura:id": "chatter"
     },
     {
      "aura:id": "campaigns",
      "name": "icons"
     },
     {
      "title": "Dashboards",
      "aura:id": "dashboard",
      "closable": "{!v.closable}"
     },
     {
      "title": "tab1"
     },
     {
      "title": "inner tab 1",
      "aura:id": "nestedTab",
      "closable": "true"
     },
     {
      "title": "inner tab 2"
     },
     {
      "title": "tab 2"
     },
     {
      "title": "Accounts",
      "aura:id": "inputForActivateByIndex",
      "closable": "{!v.closable}"
     },
     {
      "title": "Contacts",
      "name": "contacts",
      "closable": "{!v.closable}"
     }
    ],
    "aura:set": [
     {
      "attribute": "icon"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "icon",
      "value": "Icon"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inputTabTitle",
      "class": "inputTabTitle",
      "placeholder": "title"
     },
     {
      "aura:id": "inputTabTitle",
      "class": "inputTabTitle",
      "placeholder": "title"
     }
    ],
    "ui:inputTextArea": [
     {
      "aura:id": "inputTabContent",
      "placeholder": "content"
     },
     {
      "aura:id": "inputTabContent",
      "class": "inputTabContent",
      "placeholder": "content"
     }
    ],
    "ui:inputCheckbox": [
     {
      "aura:id": "inputTabClosable",
      "value": "closable"
     },
     {
      "aura:id": "setActive",
      "value": "isActive"
     }
    ],
    "ui:button": [
     {
      "label": "add tab",
      "class": "addTab",
      "press": "{!c.addTab}"
     },
     {
      "label": "Update Tab Title",
      "press": "{!c.updateTab}"
     },
     {
      "label": "Activate By Index",
      "press": "{!c.activateTabByIndex}",
      "aura:id": "activateByIndex"
     },
     {
      "label": "Active By Title",
      "press": "{!c.activateTabByName}",
      "aura:id": "activateByName"
     }
    ],
    "ui:tabset": [
     {
      "class": "nestedTabs"
     },
     {
      "aura:id": "nestedTabSet"
     },
     {
      "aura:id": "noTabsTabSet",
      "class": "tabset1",
      "lazyRenderTabs": "{!true}"
     }
    ],
    "uitest:tab_lazyCustomTab": [
     {
      "aura:id": "lazytab1",
      "title": "Tab 1"
     },
     {
      "aura:id": "lazytab2",
      "title": "Tab 2",
      "active": "true"
     },
     {
      "aura:id": "lazytab3",
      "title": "Tab 3"
     }
    ]
   }
  },
  "tabset_extendsTest.cmp": {
   "attributes": {
    "_afterRenderWidth": {
     "name": "_afterRenderWidth",
     "type": "String",
     "default": "",
     "description": "after render tab content width"
    },
    "_afterRenderHeight": {
     "name": "_afterRenderHeight",
     "type": "String",
     "default": "",
     "description": "after render tab content height"
    },
    "_isDomPresent": {
     "name": "_isDomPresent",
     "type": "Boolean",
     "default": "false",
     "description": "whether or not the dom is present"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tooltipTestPosition.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tooltip": [
     {
      "aura:id": "topLeftWest",
      "class": "topLeftWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "topLeftNorth",
      "class": "topLeftNorth",
      "advanced": "true",
      "direction": "north",
      "trigger": "hover"
     },
     {
      "aura:id": "topLeftSouth",
      "class": "topLeftSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "topLeftEast",
      "class": "topLeftEast",
      "advanced": "true",
      "direction": "east",
      "trigger": "hover"
     },
     {
      "aura:id": "topCenterWest",
      "class": "topCenterWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "topCenterNorth",
      "class": "topCenterNorth",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "topCenterSouth",
      "class": "topCenterSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "topCenterEast",
      "class": "topCenterEast",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "topRightWest",
      "class": "topRightWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "topRightNorth",
      "class": "topRightNorth",
      "advanced": "true",
      "direction": "north",
      "trigger": "hover"
     },
     {
      "aura:id": "topRightSouth",
      "class": "topRightSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "topRightEast",
      "class": "topRightEast",
      "advanced": "true",
      "direction": "east",
      "trigger": "hover"
     },
     {
      "aura:id": "leftCenterWest",
      "class": "leftCenterWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "leftCenterNorth",
      "class": "leftCenterNorth",
      "advanced": "true",
      "direction": "north",
      "trigger": "hover"
     },
     {
      "aura:id": "leftCenterSouth",
      "class": "leftCenterSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "leftCenterEast",
      "class": "leftCenterEast",
      "advanced": "true",
      "direction": "east",
      "trigger": "hover"
     },
     {
      "aura:id": "centerCenterWest",
      "class": "centerCenterWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "centerCenterNorth",
      "class": "centerCenterNorth",
      "advanced": "true",
      "direction": "north",
      "trigger": "hover"
     },
     {
      "aura:id": "centerCenterSouth",
      "class": "centerCenterSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "centerCenterEast",
      "class": "centerCenterEast",
      "advanced": "true",
      "direction": "east",
      "trigger": "hover"
     },
     {
      "aura:id": "rightCenterWest",
      "class": "rightCenterWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "rightCenterNorth",
      "class": "rightCenterNorth",
      "advanced": "true",
      "direction": "north",
      "trigger": "hover"
     },
     {
      "aura:id": "rightCenterSouth",
      "class": "rightCenterSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "rightCenterEast",
      "class": "rightCenterEast",
      "advanced": "true",
      "direction": "east",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomRightWest",
      "class": "bottomRightWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomRightNorth",
      "class": "bottomRightNorth",
      "advanced": "true",
      "direction": "north",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomRightSouth",
      "class": "bottomRightSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomRightEast",
      "class": "bottomRightEast",
      "advanced": "true",
      "direction": "east",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomCenterWest",
      "class": "bottomCenterWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomCenterNorth",
      "class": "bottomCenterNorth",
      "advanced": "true",
      "direction": "north",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomCenterSouth",
      "class": "bottomCenterSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomCenterEast",
      "class": "bottomCenterEast",
      "advanced": "true",
      "direction": "east",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomLeftWest",
      "class": "bottomLeftWest",
      "advanced": "true",
      "direction": "west",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomLeftNorth",
      "class": "bottomLeftNorth",
      "advanced": "true",
      "direction": "north",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomLeftSouth",
      "class": "bottomLeftSouth",
      "advanced": "true",
      "direction": "south",
      "trigger": "hover"
     },
     {
      "aura:id": "bottomLeftEast",
      "class": "bottomLeftEast",
      "advanced": "true",
      "direction": "east",
      "trigger": "hover"
     }
    ],
    "ui:label": [
     {
      "aura:id": "topLeftWestlabel",
      "for": "topLeftWest",
      "label": "Wst"
     },
     {
      "aura:id": "topLeftNorthlabel",
      "for": "topLeftNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "topLeftSouthlabel",
      "for": "topLeftSouth",
      "label": " Sth"
     },
     {
      "aura:id": "topLeftEastlabel",
      "for": "topLeftEast",
      "label": " Est"
     },
     {
      "aura:id": "topCenterWestlabel",
      "for": "topCenterWest",
      "label": " Wst"
     },
     {
      "aura:id": "topCenterNorthlabel",
      "for": "topCenterNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "topCenterSouthlabel",
      "for": "topCenterSouth",
      "label": " Sth"
     },
     {
      "aura:id": "topCenterEastlabel",
      "for": "topCenterEast",
      "label": " Est"
     },
     {
      "aura:id": "topRightWestlabel",
      "for": "topRightWest",
      "label": "Wst"
     },
     {
      "aura:id": "topRightNorthlabel",
      "for": "topRightNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "topRightSouthlabel",
      "for": "topRightSouth",
      "label": " Sth"
     },
     {
      "aura:id": "topRightEastlabel",
      "for": "topRightEast",
      "label": " Est"
     },
     {
      "aura:id": "leftCenterWestlabel",
      "for": "leftCenterWest",
      "label": " Wst"
     },
     {
      "aura:id": "leftCenterNorthlabel",
      "for": "leftCenterNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "leftCenterSouthlabel",
      "for": "leftCenterSouth",
      "label": " Sth"
     },
     {
      "aura:id": "leftCenterEastlabel",
      "for": "leftCenterEast",
      "label": " Est"
     },
     {
      "aura:id": "centerCenterWestlabel",
      "for": "centerCenterWest",
      "label": "Wst"
     },
     {
      "aura:id": "centerCenterNorthlabel",
      "for": "centerCenterNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "centerCenterSouthlabel",
      "for": "centerCenterSouth",
      "label": " Sth"
     },
     {
      "aura:id": "centerCenterEastlabel",
      "for": "centerCenterEast",
      "label": " Est"
     },
     {
      "aura:id": "rightCenterWestlabel",
      "for": "rightCenterWest",
      "label": "Wst"
     },
     {
      "aura:id": "rightCenterNorthlabel",
      "for": "rightCenterNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "rightCenterSouthlabel",
      "for": "rightCenterSouth",
      "label": " Sth"
     },
     {
      "aura:id": "rightCenterEastlabel",
      "for": "rightCenterEast",
      "label": " Est"
     },
     {
      "aura:id": "bottomRightWestlabel",
      "for": "bottomRightWest",
      "label": "Wst"
     },
     {
      "aura:id": "bottomRightNorthlabel",
      "for": "bottomRightNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "bottomRightSouthlabel",
      "for": "bottomRightSouth",
      "label": " Sth"
     },
     {
      "aura:id": "bottomRightEastlabel",
      "for": "bottomRightEast",
      "label": " Est"
     },
     {
      "aura:id": "bottomCenterWestlabel",
      "for": "bottomCenterWest",
      "label": "Wst"
     },
     {
      "aura:id": "bottomCenterNorthlabel",
      "for": "bottomCenterNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "bottomCenterSouthlabel",
      "for": "bottomCenterSouth",
      "label": " Sth"
     },
     {
      "aura:id": "bottomCenterEastlabel",
      "for": "bottomCenterEast",
      "label": " Est"
     },
     {
      "aura:id": "bottomLeftWestlabel",
      "for": "bottomLeftWest",
      "label": "Wst"
     },
     {
      "aura:id": "bottomLeftNorthlabel",
      "for": "bottomLeftNorth",
      "label": " Nrt"
     },
     {
      "aura:id": "bottomLeftSouthlabel",
      "for": "bottomLeftSouth",
      "label": " Sth"
     },
     {
      "aura:id": "bottomLeftEastlabel",
      "for": "bottomLeftEast",
      "label": " Est"
     }
    ],
    "ui:containerManager": [
     {}
    ]
   }
  },
  "tooltip_FullTest.cmp": {
   "attributes": {
    "renderItem": {
     "name": "renderItem",
     "type": "String",
     "default": "all"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tooltip": [
     {
      "aura:id": "default",
      "class": "default"
     },
     {
      "aura:id": "bodyalphanum",
      "class": "bodyalphanum",
      "advanced": "true",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "bodyhtmlimg",
      "class": "bodyhtmlimg",
      "advanced": "true",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "bodyhtmltbl",
      "class": "bodyhtmltbl",
      "advanced": "true",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "tooltip7",
      "class": "tooltip7",
      "advanced": "false",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "disabledfalse",
      "class": "disabledfalse",
      "advanced": "false",
      "disabled": "false",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "disabledtrue",
      "class": "disabledtrue",
      "advanced": "false",
      "disabled": "true",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "disabledempty",
      "class": "disabledempty",
      "advanced": "false",
      "disabled": "",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "advTrueTooltip",
      "class": "advTrueTooltip",
      "advanced": "true",
      "trigger": "none",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "advFalseTooltip",
      "class": "advFalseTooltip",
      "advanced": "false",
      "trigger": "none",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "advEmptyTooltip",
      "class": "advEmptyTooltip",
      "advanced": "false",
      "trigger": "none",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggerhover",
      "class": "triggerhover",
      "advanced": "true",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggerclick",
      "class": "triggerclick",
      "advanced": "true",
      "trigger": "click",
      "tooltipBody": "Tooltip Message",
      "triggerClass": "triggerClick"
     },
     {
      "aura:id": "triggerfocus",
      "class": "triggerfocus",
      "advanced": "true",
      "trigger": "focus",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggernone",
      "class": "triggernone",
      "advanced": "true",
      "trigger": "none",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggerempty",
      "class": "triggerempty",
      "advanced": "true",
      "trigger": "",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggerhoveradvfalse",
      "class": "triggerhoveradvfalse",
      "advanced": "false",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggerclickadvfalse",
      "class": "triggerclickadvfalse",
      "advanced": "false",
      "trigger": "click",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggerfocusadvfalse",
      "class": "triggerfocusadvfalse",
      "advanced": "false",
      "trigger": "focus",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggernoneadvfalse",
      "class": "triggernoneadvfalse",
      "advanced": "false",
      "trigger": "none",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "triggeremptyadvfalse",
      "class": "triggeremptyadvfalse",
      "advanced": "false",
      "trigger": "",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "trigClassAlpha",
      "class": "trigClassAlpha",
      "advanced": "false",
      "triggerClass": "myTriggerClass",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "trigClassNum",
      "class": "trigClassNum",
      "advanced": "false",
      "triggerClass": "1234",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "trigClassSpl",
      "class": "trigClassSpl",
      "advanced": "false",
      "triggerClass": "ab:12;$%∆∑π¬",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeInDuration0",
      "class": "fadeInDuration0",
      "advanced": "false",
      "fadeIn": "true",
      "fadeInDuration": "0",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeInDuration200",
      "class": "fadeInDuration200",
      "advanced": "false",
      "trigger": "hover",
      "fadeIn": "true",
      "fadeInDuration": "200",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeInDuration5000",
      "class": "fadeInDuration5000",
      "advanced": "false",
      "trigger": "hover",
      "fadeIn": "true",
      "fadeInDuration": "5000",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeInDuration-1000",
      "class": "fadeInDuration-1000",
      "advanced": "false",
      "trigger": "hover",
      "fadeIn": "true",
      "fadeInDuration": "-1000",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeInDurationempty",
      "class": "fadeInDurationempty",
      "advanced": "false",
      "trigger": "hover",
      "fadeIn": "true",
      "fadeInDuration": "",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeOutDuration0",
      "class": "fadeOutDuration0",
      "advanced": "false",
      "fadeOut": "true",
      "fadeOutDuration": "0",
      "trigger": "hover",
      "isVisible": "false",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeOutDuration200",
      "class": "fadeOutDuration200",
      "advanced": "false",
      "trigger": "hover",
      "fadeOut": "true",
      "fadeOutDuration": "200",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeOutDuration5000",
      "class": "fadeOutDuration5000",
      "advanced": "false",
      "trigger": "hover",
      "fadeOut": "true",
      "fadeOutDuration": "5000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeOutDuration-1000",
      "class": "fadeOutDuration-1000",
      "advanced": "false",
      "trigger": "hover",
      "fadeOut": "true",
      "fadeOutDuration": "-1000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeOutDurationempty",
      "class": "fadeOutDurationempty",
      "advanced": "false",
      "trigger": "hover",
      "fadeOut": "true",
      "fadeOutDuration": "",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeIn1000fadeOut0",
      "class": "fadeIn1000fadeOut0",
      "fadeInDuration": "1000",
      "fadeOutDuration": "0",
      "trigger": "hover",
      "isVisible": "false",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeIn100fadeOut3000",
      "class": "fadeIn100fadeOut3000",
      "fadeInDuration": "100",
      "fadeOutDuration": "3000",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeIn3000fadeOut100",
      "class": "fadeIn3000fadeOut100",
      "fadeInDuration": "3000",
      "fadeOutDuration": "100",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeIn0fadeOut1000",
      "class": "fadeIn0fadeOut1000",
      "fadeInDuration": "0",
      "fadeOutDuration": "1000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeIn-1000fadeOut3000",
      "class": "fadeIn-1000fadeOut3000",
      "fadeInDuration": "-1000",
      "fadeOutDuration": "3000",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeIn3000fadeOut-1000",
      "class": "fadeIn3000fadeOut-1000",
      "fadeInDuration": "3000",
      "fadeOutDuration": "-1000",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "fadeInfadeOutEmpty",
      "class": "fadeInfadeOutEmpty",
      "fadeInDuration": "",
      "fadeOutDuration": "",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay0",
      "class": "delay0",
      "advanced": "false",
      "delay": "0",
      "trigger": "hover",
      "isVisible": "false",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay300",
      "class": "delay300",
      "advanced": "false",
      "trigger": "hover",
      "delay": "300",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay3000",
      "class": "delay3000",
      "advanced": "false",
      "trigger": "hover",
      "delay": "3000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay-150",
      "class": "delay-150",
      "advanced": "false",
      "trigger": "hover",
      "delay": "-150",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay-1000",
      "class": "delay-1000",
      "advanced": "false",
      "trigger": "hover",
      "delay": "-1000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delayempty",
      "class": "delayempty",
      "advanced": "false",
      "trigger": "hover",
      "delay": "",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay0FadeIn",
      "class": "delay0FadeIn",
      "advanced": "false",
      "fadeInDuration": "500",
      "delay": "0",
      "trigger": "hover",
      "isVisible": "false",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay300FadeIn",
      "class": "delay300FadeIn",
      "advanced": "false",
      "trigger": "hover",
      "fadeInDuration": "500",
      "delay": "300",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay3000FadeIn",
      "class": "delay3000FadeIn",
      "advanced": "false",
      "trigger": "hover",
      "fadeInDuration": "500",
      "delay": "3000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay-200FadeIn",
      "class": "delay-200FadeIn",
      "advanced": "false",
      "trigger": "hover",
      "fadeInDuration": "500",
      "delay": "-200",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay-1000FadeIn",
      "class": "delay-1000FadeIn",
      "advanced": "false",
      "trigger": "hover",
      "fadeInDuration": "500",
      "delay": "-1000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delayEmptyFadeIn",
      "class": "delayEmptyFadeIn",
      "advanced": "false",
      "trigger": "hover",
      "fadeInDuration": "500",
      "delay": "",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay0FadeOut",
      "class": "delay0FadeOut",
      "advanced": "false",
      "fadeOutDuration": "500",
      "delay": "0",
      "trigger": "hover",
      "isVisible": "false",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay300FadeOut",
      "class": "delay300FadeOut",
      "advanced": "false",
      "trigger": "hover",
      "fadeOutDuration": "500",
      "delay": "300",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay3000FadeOut",
      "class": "delay3000FadeOut",
      "advanced": "false",
      "trigger": "hover",
      "fadeOutDuration": "500",
      "delay": "3000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay-200FadeOut",
      "class": "delay-200FadeOut",
      "advanced": "false",
      "trigger": "hover",
      "fadeOutDuration": "500",
      "delay": "-200",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delay-1000FadeOut",
      "class": "delay-1000FadeOut",
      "advanced": "false",
      "trigger": "hover",
      "fadeOutDuration": "500",
      "delay": "-1000",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "delayEmptyFadeOut",
      "class": "delayEmptyFadeOut",
      "advanced": "false",
      "trigger": "hover",
      "fadeOutDuration": "500",
      "delay": "",
      "isVisible": "true",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "classAlpha",
      "advanced": "false",
      "class": "classAlpha myOwnClassHERE",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "classNum",
      "advanced": "false",
      "class": "classNum 1234",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "classSpl",
      "advanced": "false",
      "class": "classSpl a:12;å¬∑πßå",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "classDash",
      "advanced": "false",
      "class": "classDash --a",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "bodyNormal",
      "class": "bodyNormal",
      "advanced": "false",
      "trigger": "hover",
      "tooltipBody": "This is a fairly normal amount of text that you would put in the tooltip. Maybe a bit more is fine too. Don't forget to include spl. chars (\"!@#$%*^ ÅıÇΩœ∑®†¥ˆøπ¬˚∆˙©ƒ∂ßåΩ≈ç√∫˜µ≤≥ & \")"
     },
     {
      "aura:id": "bodyMany",
      "class": "bodyMany",
      "advanced": "false",
      "trigger": "hover",
      "tooltipBody": "This is a fairly normal amount of text that you would put in the tooltip. Maybe a bit more is fine too. Don't forget to include spl. chars (\"!@#$%*^ ÅıÇΩœ∑®†¥ˆøπ¬˚∆˙©ƒ∂ßåΩ≈ç√∫˜µ≤≥ & \") This info here is just to add some more text to the tooltip. Just adding more and more! It's like theres no end to this right? Wrong! All you need is patience. Man! I have to move this test further down the screen just because this tooltip has so many characters! Its just growing and growing. I don't know if the text will overflow. It doesn't look like it will. This was pretty well written so its all been handled very well! Don't you worry, we've got your back!"
     },
     {
      "aura:id": "bodyHTML",
      "class": "bodyHTML",
      "advanced": "false",
      "trigger": "hover",
      "tooltipBody": "<h1>Hello</h1>"
     },
     {
      "aura:id": "bodyEmpty",
      "class": "bodyEmpty",
      "advanced": "false",
      "trigger": "hover",
      "tooltipBody": ""
     },
     {
      "aura:id": "domIdAlpha",
      "class": "domIdAlpha",
      "advanced": "false",
      "domId": "testDomId",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "domIdNum",
      "class": "domIdNum",
      "advanced": "false",
      "domId": "1234",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "domIdSpl",
      "class": "domIdSpl",
      "advanced": "false",
      "domId": "a:1;%$∆ß∫åœ∑",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     },
     {
      "aura:id": "domIdEmpty",
      "class": "domIdEmpty",
      "advanced": "false",
      "domId": "",
      "trigger": "hover",
      "tooltipBody": "Tooltip Message"
     }
    ],
    "ui:label": [
     {
      "aura:id": "defaultlabel",
      "for": "default",
      "label": "?"
     },
     {
      "aura:id": "bodyalphanumlabel",
      "for": "input",
      "label": "ab54@#$Ω®"
     },
     {
      "aura:id": "disabledfalselabel",
      "for": "input",
      "label": "?"
     },
     {
      "aura:id": "disabledtruelabel",
      "for": "input",
      "label": "?"
     },
     {
      "aura:id": "disabledemptylabel",
      "for": "input",
      "label": "?"
     },
     {
      "aura:id": "triggerhoverlabel",
      "for": "triggerhover",
      "label": "?"
     },
     {
      "aura:id": "triggerclicklabel",
      "for": "triggerclick",
      "label": "?"
     },
     {
      "aura:id": "triggernonelabel",
      "for": "triggernone",
      "label": "?"
     },
     {
      "aura:id": "triggeremptylabel",
      "for": "triggerempty",
      "label": "?"
     },
     {
      "aura:id": "triggerhoveradvfalselabel",
      "for": "triggerhoveradvfalse",
      "label": "?"
     },
     {
      "aura:id": "triggerclickadvfalselabel",
      "for": "triggerclickadvfalse",
      "label": "?"
     },
     {
      "aura:id": "triggernoneadvfalselabel",
      "for": "triggernoneadvfalse",
      "label": "?"
     },
     {
      "aura:id": "triggeremptyadvfalselabel",
      "for": "triggeremptyadvfalse",
      "label": "?"
     },
     {
      "aura:id": "trigClassAlphalabel",
      "for": "trigClassAlpha",
      "label": "?"
     },
     {
      "aura:id": "trigClassNumlabel",
      "for": "trigClassNum",
      "label": "?"
     },
     {
      "aura:id": "trigClassSpllabel",
      "for": "trigClassSpl",
      "label": "?"
     },
     {
      "aura:id": "fadeInDuration0label",
      "for": "fadeInDuration0",
      "label": "?"
     },
     {
      "aura:id": "fadeInDuration200label",
      "for": "fadeInDuration200",
      "label": "?"
     },
     {
      "aura:id": "fadeInDuration5000label",
      "for": "fadeInDuration5000",
      "label": "?"
     },
     {
      "aura:id": "fadeInDuration-1000label",
      "for": "fadeInDuration-1000",
      "label": "?"
     },
     {
      "aura:id": "fadeInDurationemptylabel",
      "for": "fadeInDurationempty",
      "label": "?"
     },
     {
      "aura:id": "fadeOutDuration0label",
      "for": "fadeOutDuration0",
      "label": "?"
     },
     {
      "aura:id": "fadeOutDuration200label",
      "for": "fadeOutDuration200",
      "label": "?"
     },
     {
      "aura:id": "fadeOutDuration5000label",
      "for": "fadeOutDuration5000",
      "label": "?"
     },
     {
      "aura:id": "fadeOutDuration-1000label",
      "for": "fadeOutDuration-1000",
      "label": "?"
     },
     {
      "aura:id": "fadeOutDurationemptylabel",
      "for": "fadeOutDurationempty",
      "label": "?"
     },
     {
      "aura:id": "fadeIn1000fadeOut0label",
      "for": "fadeIn1000fadeOut0",
      "label": "?"
     },
     {
      "aura:id": "fadeIn100fadeOut3000label",
      "for": "fadeIn100fadeOut3000",
      "label": "?"
     },
     {
      "aura:id": "fadeIn3000fadeOut100label",
      "for": "fadeIn3000fadeOut100",
      "label": "?"
     },
     {
      "aura:id": "fadeIn0fadeOut1000label",
      "for": "fadeIn0fadeOut1000",
      "label": "?"
     },
     {
      "aura:id": "fadeIn-1000fadeOut3000label",
      "for": "fadeIn-1000fadeOut3000",
      "label": "?"
     },
     {
      "aura:id": "fadeIn3000fadeOut-1000label",
      "for": "fadeIn3000fadeOut-1000",
      "label": "?"
     },
     {
      "aura:id": "fadeInfadeOutEmptylabel",
      "for": "fadeInfadeOutEmpty",
      "label": "?"
     },
     {
      "aura:id": "delay0label",
      "for": "delay0",
      "label": "?"
     },
     {
      "aura:id": "delay300label",
      "for": "delay300",
      "label": "?"
     },
     {
      "aura:id": "delay3000label",
      "for": "delay3000",
      "label": "?"
     },
     {
      "aura:id": "delay-150label",
      "for": "delay-150",
      "label": "?"
     },
     {
      "aura:id": "delay-1000label",
      "for": "delay-1000",
      "label": "?"
     },
     {
      "aura:id": "delayemptylabel",
      "for": "delayempty",
      "label": "?"
     },
     {
      "aura:id": "delay0FadeInlabel",
      "for": "delay0FadeIn",
      "label": "?"
     },
     {
      "aura:id": "delay300FadeInlabel",
      "for": "delay300FadeIn",
      "label": "?"
     },
     {
      "aura:id": "delay3000FadeInlabel",
      "for": "delay3000FadeIn",
      "label": "?"
     },
     {
      "aura:id": "delay-200FadeInlabel",
      "for": "delay-200FadeIn",
      "label": "?"
     },
     {
      "aura:id": "delay-1000FadeInlabel",
      "for": "delay-1000FadeIn",
      "label": "?"
     },
     {
      "aura:id": "delayEmptyFadeInlabel",
      "for": "delayEmptyFadeIn",
      "label": "?"
     },
     {
      "aura:id": "delay0FadeOutlabel",
      "for": "delay0FadeOut",
      "label": "?"
     },
     {
      "aura:id": "delay300FadeOutlabel",
      "for": "delay300FadeOut",
      "label": "?"
     },
     {
      "aura:id": "delay3000FadeOutlabel",
      "for": "delay3000FadeOut",
      "label": "?"
     },
     {
      "aura:id": "delay-200FadeOutlabel",
      "for": "delay-200FadeOut",
      "label": "?"
     },
     {
      "aura:id": "delay-1000FadeOutlabel",
      "for": "delay-1000FadeOut",
      "label": "?"
     },
     {
      "aura:id": "delayEmptyFadeOutlabel",
      "for": "delayEmptyFadeOut",
      "label": "?"
     },
     {
      "aura:id": "classAlphalabel",
      "for": "classAlpha",
      "label": "Class"
     },
     {
      "aura:id": "classNumLabel",
      "for": "classNum",
      "label": "Class"
     },
     {
      "aura:id": "classSplLabel",
      "for": "classSpl",
      "label": "Class"
     },
     {
      "aura:id": "classDashLabel",
      "for": "classDash",
      "label": "Class"
     },
     {
      "aura:id": "bodyNormallabel",
      "for": "bodyNormal",
      "label": "?"
     },
     {
      "aura:id": "bodyManylabel",
      "for": "bodyMany",
      "label": "?"
     },
     {
      "aura:id": "bodyHTMLlabel",
      "for": "bodyHTML",
      "label": "?"
     },
     {
      "aura:id": "bodyEmptylabel",
      "for": "bodyHTML",
      "label": "?"
     },
     {
      "aura:id": "domIdAlphaLabel",
      "for": "domIdAlpha",
      "label": "?"
     },
     {
      "aura:id": "domIdNumLabel",
      "for": "domIdNum",
      "label": "?"
     },
     {
      "aura:id": "domIdSplLabel",
      "for": "domIdSpl",
      "label": "?"
     },
     {
      "aura:id": "domIdEmptyLabel",
      "for": "domIdEmpty",
      "label": "?"
     }
    ],
    "ui:image": [
     {
      "aura:id": "bodyhtmlimgtag",
      "src": "http://ccoenraets.github.io/salesforce-mobile-sdk-presentation/images/salesforce-logo.png",
      "class": "logo",
      "alt": "sfdc logo"
     }
    ],
    "ui:button": [
     {
      "aura:id": "advTrueButton",
      "label": "click me",
      "press": "{!c.handleClickTrue}"
     },
     {
      "aura:id": "advFalseButton",
      "label": "click me",
      "press": "{!c.handleClickFalse}"
     },
     {
      "aura:id": "advEmptyButton",
      "label": "click me",
      "press": "{!c.handleClickEmpty}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "inputadvtrue",
      "placeholder": "Focus here"
     },
     {
      "aura:id": "triggerfocusadvfalseinput",
      "placeholder": "Focus here"
     }
    ],
    "ui:containerManager": [
     {}
    ]
   }
  },
  "tooltip_Test.cmp": {
   "attributes": {
    "renderItem": {
     "name": "renderItem",
     "type": "String",
     "default": "all"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{! v.renderItem == 'triggers' || v.renderItem == 'all'}"
     },
     {
      "isTrue": "{! v.renderItem == 'advancedPositioning' || v.renderItem == 'all'}"
     }
    ],
    "ui:tooltip": [
     {
      "aura:id": "trigger1",
      "advanced": "true",
      "trigger": "click"
     },
     {
      "aura:id": "tooltip1",
      "advanced": "true",
      "trigger": "focus",
      "tooltipBody": "Hello world"
     },
     {
      "aura:id": "tooltip2",
      "advanced": "true",
      "trigger": "hover",
      "tooltipBody": "Long enough to go off the edge of the screen"
     },
     {
      "aura:id": "tooltip3",
      "advanced": "true",
      "trigger": "hover",
      "tooltipBody": "Long enough to go off the edge of the screen"
     },
     {
      "aura:id": "tooltip4",
      "advanced": "true",
      "trigger": "hover",
      "tooltipBody": "Long enough to go off the edge of the screen"
     },
     {
      "aura:id": "tooltip5",
      "advanced": "true",
      "trigger": "hover",
      "tooltipBody": "Long enough to go off the edge of the screen"
     }
    ],
    "ui:containerManager": [
     {}
    ]
   }
  },
  "treeNode_Test.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:treeNode": [
     {
      "aura:id": "root",
      "title": "/",
      "expanded": "{!true}"
     },
     {
      "aura:id": "iota",
      "href": "#iota",
      "title": "iota"
     },
     {
      "aura:id": "A",
      "title": "A"
     },
     {
      "aura:id": "mu",
      "href": "#mu",
      "title": "mu"
     },
     {
      "aura:id": "B",
      "title": "B"
     },
     {
      "aura:id": "lambda",
      "href": "#lambda",
      "title": "lambda"
     },
     {
      "aura:id": "D",
      "title": "D"
     },
     {
      "aura:id": "gamma",
      "href": "#gamma",
      "title": "gamma"
     },
     {
      "aura:id": "G",
      "title": "G"
     },
     {
      "aura:id": "pi",
      "href": "#pi",
      "title": "pi"
     },
     {
      "aura:id": "rho",
      "href": "#rho",
      "title": "rho"
     },
     {
      "aura:id": "tau",
      "href": "#tau",
      "title": "tau"
     },
     {
      "aura:id": "E",
      "title": "E"
     },
     {
      "aura:id": "alpha",
      "href": "#alpha",
      "title": "alpha"
     },
     {
      "aura:id": "beta",
      "href": "#beta",
      "title": "beta"
     },
     {
      "aura:id": "F",
      "title": "F"
     },
     {
      "aura:id": "H",
      "title": "H"
     },
     {
      "aura:id": "chi",
      "href": "#chi",
      "title": "chi"
     },
     {
      "aura:id": "psi",
      "href": "#psi",
      "title": "psi"
     },
     {
      "aura:id": "omega",
      "href": "#omega",
      "title": "omega"
     },
     {
      "aura:id": "C",
      "title": "C"
     }
    ]
   }
  },
  "tree_Test.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:tree": [
     {
      "aura:id": "automobiles"
     },
     {
      "aura:id": "planes"
     }
    ],
    "ui:treeNode": [
     {
      "aura:id": "toyota",
      "title": "Toyota"
     },
     {
      "aura:id": "toyota.sedan",
      "title": "Sedan"
     },
     {
      "aura:id": "toyota.camry",
      "title": "Camry"
     },
     {
      "aura:id": "toyota.corolla",
      "title": "Corolla"
     },
     {
      "aura:id": "toyota.coupe",
      "title": "Coupe"
     },
     {
      "aura:id": "toyota.yaris",
      "title": "Yaris"
     },
     {
      "aura:id": "toyota.futuremodel"
     },
     {
      "aura:id": "toyota.secretModel"
     },
     {
      "aura:id": "toyota.pod",
      "title": "Pod"
     },
     {
      "aura:id": "toyota.truck",
      "title": "Truck"
     },
     {
      "aura:id": "toyota.tacoma",
      "title": "Tacoma"
     },
     {
      "aura:id": "tesla",
      "title": "Tesla"
     },
     {
      "aura:id": "tesla.sedan",
      "title": "Sedan"
     },
     {
      "aura:id": "tesla.models",
      "title": "Model-S"
     },
     {
      "aura:id": "tesla.sports",
      "title": "Sports Car"
     },
     {
      "aura:id": "tesla.roadster",
      "title": "Roadster"
     },
     {
      "aura:id": "tesla.suv",
      "title": "SUV"
     },
     {
      "aura:id": "ford",
      "title": "Ford"
     },
     {
      "aura:id": "ford.sedan",
      "title": "Sedan"
     },
     {
      "aura:id": "ford.focus",
      "title": "Focus"
     },
     {
      "aura:id": "ford.fusion",
      "title": "Fusion"
     },
     {
      "aura:id": "ford.taurus",
      "title": "Taurus"
     },
     {
      "aura:id": "ford.truck",
      "title": "Truck"
     },
     {
      "aura:id": "ford.f150",
      "title": "F-150"
     },
     {
      "aura:id": "ford.superduty",
      "title": "Super Duty"
     },
     {
      "aura:id": "ford.sports",
      "title": "Sports Car"
     },
     {
      "aura:id": "ford.mustang",
      "title": "Mustang"
     },
     {
      "aura:id": "boeing",
      "title": "Boeing"
     },
     {
      "aura:id": "boeing.737",
      "title": "737"
     },
     {
      "aura:id": "boeing.747",
      "title": "747"
     },
     {
      "aura:id": "boeing.777",
      "title": "777"
     },
     {
      "aura:id": "airbus",
      "title": "Airbus"
     },
     {
      "aura:id": "airbus.a380",
      "title": "A-380"
     },
     {
      "aura:id": "xflight",
      "title": "X Flight"
     }
    ]
   }
  },
  "virtualDataGridItem.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "description": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "virtualDataGridProvider_Test.cmp": {
   "attributes": {
    "currentPage": {
     "name": "currentPage",
     "type": "Integer"
    },
    "pageSize": {
     "name": "pageSize",
     "type": "Integer"
    },
    "loadData": {
     "name": "loadData",
     "type": "Integer"
    },
    "totalPages": {
     "name": "totalPages",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "virtualDataGrid_Test.cmp": {
   "attributes": {
    "testFixedHeader": {
     "name": "testFixedHeader",
     "type": "Boolean",
     "default": "false"
    },
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "10"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalPages": {
     "name": "totalPages",
     "type": "Integer",
     "default": "5"
    },
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "index": {
     "name": "index",
     "type": "Integer"
    },
    "count": {
     "name": "count",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "fireDP",
      "label": "Fire datagrid's provide",
      "press": "{!c.replaceData}"
     },
     {
      "aura:id": "refreshGrid",
      "label": "Refresh",
      "press": "{!c.refreshData}"
     },
     {
      "aura:id": "addRow",
      "label": "Add row",
      "press": "{!c.handleAddRow}"
     },
     {
      "aura:id": "insert",
      "label": "Insert",
      "press": "{!c.handleInsert}"
     },
     {
      "aura:id": "remove",
      "label": "Remove",
      "press": "{!c.handleRemove}"
     }
    ],
    "ui:inputText": [
     {
      "aura:id": "index",
      "label": "index",
      "labelPosition": "hidden",
      "placeholder": "index",
      "value": "{!v.index}"
     },
     {
      "aura:id": "count",
      "label": "count",
      "labelPosition": "hidden",
      "placeholder": "count",
      "value": "{!v.count}"
     }
    ],
    "ui:virtualDataGrid": [
     {
      "aura:id": "grid",
      "fixedHeader": "{!v.testFixedHeader}"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataModel"
     }
    ],
    "ui:dataGridColumn": [
     {
      "name": "Name",
      "label": "Name"
     },
     {
      "name": "Phone",
      "label": "Phone"
     },
     {
      "name": "Balance",
      "label": "Balance"
     }
    ],
    "uitest:virtualDataGridItem": [
     {
      "value": "{!item.name}"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!item.phone}"
     },
     {
      "value": "{!item.balance}"
     }
    ],
    "uitest:virtualDataGridProvider_Test": [
     {
      "aura:id": "provider",
      "sortBy": "{!v.sortBy}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalPages": "{!v.totalPages}",
      "totalItems": "{!v.totalItems}"
     }
    ]
   }
  },
  "virtualDataGrid_columnsTest.cmp": {
   "attributes": {
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "10"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalItems": {
     "name": "totalItems",
     "type": "Integer"
    },
    "index": {
     "name": "index",
     "type": "Integer"
    },
    "count": {
     "name": "count",
     "type": "Integer"
    },
    "className": {
     "name": "className",
     "type": "String"
    },
    "rowIndex": {
     "name": "rowIndex",
     "type": "Integer"
    },
    "gridItems": {
     "name": "gridItems",
     "type": "List"
    },
    "gridSelectedItems": {
     "name": "gridSelectedItems",
     "type": "List"
    },
    "useRowHeaders": {
     "name": "useRowHeaders",
     "type": "Boolean",
     "default": "false"
    },
    "provideNoData": {
     "name": "provideNoData",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.currentPage}",
     "action": "{!c.handleCurrentPageChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "class": "kitchenButton",
      "label": "Change Columns",
      "press": "{!c.switchColumn}"
     },
     {
      "class": "kitchenButton",
      "label": "Re-fire datagrid's provide",
      "press": "{!c.replaceData}"
     },
     {
      "class": "kitchenButton",
      "label": "Fire Data Provider With Empty Data",
      "press": "{!c.emptyData}"
     },
     {
      "label": "Spit Out Items",
      "press": "{!c.spit}"
     }
    ],
    "ui:inputCheckbox": [
     {
      "label": "Provide no data",
      "value": "{!v.provideNoData}"
     }
    ],
    "ui:outputText": [
     {
      "label": "Sorting By:",
      "value": "{!v.sortBy}"
     },
     {
      "value": "{!item.id}"
     },
     {
      "value": "{!item.subject}"
     },
     {
      "value": "{!item.date}"
     },
     {
      "value": "{!item.name}"
     },
     {
      "value": "{!item.relatedTo}"
     },
     {
      "value": "{!item.id + ':' + item.subject + ':' + item.who.name + ':' + item.what.name + ':' + item.activityDate}"
     }
    ],
    "ui:virtualDataGrid": [
     {
      "aura:id": "grid",
      "onsort": "{!c.onsort}",
      "fixedHeader": "true",
      "useRowHeaders": "{!v.useRowHeaders}"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataModel"
     }
    ],
    "ui:dataGridColumn": [
     {
      "name": "id",
      "label": "Id",
      "sortable": "true"
     },
     {
      "name": "subject",
      "label": "Subject",
      "sortable": "true"
     },
     {
      "name": "date",
      "label": "date"
     },
     {
      "name": "name",
      "label": "name"
     },
     {
      "name": "relatedTo",
      "label": "related to"
     }
    ],
    "uitest:dataGrid_TestDataProvider": [
     {
      "aura:id": "provider",
      "sortBy": "{!v.sortBy}",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalPages": "{!v.totalPages}",
      "totalItems": "{!v.totalItems}"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "items",
      "var": "item",
      "items": "{!v.gridItems}"
     }
    ]
   }
  },
  "virtualDataGrid_dataProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "virtualDataGrid_onSortTest.cmp": {
   "attributes": {
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:virtualDataGrid": [
     {
      "aura:id": "grid",
      "onsort": "{!c.onsort}",
      "fixedHeader": "true"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataModel"
     }
    ],
    "ui:dataGridColumn": [
     {
      "name": "id",
      "label": "Id",
      "sortable": "true"
     },
     {
      "name": "name",
      "label": "Name",
      "sortable": "true"
     },
     {
      "name": "gender",
      "label": "Gender",
      "sortable": "true",
      "initialDirectionOnSort": "ascending"
     },
     {
      "name": "age",
      "label": "Age",
      "sortable": "true"
     },
     {
      "name": "grade",
      "label": "Grade"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!item.id}"
     },
     {
      "value": "{!item.name}"
     },
     {
      "value": "{!item.gender}"
     },
     {
      "value": "{!item.age}"
     },
     {
      "value": "{!item.grade}"
     },
     {
      "aura:id": "sortBy",
      "value": ""
     }
    ],
    "uitest:virtualDataGrid_dataProvider": [
     {
      "aura:id": "provider",
      "sortBy": "{!v.sortBy}"
     }
    ]
   }
  },
  "virtualDataGrid_resizeTest.cmp": {
   "attributes": {
    "prevResize": {
     "name": "prevResize",
     "type": "Object"
    },
    "initialWidths": {
     "name": "initialWidths",
     "type": "Integer[]",
     "default": "[200, 400, 100]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:virtualDataGrid": [
     {
      "aura:id": "grid",
      "class": "testGrid",
      "enableResizableColumns": "true",
      "onColumnResize": "{!c.onResize}"
     },
     {
      "aura:id": "grid2",
      "class": "testGrid",
      "enableResizableColumns": "true",
      "onColumnResize": "{!c.onResize}"
     }
    ],
    "aura:set": [
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataModel"
     },
     {
      "attribute": "headerColumns"
     },
     {
      "attribute": "columns"
     },
     {
      "attribute": "dataModel"
     }
    ],
    "ui:dataGridColumn": [
     {
      "name": "id",
      "label": "Id",
      "sortable": "true"
     },
     {
      "name": "name",
      "label": "Name"
     },
     {
      "name": "grade",
      "label": "Grade"
     },
     {
      "name": "",
      "label": "Actions",
      "hideLabel": "true"
     },
     {
      "name": "id",
      "label": "Id",
      "sortable": "true"
     },
     {
      "name": "name",
      "label": "Name"
     },
     {
      "name": "grade",
      "label": "Grade"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!item.id}"
     },
     {
      "value": "{!item.name}"
     },
     {
      "value": "{!item.grade}"
     },
     {
      "aura:id": "srcColumn",
      "value": "{!v.prevResize.src.label}"
     },
     {
      "aura:id": "srcIndex",
      "value": "{!v.prevResize.src.index}"
     },
     {
      "aura:id": "srcWidth",
      "value": "{!v.prevResize.width}"
     },
     {
      "value": "{!item.id}"
     },
     {
      "value": "{!item.name}"
     },
     {
      "value": "{!item.grade}"
     }
    ],
    "uitest:virtualDataGrid_dataProvider": [
     {},
     {}
    ],
    "ui:button": [
     {
      "aura:id": "showGrid2Btn",
      "label": "Show Grid #2",
      "press": "{!c.showGrid2}"
     },
     {
      "aura:id": "addColBtn",
      "label": "Add Column",
      "press": "{!c.addCol}"
     },
     {
      "aura:id": "removeColBtn",
      "label": "Remove Column",
      "press": "{!c.removeCol}"
     },
     {
      "aura:id": "switchColBtn",
      "label": "Switch Column",
      "press": "{!c.switchCol}"
     }
    ]
   }
  },
  "virtualList_Test.cmp": {
   "attributes": {
    "pageSize": {
     "name": "pageSize",
     "type": "Integer",
     "default": "100"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "default": "1"
    },
    "totalPages": {
     "name": "totalPages",
     "type": "Integer",
     "default": "5"
    },
    "template": {
     "name": "template",
     "type": "Aura.ComponentDefRef[]",
     "description": "template"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:testVirtualListTemplate": [
     {},
     {
      "id": "{!item._id}",
      "index": "{!item.index}",
      "name": "{!item.name}",
      "balance": "{!item.balance}",
      "friends": "{!item.friends}"
     }
    ],
    "ui:button": [
     {
      "class": "kitchenButton",
      "label": "Re-fire datagrid's provide",
      "press": "{!c.replaceData}"
     },
     {
      "class": "kitchenButtonEmptyData",
      "label": "Fire Data Provider With Empty Data",
      "press": "{!c.emptyData}"
     }
    ],
    "ui:virtualList": [
     {
      "aura:id": "list",
      "itemVar": "item"
     }
    ],
    "aura:set": [
     {
      "attribute": "dataProvider"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "uitest:virtualList_TestDataProvider": [
     {
      "aura:id": "provider",
      "pageSize": "{!v.pageSize}",
      "currentPage": "{!v.currentPage}",
      "totalPages": "{!v.totalPages}",
      "totalItems": "{!v.totalItems}"
     }
    ]
   }
  },
  "virtualList_TestDataProvider.cmp": {
   "attributes": {
    "currentPage": {
     "name": "currentPage",
     "type": "Integer"
    },
    "pageSize": {
     "name": "pageSize",
     "type": "Integer"
    },
    "loadData": {
     "name": "loadData",
     "type": "Integer"
    },
    "totalPages": {
     "name": "totalPages",
     "type": "Integer"
    },
    "empty": {
     "name": "empty",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "provide": {
     "name": "provide",
     "action": "{!c.handleProvide}"
    }
   },
   "methods": {},
   "dependencies": {}
  }
 },
 "updateTest": {
  "updateBase.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "extensible": "true"
     }
    ]
   }
  },
  "updateWithPreload.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "preload": "updateTest",
      "extends": "updateTest:updateWithoutPreload"
     }
    ]
   }
  },
  "updateWithoutPreload.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {
      "extends": "updateTest:updateBase",
      "extensible": "true"
     }
    ],
    "updateTest:updateable": [
     {}
    ],
    "updateTest:updateableAlso": [
     {}
    ]
   }
  },
  "updateHandling.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "aura:clientOutOfSync",
     "action": "{!c.handleUpdate}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "updateWithoutHandling.cmp": {
   "attributes": {
    "text": {
     "name": "text",
     "type": "string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "value": "{!v.text}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "update",
      "class": "update",
      "press": "{!c.updateText}",
      "label": "update text"
     },
     {
      "aura:id": "trigger",
      "class": "trigger",
      "press": "{!c.sendOutdatedRequest}",
      "label": "call action"
     }
    ]
   }
  },
  "updateable.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "click": {
     "name": "click",
     "type": "updateTest:updateableEvent"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "updateableAlso.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "updateableOther.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "utilTest": {
  "defaultUtils.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ]
   }
  },
  "isEmpty.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "results": {
  "testProjectCreation-sample.app": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:application": [
     {}
    ]
   }
  }
 },
 "ui": {
  "abstractDataGrid.cmp": {
   "attributes": {
    "items": {
     "name": "items",
     "type": "List",
     "description": "Arbitrary list of objects to iterate over. Object type to avoid expensive wrapping."
    },
    "itemShape": {
     "name": "itemShape",
     "type": "Object",
     "description": "Template object with null fields to describe item shape. If not set, then concrete should derive shape from columns facet."
    },
    "mode": {
     "name": "mode",
     "type": "String",
     "default": "VIEW",
     "description": "{ VIEW, VIEW_ONLY, EDIT, EDIT_ONLY }"
    },
    "state": {
     "name": "state",
     "type": "String",
     "default": "idle",
     "description": "{ idle, loading, error }"
    },
    "sortable": {
     "name": "sortable",
     "type": "Boolean",
     "default": "true",
     "description": "Toggle sorting by columns (via column header)."
    },
    "createable": {
     "name": "createable",
     "type": "Boolean",
     "default": "false",
     "description": "Describes whether the implementation should enable a creation pattern."
    },
    "selectAll": {
     "name": "selectAll",
     "type": "Boolean",
     "default": "false",
     "description": "All selected."
    },
    "selectedItems": {
     "name": "selectedItems",
     "type": "List",
     "description": "A list of selected items."
    },
    "sortBy": {
     "name": "sortBy",
     "type": "String",
     "description": "Comma-separated list of columns predicated by a '-' for descending."
    },
    "dataProvider": {
     "name": "dataProvider",
     "type": "Aura.Component[]",
     "description": "Facet for ui:dataProvider - responsible for fetching data."
    },
    "dataWriter": {
     "name": "dataWriter",
     "type": "Aura.Component[]",
     "description": "Facet for ui:dataWriter - responsible for writing data. Implementation TBD."
    },
    "columns": {
     "name": "columns",
     "type": "Aura.Component[]",
     "description": "Configuration for columns."
    },
    "summaryRow": {
     "name": "summaryRow",
     "type": "Aura.ComponentDefRef[]",
     "description": "Configuration for summary rows."
    },
    "actionDelegate": {
     "name": "actionDelegate",
     "type": "Aura.Component[]",
     "description": "Row action delegate."
    }
   },
   "imports": {},
   "events": {
    "refresh": {
     "name": "refresh",
     "type": "ui:refresh",
     "description": "Provides fresh data from the dataProvider."
    },
    "addRemove": {
     "name": "addRemove",
     "type": "ui:addRemove",
     "description": "Command event for grid to insert or delete items as rows."
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.sortBy}",
     "action": "{!c.handleSortByChange}"
    },
    "refresh": {
     "name": "refresh",
     "action": "{!c.handleRefresh}"
    },
    "addRemove": {
     "name": "addRemove",
     "action": "{!c.handleAddRemove}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "abstractList.cmp": {
   "attributes": {
    "itemTemplate": {
     "name": "itemTemplate",
     "type": "Aura.ComponentDefRef[]",
     "required": "true",
     "description": "A ComponentDefRef to use as the template for each generated row in the list."
    },
    "items": {
     "name": "items",
     "type": "Object[]",
     "description": "An array of arbitrary map objects representing the rows of data in the list."
    },
    "itemVar": {
     "name": "itemVar",
     "type": "String",
     "required": "true",
     "description": "The name by which to refer to the current data object inside of the template for each row."
    },
    "dataProvider": {
     "name": "dataProvider",
     "type": "Aura.Component[]",
     "required": "true",
     "description": "A list of data provider components. Use a ui:dataProvider component to provide list data."
    },
    "emptyListContent": {
     "name": "emptyListContent",
     "type": "Aura.Component[]",
     "description": "Content to be shown if the list is empty"
    },
    "loadingIndicator": {
     "name": "loadingIndicator",
     "type": "Aura.Component[]",
     "description": "Content to be shown while the list is loading"
    },
    "header": {
     "name": "header",
     "type": "Aura.Component[]",
     "description": "A facet above the rendered list, for use as a list header"
    },
    "footer": {
     "name": "footer",
     "type": "Aura.Component[]",
     "description": "A facet below the rendered list, for use as a list footer"
    }
   },
   "imports": {},
   "events": {
    "triggerDataProvider": {
     "name": "triggerDataProvider",
     "type": "ui:dataProvide",
     "description": "The event fired when the data provider is triggered."
    },
    "listComplete": {
     "name": "listComplete",
     "type": "aura:operationComplete",
     "description": "The event fired when concrete implementations have finished their component creation."
    },
    "refresh": {
     "name": "refresh",
     "type": "ui:refresh",
     "description": "The event fired when the component is refreshed."
    },
    "addRemove": {
     "name": "addRemove",
     "type": "ui:addRemove",
     "description": "Command event to insert or remove items"
    }
   },
   "handlers": {
    "triggerDataProvider": {
     "name": "triggerDataProvider",
     "action": "{!c.triggerDataProvider}"
    },
    "refresh": {
     "name": "refresh",
     "action": "{!c.refresh}"
    },
    "addRemove": {
     "name": "addRemove",
     "action": "{!c.addRemove}"
    },
    "init": {
     "name": "init",
     "action": "{!c.init}",
     "value": "{!this}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.loadingIndicator.length == 0}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "action.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String",
     "description": "The name for the action-name data attribute value specified on the DOM element."
    },
    "label": {
     "name": "label",
     "type": "String",
     "description": "The text label for the component."
    },
    "labelClass": {
     "name": "labelClass",
     "type": "String",
     "description": "The class for the label on the component."
    },
    "index": {
     "name": "index",
     "type": "Integer",
     "description": "The index for the item-index data attribute value specified on the DOM element."
    },
    "value": {
     "name": "value",
     "type": "Object",
     "description": "Use this to bind some value to the action. Must be serializable {String, Number, Boolean}."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.value}",
     "action": "{!c.handleValueChange}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "actionButton.cmp": {
   "attributes": {
    "disabled": {
     "name": "disabled",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "{!v.label}",
      "press": "{!c.handleClick}",
      "disabled": "{!v.disabled}"
     }
    ]
   }
  },
  "actionCheckbox.cmp": {
   "attributes": {
    "disabled": {
     "name": "disabled",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputCheckbox": [
     {
      "aura:id": "cb",
      "value": "{!v.value}",
      "click": "{!c.handleClick}",
      "label": "{!v.label}",
      "labelClass": "{!v.labelClass}",
      "disabled": "{!v.disabled}"
     }
    ]
   }
  },
  "actionDelegate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "onaction": {
     "name": "onaction",
     "type": "ui:actionEvent"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "actionMenuItem.cmp": {
   "attributes": {
    "id": {
     "name": "id",
     "type": "String",
     "description": "id of the menu item"
    },
    "hideMenuAfterSelected": {
     "access": "GLOBAL",
     "name": "hideMenuAfterSelected",
     "type": "Boolean",
     "default": "true",
     "description": "Set to true to hide menu after the menu item is selected."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "click": {
     "name": "click",
     "action": "{!c.handleClick}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.body.length == 0}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "asyncComponentManager.cmp": {
   "attributes": {
    "maxConcurrency": {
     "name": "maxConcurrency",
     "default": "1",
     "required": "true",
     "type": "Integer",
     "description": "Max number of components that can be loaded concurrently"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "ui:asyncComponentLoaded",
     "action": "{!c.asyncComponentLoadedCallback}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "asyncImage.cmp": {
   "attributes": {
    "actualImageSrc": {
     "name": "actualImageSrc",
     "type": "String",
     "description": "Actual image src attribute of the image"
    }
   },
   "imports": {},
   "events": {
    "load": {
     "name": "load",
     "type": "ui:load"
    }
   },
   "handlers": {
    "load": {
     "name": "load",
     "action": "{!c.load}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:asyncComponentLoaded",
      "type": "EVENT"
     },
     {
      "resource": "markup://ui:asyncComponentRegister",
      "type": "EVENT"
     }
    ]
   }
  },
  "autocomplete.cmp": {
   "attributes": {
    "dataProvider": {
     "name": "dataProvider",
     "type": "Aura.Component[]",
     "required": "true",
     "description": "A list of data provider components"
    },
    "emptyListContent": {
     "name": "emptyListContent",
     "type": "Aura.Component[]",
     "description": "Content to be shown if the list is empty"
    },
    "loadingIndicator": {
     "name": "loadingIndicator",
     "type": "Aura.Component[]",
     "description": "Content to be shown while the list is loading"
    },
    "inputClass": {
     "name": "inputClass",
     "type": "String",
     "description": "The css class for input component."
    },
    "inputType": {
     "name": "inputType",
     "type": "String",
     "default": "inputText",
     "description": "The type of input component. We support inputText and inputTextArea for now."
    },
    "listOption": {
     "name": "listOption",
     "type": "Aura.ComponentDefRef[]",
     "required": "true",
     "description": "A ComponentDefRef to use as the template for each generated option in the list."
    },
    "optionVar": {
     "name": "optionVar",
     "type": "String",
     "required": "true",
     "description": "The name by which to refer to the current data object inside of the template for each option."
    },
    "placeholder": {
     "name": "placeholder",
     "type": "String",
     "default": "",
     "description": "Text that is displayed when the input field is empty, to prompt the user for a valid entry."
    },
    "propertyToMatch": {
     "name": "propertyToMatch",
     "type": "String",
     "default": "label",
     "description": "The property name in the data object which is used to match typing in the input field."
    },
    "theme": {
     "name": "theme",
     "type": "String",
     "default": "default",
     "description": "Theme to apply to this component."
    },
    "matchFunc": {
     "name": "matchFunc",
     "type": "Aura.Action",
     "description": "Overrides default list item update behavior to allow custom text matching."
    },
    "autocompleteButton": {
     "name": "autocompleteButton",
     "type": "Aura.Component[]",
     "description": "Optional button to render with this component."
    },
    "listHeader": {
     "name": "listHeader",
     "type": "Aura.Component[]",
     "description": "A facet above the rendered list, for use as a list header"
    },
    "listFooter": {
     "name": "listFooter",
     "type": "Aura.Component[]",
     "description": "A facet below the rendered list, for use as a list footer"
    },
    "showListHeader": {
     "name": "showListHeader",
     "type": "Boolean",
     "default": "true",
     "description": "When true the listHeader will be visible"
    },
    "showListFooter": {
     "name": "showListFooter",
     "type": "Boolean",
     "default": "true",
     "description": "When true the listFooter will be visible"
    },
    "usePanel": {
     "name": "usePanel",
     "type": "boolean",
     "default": "false"
    },
    "setDefaultHighlight": {
     "name": "setDefaultHighlight",
     "type": "boolean",
     "default": "true",
     "description": "Indicate if the first option item should be highlighted by default."
    }
   },
   "imports": {},
   "events": {
    "matchDone": {
     "name": "matchDone",
     "type": "ui:matchDone",
     "description": "The event fired when the matching is done."
    },
    "inputChange": {
     "name": "inputChange",
     "type": "ui:inputChange",
     "description": "The event fired when the input value changes."
    },
    "selectListOption": {
     "name": "selectListOption",
     "type": "ui:selectListOption",
     "description": "The event fired when a list option is displayed."
    },
    "fetchData": {
     "name": "fetchData",
     "type": "ui:fetchData",
     "description": "The event indicates we need to fetch data through a data provider."
    },
    "matchText": {
     "name": "matchText",
     "type": "ui:matchText",
     "description": "The event fired when a text match occurs."
    }
   },
   "handlers": {
    "fetchData": {
     "name": "fetchData",
     "action": "{!c.fetchData}"
    },
    "matchText": {
     "name": "matchText",
     "action": "{!c.matchText}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    },
    "listExpand": {
     "name": "listExpand",
     "event": "ui:autocompleteListExpand",
     "action": "{!c.handleListExpand}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "labelPosition",
      "value": "hidden"
     },
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.inputType == 'inputTextArea'}"
     },
     {
      "isTrue": "{!v.usePanel}"
     }
    ],
    "ui:inputTextAreaForAutocomplete": [
     {
      "aura:id": "input",
      "class": "{!v.inputClass+' '+v.theme}",
      "label": "{!v.label}",
      "labelClass": "{!v.labelClass}",
      "labelPosition": "{!v.labelPosition}",
      "placeholder": "{!v.placeholder}",
      "updateOn": "{!v.updateOn}",
      "ariaDescribedBy": "{!v.ariaDescribedBy}",
      "autocompleteButton": "{!v.autocompleteButton}",
      "disabled": "{!v.disabled}",
      "domId": "{!v.domId}"
     }
    ],
    "ui:inputTextForAutocomplete": [
     {
      "aura:id": "input",
      "class": "{!v.inputClass+' '+v.theme}",
      "label": "{!v.label}",
      "labelClass": "{!v.labelClass}",
      "labelPosition": "{!v.labelPosition}",
      "placeholder": "{!v.placeholder}",
      "updateOn": "{!v.updateOn}",
      "ariaDescribedBy": "{!v.ariaDescribedBy}",
      "autocompleteButton": "{!v.autocompleteButton}",
      "disabled": "{!v.disabled}",
      "domId": "{!v.domId}"
     }
    ],
    "ui:autocompletePanel": [
     {
      "aura:id": "panel"
     }
    ],
    "ui:autocompleteList": [
     {
      "aura:id": "list",
      "class": "{!v.class + ' lookup__menu'}",
      "dataProvider": "{!v.dataProvider}",
      "itemVar": "{!v.optionVar}",
      "itemTemplate": "{!v.listOption}",
      "emptyListContent": "{!v.emptyListContent}",
      "loadingIndicator": "{!v.loadingIndicator}",
      "listHeader": "{!v.listHeader}",
      "listFooter": "{!v.listFooter}",
      "showListHeader": "{!v.showListHeader}",
      "showListFooter": "{!v.showListFooter}",
      "theme": "{!v.theme}",
      "visible": "false",
      "role": "listbox",
      "propertyToMatch": "{!v.propertyToMatch}",
      "matchDone": "{!c.handleMatchDone}",
      "selectListOption": "{!c.handleSelectOption}",
      "updateAriaAttributes": "{!c.updateAriaAttributes}",
      "matchFunc": "{!v.matchFunc}",
      "setDefaultHighlight": "{!v.setDefaultHighlight}"
     },
     {
      "aura:id": "list",
      "class": "{!v.class + ' lookup__menu'}",
      "dataProvider": "{!v.dataProvider}",
      "itemVar": "{!v.optionVar}",
      "itemTemplate": "{!v.listOption}",
      "emptyListContent": "{!v.emptyListContent}",
      "loadingIndicator": "{!v.loadingIndicator}",
      "listHeader": "{!v.listHeader}",
      "listFooter": "{!v.listFooter}",
      "showListHeader": "{!v.showListHeader}",
      "showListFooter": "{!v.showListFooter}",
      "theme": "{!v.theme}",
      "visible": "false",
      "role": "listbox",
      "propertyToMatch": "{!v.propertyToMatch}",
      "matchDone": "{!c.handleMatchDone}",
      "selectListOption": "{!c.handleSelectOption}",
      "updateAriaAttributes": "{!c.updateAriaAttributes}",
      "matchFunc": "{!v.matchFunc}",
      "setDefaultHighlight": "{!v.setDefaultHighlight}"
     }
    ]
   }
  },
  "autocompleteList.cmp": {
   "attributes": {
    "ignoredElements": {
     "name": "ignoredElements",
     "type": "Object",
     "description": "The DOM elements to ignore when we handle clicking outside."
    },
    "keyword": {
     "name": "keyword",
     "type": "String",
     "description": "The keyword used to match list options."
    },
    "propertyToMatch": {
     "name": "propertyToMatch",
     "type": "String",
     "default": "label",
     "description": "The property name in the data object which is used to match typing in the input field."
    },
    "theme": {
     "name": "theme",
     "type": "String",
     "default": "default",
     "description": "Theme to apply to this component."
    },
    "matchFunc": {
     "name": "matchFunc",
     "type": "Aura.Action",
     "description": "Overrides default list item update behavior to allow custom text matching."
    },
    "footerSelected": {
     "name": "footerSelected",
     "type": "boolean",
     "default": "false"
    },
    "headerSelected": {
     "name": "headerSelected",
     "type": "boolean",
     "default": "false"
    },
    "listHeader": {
     "name": "listHeader",
     "type": "Aura.Component[]",
     "description": "A facet above the rendered list, for use as a list header"
    },
    "listFooter": {
     "name": "listFooter",
     "type": "Aura.Component[]",
     "description": "A facet below the rendered list, for use as a list footer"
    },
    "showListHeader": {
     "name": "showListHeader",
     "type": "Boolean",
     "default": "true",
     "description": "When true the listHeader will be visible"
    },
    "showListFooter": {
     "name": "showListFooter",
     "type": "Boolean",
     "default": "true",
     "description": "When true the listFooter will be visible"
    },
    "setDefaultHighlight": {
     "name": "setDefaultHighlight",
     "type": "boolean",
     "default": "true",
     "description": "Indicate if the first option item should be highlighted by default."
    }
   },
   "imports": {},
   "events": {
    "matchDone": {
     "name": "matchDone",
     "type": "ui:matchDone",
     "description": "The event fired when the matching is done."
    },
    "listHighlight": {
     "name": "listHighlight",
     "type": "ui:listHighlight",
     "description": "The event fired when a list option is highlighted."
    },
    "matchText": {
     "name": "matchText",
     "type": "ui:matchText",
     "description": "The event fired when a text match occurs."
    },
    "pressOnHighlighted": {
     "name": "pressOnHighlighted",
     "type": "ui:press",
     "description": "The event fired when a highlighted option is pressed."
    },
    "selectListOption": {
     "name": "selectListOption",
     "type": "ui:selectListOption",
     "description": "The event fired when a list option is selected."
    },
    "updateAriaAttributes": {
     "name": "updateAriaAttributes",
     "type": "ui:updateAriaAttributes",
     "description": "The event fired when a new option is highlighted."
    },
    "listExpand": {
     "name": "listExpand",
     "type": "ui:autocompleteListExpand",
     "description": "The event fired when the list is made visible"
    },
    "listCollapse": {
     "name": "listCollapse",
     "type": "ui:autocompleteListCollapse",
     "description": "The event fired when the list is made invisible"
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.visible}",
     "action": "{!c.visibleChange}"
    },
    "listHighlight": {
     "name": "listHighlight",
     "action": "{!c.handleListHighlight}"
    },
    "matchText": {
     "name": "matchText",
     "action": "{!c.matchText}"
    },
    "pressOnHighlighted": {
     "name": "pressOnHighlighted",
     "action": "{!c.handlePressOnHighlighted}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "header"
     },
     {
      "attribute": "footer"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!!empty(v.listHeader)}"
     },
     {
      "isTrue": "{!!empty(v.listFooter)}"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "iter",
      "items": "{!v.items}",
      "var": "{!v.itemVar}",
      "body": "{!v.itemTemplate}"
     }
    ]
   }
  },
  "autocompleteOption.cmp": {
   "attributes": {
    "displayText": {
     "name": "displayText",
     "type": "String",
     "description": "The displayed text string for this option."
    },
    "label": {
     "name": "label",
     "type": "String",
     "required": "true",
     "description": "The text displayed on the component. This attribute's value is used to do matching."
    },
    "theme": {
     "name": "theme",
     "type": "String",
     "default": "default",
     "description": "Theme to apply to this component."
    },
    "domId": {
     "name": "domId",
     "type": "String",
     "default": "",
     "description": "Id of the option component's anchor"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "mouseover": {
     "name": "mouseover",
     "action": "{!c.handleMouseover}"
    },
    "mouseout": {
     "name": "mouseout",
     "action": "{!c.handleMouseout}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.body.length == 0}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "autocompletePanel.cmp": {
   "attributes": {
    "referenceElement": {
     "name": "referenceElement",
     "type": "Object"
    },
    "visible": {
     "name": "visible",
     "type": "boolean",
     "default": "false",
     "access": "INTERNAL"
    },
    "zIndex": {
     "name": "zIndex",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.zIndex}",
     "action": "{!c.handleZIndex}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "block.cmp": {
   "attributes": {
    "overflow": {
     "name": "overflow",
     "type": "Boolean",
     "default": "false",
     "description": "Allows you to specify whether the <ui:block> permits overflow for its contents. Defaults to false, which means that content that overflows the boundaries of the component will be clipped."
    },
    "left": {
     "name": "left",
     "type": "Aura.Component[]",
     "description": "The left facet of the component. Components added to left are aligned to the left side of the <ui:block>. The left facet, if set, is wrapped in a <div> tag with the CSS class \"bLeft\" for individual styling."
    },
    "right": {
     "name": "right",
     "type": "Aura.Component[]",
     "description": "The right facet of the component. Components added to right are aligned to the right side of the <ui:block>. The right facet, if set, is wrapped in a <div> tag with the CSS class \"bRight\" for individual styling."
    },
    "tag": {
     "name": "tag",
     "type": "String",
     "default": "div",
     "description": "The HTML tag to use for this component.  Defaults to \"div\""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:html": [
     {
      "tag": "{!v.tag}",
      "class": "{!v.class+(v.overflow == true||v.overflow =='true' ?' overflow':'')}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.left.length > 0}"
     },
     {
      "isTrue": "{!v.right.length > 0}"
     }
    ]
   }
  },
  "button.cmp": {
   "attributes": {
    "buttonTitle": {
     "name": "buttonTitle",
     "type": "String",
     "access": "GLOBAL",
     "description": "The text displayed in a tooltip when the mouse pointer hovers over the button."
    },
    "buttonType": {
     "name": "buttonType",
     "type": "String",
     "default": "button",
     "access": "GLOBAL",
     "description": "Specifies the type attribute in the HTML input element. Default value is \"button\"."
    },
    "class": {
     "name": "class",
     "type": "String",
     "default": "",
     "access": "GLOBAL",
     "description": "A CSS style to be attached to the button. This style is added in addition to base styles output by the component."
    },
    "label": {
     "name": "label",
     "type": "String",
     "required": "true",
     "access": "GLOBAL",
     "description": "The text displayed on the button. Corresponds to the value attribute of the rendered HTML input element."
    },
    "labelClass": {
     "name": "labelClass",
     "type": "String",
     "default": "",
     "access": "GLOBAL",
     "description": "A CSS style to be attached to the label. This style is added in addition to base styles output by the component."
    },
    "labelDisplay": {
     "name": "labelDisplay",
     "type": "Boolean",
     "default": "true",
     "description": "Specifies whether the label is displayed. If not, we add a hidden text for accessibility purpose."
    },
    "iconImgSrc": {
     "name": "iconImgSrc",
     "type": "String",
     "default": "",
     "description": "The absolute or relative URL of the icon to display on the button. The image's alt attribute is set to the value of the button’s label attribute."
    },
    "iconClass": {
     "name": "iconClass",
     "type": "String",
     "default": "",
     "description": "A CSS style to be attached to the button's icon. This style is added in addition to base styles output by the component."
    },
    "selectedClass": {
     "name": "selectedClass",
     "type": "String",
     "default": "is-selected",
     "description": "The class applied when the button is selected"
    },
    "notSelectedClass": {
     "name": "notSelectedClass",
     "type": "String",
     "default": "not-selected",
     "description": "The class applied when the button is not selected"
    },
    "classList": {
     "name": "classList",
     "type": "String",
     "access": "PRIVATE",
     "default": "",
     "description": "The list of classes rendered to the element"
    },
    "disabled": {
     "name": "disabled",
     "type": "Boolean",
     "default": "false",
     "access": "GLOBAL",
     "description": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. Default value is \"false\"."
    },
    "accesskey": {
     "name": "accesskey",
     "type": "String",
     "default": "",
     "access": "GLOBAL",
     "description": "The keyboard access key that puts the button in focus. When the button is in focus, pressing Enter clicks the button."
    },
    "labelDir": {
     "name": "labelDir",
     "type": "String",
     "default": "ltr",
     "description": "The direction in which the label should be read. Possible values are \"rtl\" (right to left) and \"ltr\" (left to right). Default value is \"ltr\"."
    },
    "stopPropagation": {
     "name": "stopPropagation",
     "type": "Boolean",
     "default": "false",
     "description": "Prevents the click event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."
    },
    "tabIndex": {
     "name": "tabIndex",
     "type": "Integer",
     "description": "The tab index of the button element."
    },
    "stateful": {
     "name": "stateful",
     "type": "Boolean",
     "default": "false",
     "description": "A stateful button can be selected."
    },
    "selected": {
     "name": "selected",
     "type": "Boolean",
     "default": "false",
     "description": "If a button is stateful this value toggles selected"
    }
   },
   "imports": {},
   "events": {
    "keydown": {
     "name": "keydown",
     "type": "ui:keydown",
     "description": "The controller method that runs when a key is pressed down on the button."
    },
    "press": {
     "name": "press",
     "type": "ui:press",
     "access": "GLOBAL",
     "description": "The controller method that runs when the button is clicked. For example, press=\"{!c.showMsg}\" references the showMsg method in the controller."
    },
    "mouseover": {
     "name": "mouseover",
     "type": "ui:mouseover",
     "access": "INTERNAL",
     "description": "The controller method that runs when the button is hovered."
    },
    "mouseout": {
     "name": "mouseout",
     "type": "ui:mouseout",
     "access": "INTERNAL",
     "description": "The controller method that runs when the button is hovered."
    },
    "focus": {
     "name": "focus",
     "type": "ui:focus",
     "access": "INTERNAL",
     "description": "The controller method that runs when the button receives focus."
    },
    "blur": {
     "name": "blur",
     "type": "ui:blur",
     "access": "INTERNAL",
     "description": "The controller method that runs when the button loses focus."
    }
   },
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.selected}",
     "action": "{!c.changeSelected}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.iconImgSrc != '' || v.iconClass != ''}"
     },
     {
      "isTrue": "{!v.labelDisplay}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "calendar.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "carousel.cmp": {
   "attributes": {
    "height": {
     "name": "height",
     "type": "Integer",
     "description": "Height of the carousel"
    },
    "swipeEnabled": {
     "name": "swipeEnabled",
     "type": "Boolean",
     "default": "true",
     "description": "Enable swipe"
    },
    "width": {
     "name": "width",
     "type": "Integer",
     "description": "Width of the carousel"
    },
    "pageModels": {
     "name": "pageModels",
     "type": "Object[]",
     "description": "Array of metadata component definitions to load"
    },
    "pageComponents": {
     "name": "pageComponents",
     "type": "Aura.Component[]",
     "description": "Array of Components to inject"
    },
    "prefetchedTab": {
     "name": "prefetchedTab",
     "type": "Aura.Component[]",
     "description": "If prefetchFirstTab is enabled, the provider will set the component in this parameter"
    },
    "isDotIndicator": {
     "name": "isDotIndicator",
     "type": "Boolean",
     "default": "false",
     "description": "Set true to use a dot indicator rather than text"
    },
    "initialPage": {
     "name": "initialPage",
     "type": "String",
     "default": "0",
     "description": "Initial page to display. Can be overriden by the pageModels metadata"
    },
    "prefetchFirstTab": {
     "name": "prefetchFirstTab",
     "type": "Boolean",
     "default": "false",
     "description": "If pageModels defined, makes the provider fetch the first page within the same request"
    },
    "lazyLoadTabs": {
     "name": "lazyLoadTabs",
     "type": "Boolean",
     "default": "true",
     "description": "Load the remaining tabs as soon as possible. If set to false it will load them once you swipe"
    },
    "indicatorStateClass": {
     "name": "indicatorStateClass",
     "type": "String",
     "default": "indicator-state",
     "description": "Class name to identify the location for the indicator bar"
    },
    "pageScrollerPlugins": {
     "name": "pageScrollerPlugins",
     "type": "String",
     "default": "",
     "description": "Additional plugins to be included in each carousel page"
    },
    "justifyContent": {
     "name": "justifyContent",
     "type": "String",
     "default": "stretch",
     "description": "Which horizontal justification to use for the page indicators. values: 'stretch' | 'leftGrowRight'"
    },
    "prefetchedTabIndex": {
     "name": "prefetchedTabIndex",
     "type": "Integer",
     "description": "If prefetchFirstTab is enabled, the provider will set this to the index of the prefetched tab"
    },
    "suppressIndicators": {
     "name": "suppressIndicators",
     "type": "String",
     "default": "false",
     "description": "If true, will cause no indicator to render."
    },
    "isScrollable": {
     "name": "isScrollable",
     "type": "Boolean",
     "default": "true",
     "description": "If true, will cause the individual pages to scroll"
    },
    "bindEventsToScroller": {
     "name": "bindEventsToScroller",
     "type": "Boolean",
     "default": "true"
    },
    "pageIndicatorComponent": {
     "name": "pageIndicatorComponent",
     "type": "Aura.Component[]",
     "description": "Component to display the tabBar. Needs to implement carouselIndicator interface"
    },
    "carouselPageComponent": {
     "name": "carouselPageComponent",
     "type": "Aura.ComponentDefRef[]",
     "description": "Definition of the component to hold the content of each page. Needs to implement carouselPage interface"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:carouselIndicator": [
     {}
    ],
    "ui:carouselPage": [
     {}
    ],
    "ui:scroller": [
     {
      "aura:id": "carousel",
      "class": "carousel-body",
      "bindEventsToScroller": "{!v.bindEventsToScroller}",
      "scroll": "horizontal",
      "supportVoiceOver": "false",
      "enabled": "{! and( v.swipeEnabled, (v.pageModels.length > 1 || v.pageComponents.length > 1))}",
      "snap": "true",
      "lockOnDirection": "vertical",
      "plugins": "Indicators,Carousel",
      "snapType": "sticky"
     }
    ]
   }
  },
  "carouselDeprecated.cmp": {
   "attributes": {
    "title": {
     "name": "title",
     "type": "String",
     "description": "Title of the carousel"
    },
    "width": {
     "name": "width",
     "type": "Integer",
     "description": "Width of the carousel in pixels"
    },
    "height": {
     "name": "height",
     "type": "Integer",
     "description": "Height of the carousel in pixels"
    },
    "useTransition": {
     "name": "useTransition",
     "type": "Boolean",
     "default": "true",
     "description": ""
    },
    "pageIndicatorPosition": {
     "name": "pageIndicatorPosition",
     "type": "String",
     "default": "top",
     "description": "Position of the page indicator. Acceptable values are 'top' and 'bottom'. "
    },
    "continuousFlow": {
     "name": "continuousFlow",
     "type": "Boolean",
     "default": "false",
     "description": "Set to true if the carousel pages should flow continuously. The default is 'false'."
    },
    "defaultPage": {
     "name": "defaultPage",
     "type": "Integer",
     "description": "Default page to display. Setting this will override the 'isDefault' attribute in the ui:carouselPage component."
    },
    "pageModels": {
     "name": "pageModels",
     "type": "Object[]",
     "description": "The model used to create a carousel page."
    },
    "pageComponents": {
     "name": "pageComponents",
     "type": "Aura.Component[]",
     "description": "Carousel page components that is rendered as carousel pages."
    },
    "navigationTabs": {
     "name": "navigationTabs",
     "type": "Boolean",
     "default": "false",
     "description": "Enable navigational tabs on the pageIndicator"
    },
    "onPageChange": {
     "name": "onPageChange",
     "type": "Aura.Action",
     "description": "The action invoked when the carousel changes to a different page."
    },
    "spinner": {
     "name": "spinner",
     "type": "Aura.Component[]",
     "description": "Spinner component used during asynchronous loading. Must fire and handle a 'toggle' event with an isVisible attribute."
    },
    "priv_currentPage": {
     "name": "priv_currentPage",
     "type": "Integer",
     "description": "PRIVATE - the currently selected page index."
    },
    "priv_carouselStyle": {
     "name": "priv_carouselStyle",
     "type": "String",
     "description": "PRIVATE - inline style of the carousel container."
    },
    "priv_scrollerWidth": {
     "name": "priv_scrollerWidth",
     "type": "String",
     "description": "PRIVATE - the scroller width in pixels."
    },
    "priv_snap": {
     "name": "priv_snap",
     "type": "String",
     "description": "PRIVATE - Scroller snap option."
    },
    "priv_scrollContentClass": {
     "name": "priv_scrollContentClass",
     "type": "String",
     "description": "PRIVATE - Scroller content css class."
    }
   },
   "imports": {},
   "events": {
    "selectDefaultPage": {
     "name": "selectDefaultPage",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the default page is selected."
    },
    "pageSelected": {
     "name": "pageSelected",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the page is selected."
    },
    "loadPage": {
     "name": "loadPage",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the page is loaded."
    },
    "scrollEnd": {
     "name": "scrollEnd",
     "type": "ui:scrollEnd",
     "description": "The event fired when the end of the scroller is reached."
    },
    "refreshCurrentPage": {
     "name": "refreshCurrentPage",
     "type": "ui:carouselPageEvent",
     "description": "Fire this event to refresh the current carousel page."
    }
   },
   "handlers": {
    "selectDefaultPage": {
     "name": "selectDefaultPage",
     "action": "{!c.selectDefaultPage}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    },
    "change": {
     "name": "change",
     "value": "{!v.pageComponents}",
     "action": "{!c.onPageComponentsChanged}"
    },
    "refreshCurrentPage": {
     "name": "refreshCurrentPage",
     "action": "{!c.onRefreshCurrentPage}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:carouselPage",
      "type": "COMPONENT"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.continuousFlow != true && v.pageIndicatorPosition == 'top'}"
     },
     {
      "isTrue": "{!v.spinner.length > 0}"
     },
     {
      "isTrue": "{!v.continuousFlow != true && v.pageIndicatorPosition == 'bottom'}"
     }
    ],
    "ui:carouselPageIndicator": [
     {
      "navigationTabs": "{!v.navigationTabs}"
     },
     {}
    ],
    "ui:scrollerDeprecated": [
     {
      "aura:id": "scroller",
      "width": "{!v.priv_scrollerWidth}",
      "class": "scroll-container",
      "hScroll": "true",
      "vScroll": "false",
      "onScrollMove": "{!c.onScrollMove}",
      "onScrollEnd": "{!c.onScrollEnd}",
      "refreshed": "{!c.onScrollerRefreshed}",
      "snap": "{!v.priv_snap}",
      "scrollContentClass": "{!v.priv_scrollContentClass}",
      "bindEventsToScroller": "true",
      "useTransition": "{!v.useTransition}"
     }
    ]
   }
  },
  "carouselIndicator.cmp": {
   "attributes": {
    "pageModels": {
     "name": "pageModels",
     "type": "Object[]",
     "description": "TODO"
    },
    "pageComponents": {
     "name": "pageComponents",
     "type": "Object[]",
     "description": "TODO"
    },
    "justifyContent": {
     "name": "justifyContent",
     "type": "String",
     "description": "Which horizontal justification to use for the page indicators. Valid values are 'stretch', 'leftGrowRight'. Default is 'stretch'."
    },
    "isDotIndicator": {
     "name": "isDotIndicator",
     "type": "Boolean",
     "default": "false",
     "description": "Set to true to use dot indicators rather than text."
    },
    "_calculatedStyles": {
     "name": "_calculatedStyles",
     "type": "String",
     "description": ""
    }
   },
   "imports": {},
   "events": {
    "pagerClicked": {
     "name": "pagerClicked",
     "type": "ui:pagerClicked",
     "description": "The event fired when the pager is clicked"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "carouselPage.cmp": {
   "attributes": {
    "content": {
     "name": "content",
     "type": "Object",
     "description": ""
    },
    "pageIndex": {
     "name": "pageIndex",
     "type": "Integer",
     "description": ""
    },
    "scrollerPlugins": {
     "name": "scrollerPlugins",
     "type": "String",
     "description": "Additional scroller plugins to be used (comma separated with no spaces betweeen them (scroller bug as of 8/6/2014))"
    },
    "isContentLoaded": {
     "name": "isContentLoaded",
     "type": "Boolean",
     "default": "false",
     "description": ""
    },
    "isScrollable": {
     "name": "isScrollable",
     "type": "Boolean",
     "default": "true",
     "description": "If false will prevent the page from scrolling."
    },
    "placeholder": {
     "name": "placeholder",
     "type": "Aura.ComponentDefRef[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:label": [
     {}
    ],
    "ui:scroller": [
     {
      "aura:id": "scroller",
      "bindEventsToScroller": "true",
      "canShowMore": "true",
      "onPullToShowMore": "{!c.handleShowMore}",
      "enabled": "{! v.isScrollable}",
      "lockOnDirection": "horizontal"
     }
    ]
   }
  },
  "carouselPageDeprecated.cmp": {
   "attributes": {
    "title": {
     "name": "title",
     "type": "String",
     "description": "Title of the page"
    },
    "isCacheable": {
     "name": "isCacheable",
     "default": "true",
     "type": "Boolean",
     "description": "Indicates whether the page content is cacheable on client or not."
    },
    "isDefault": {
     "name": "isDefault",
     "default": "false",
     "type": "Boolean",
     "description": "Determines if this is the default page to display."
    },
    "pageModel": {
     "name": "pageModel",
     "type": "Object",
     "description": "The model that is used to create components dynamically."
    },
    "pageIndex": {
     "name": "pageIndex",
     "type": "Integer",
     "description": "The index of this page."
    },
    "isSelected": {
     "name": "isSelected",
     "type": "Boolean",
     "default": "false",
     "description": "Indicates whether the page is selected or not."
    },
    "parent": {
     "name": "parent",
     "type": "Aura.Component[]",
     "description": "The page container."
    },
    "priv_width": {
     "name": "priv_width",
     "type": "Integer",
     "description": "PRIVATE - Width of the page in pixels. This value is inherited from the ui:carousel 'width' attribute."
    },
    "priv_height": {
     "name": "priv_height",
     "type": "Integer",
     "description": "PRIVATE - Height of the page in pixels. This value is inherited from the ui:carousel 'height' attribute."
    },
    "priv_pageStyle": {
     "name": "priv_pageStyle",
     "type": "String",
     "description": "PRIVATE"
    },
    "priv_pageId": {
     "name": "priv_pageId",
     "type": "String",
     "description": "PRIVATE"
    },
    "priv_visible": {
     "name": "priv_visible",
     "type": "Boolean",
     "description": "Indicates page is visible or not."
    },
    "priv_continuousFlow": {
     "name": "priv_continuousFlow",
     "type": "Boolean",
     "description": "Indicates carousel can flow continuously or not."
    },
    "priv_snap": {
     "name": "priv_snap",
     "type": "String",
     "description": "PRIVATE - Scroller snap option."
    },
    "showPage": {
     "name": "showPage",
     "type": "Aura.Action"
    }
   },
   "imports": {},
   "events": {
    "pageSelected": {
     "name": "pageSelected",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the carousel page is selected."
    },
    "update": {
     "name": "update",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the carousel page is updated."
    },
    "show": {
     "name": "show",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the carousel page is displayed."
    },
    "hide": {
     "name": "hide",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the carousel page is hidden."
    },
    "updateSize": {
     "name": "updateSize",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the carousel page is resized."
    }
   },
   "handlers": {
    "pageSelected": {
     "name": "pageSelected",
     "action": "{!c.onPageSelected}"
    },
    "update": {
     "name": "update",
     "action": "{!c.onPageUpdate}"
    },
    "show": {
     "name": "show",
     "action": "{!c.onPageShow}"
    },
    "hide": {
     "name": "hide",
     "action": "{!c.onPageHide}"
    },
    "updateSize": {
     "name": "updateSize",
     "action": "{!c.onUpdateSize}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "carouselPageIndicator.cmp": {
   "attributes": {
    "pageComponents": {
     "name": "pageComponents",
     "type": "Aura.Component[]",
     "description": "The page components in the carousel"
    },
    "currentPage": {
     "name": "currentPage",
     "type": "Integer",
     "description": "The current page of the pager."
    },
    "navigationTabs": {
     "name": "navigationTabs",
     "type": "Boolean",
     "default": "false",
     "description": "Enables navigation tabs"
    }
   },
   "imports": {},
   "events": {
    "pagerClicked": {
     "name": "pagerClicked",
     "type": "ui:pagerClicked",
     "description": "The event fired when the page indicator is clicked."
    },
    "pagerKeyed": {
     "name": "pagerKeyed",
     "type": "ui:pagerKeyed",
     "description": "The event fired when the page indicator is keyed."
    },
    "pageSelected": {
     "name": "pageSelected",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the carousel page is selected."
    }
   },
   "handlers": {
    "pageSelected": {
     "name": "pageSelected",
     "action": "{!c.onPageSelected}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.pageComponents.length > 1}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.pageComponents}",
      "var": "page",
      "indexVar": "index"
     }
    ],
    "ui:carouselPageIndicatorItem": [
     {
      "aura:id": "indicatorItems",
      "priv_pageComponent": "{!page}",
      "pageIndex": "{!index + 1}",
      "pagerKeyed": "{!c.keyHandler}",
      "pagerClicked": "{!c.clickHandler}",
      "navigationTab": "{!v.navigationTabs}"
     }
    ]
   }
  },
  "carouselPageIndicatorItem.cmp": {
   "attributes": {
    "pageIndex": {
     "name": "pageIndex",
     "type": "Integer",
     "description": "The index of the page this component belongs to."
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The title of the page."
    },
    "label": {
     "name": "label",
     "type": "String",
     "description": "The label of the page."
    },
    "navigationTab": {
     "name": "navigationTab",
     "type": "Boolean",
     "default": "false",
     "description": "Navigation Tabs instead of labels"
    },
    "priv_id": {
     "name": "priv_id",
     "type": "String",
     "description": "The id of the item"
    },
    "priv_ariaSelected": {
     "name": "priv_ariaSelected",
     "type": "Boolean",
     "default": "false",
     "description": "PRIVATE - aria-selected boolean"
    },
    "priv_ariaControlId": {
     "name": "priv_ariaControlId",
     "type": "String",
     "description": "PRIVATE - Aria control ID."
    },
    "priv_tabIndex": {
     "name": "priv_tabIndex",
     "type": "Integer",
     "default": "-1",
     "description": "PRIVATE - tab index"
    },
    "priv_pageComponent": {
     "name": "priv_pageComponent",
     "type": "Object",
     "description": "PRIVATE - Carousel page component."
    },
    "priv_selectedClass": {
     "name": "priv_selectedClass",
     "type": "String",
     "description": "PRIVATE - CSS class for the selected indicator item."
    }
   },
   "imports": {},
   "events": {
    "pagerClicked": {
     "name": "pagerClicked",
     "type": "ui:pagerClicked",
     "description": "The event fired when the pager is clicked."
    },
    "pagerKeyed": {
     "name": "pagerKeyed",
     "type": "ui:pagerKeyed",
     "description": "The event fired when the pager is keyed."
    },
    "pageSelected": {
     "name": "pageSelected",
     "type": "ui:carouselPageEvent",
     "description": "The event fired when the page is selected."
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    },
    "pageSelected": {
     "name": "pageSelected",
     "action": "{!c.onPageSelected}"
    },
    "click": {
     "name": "click",
     "action": "{!c.clickHandler}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "checkboxMenuItem.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "click": {
     "name": "click",
     "action": "{!c.handleClick}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.body.length == 0}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "containerManager.cmp": {
   "attributes": {
    "registeredContainers": {
     "name": "registeredContainers",
     "type": "Aura.ComponentDefRef[]"
    }
   },
   "imports": {
    "ui:containerManagerLib": {
     "library": "ui:containerManagerLib",
     "property": "lib"
    },
    "ui:stackManagerLib": {
     "library": "ui:stackManagerLib",
     "property": "smLib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "dataGrid.cmp": {
   "attributes": {
    "summary": {
     "name": "summary",
     "type": "String"
    },
    "useRowHeaders": {
     "name": "useRowHeaders",
     "type": "Boolean",
     "default": "false",
     "description": "Makes the first column of each row a header cell"
    }
   },
   "imports": {},
   "events": {
    "updateRowAttributes": {
     "name": "updateRowAttributes",
     "type": "ui:updateGridRow"
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "updateRowAttributes": {
     "name": "updateRowAttributes",
     "action": "{!c.handleUpdateRowAttrs}"
    },
    "change": {
     "name": "change",
     "value": "{!v.columns}",
     "action": "{!c.handleColumnsChange}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "dataGridActionColumn.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String"
    },
    "label": {
     "name": "label",
     "type": "String"
    },
    "assistiveLabel": {
     "name": "assistiveLabel",
     "type": "String",
     "default": "Actions",
     "description": "Hidden assistive text for the header."
    },
    "class": {
     "name": "class",
     "type": "String"
    },
    "scope": {
     "name": "scope",
     "type": "String",
     "default": "col",
     "description": "{ col, row, colgroup, rowgroup }"
    },
    "header": {
     "name": "header",
     "type": "Aura.Component[]"
    },
    "outputComponent": {
     "name": "outputComponent",
     "type": "Aura.ComponentDefRef[]"
    },
    "body": {
     "name": "body",
     "type": "Aura.ComponentDefRef[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "dataGridColumn.cmp": {
   "attributes": {
    "name": {
     "name": "name",
     "type": "String",
     "description": "Api name or field name on item. Can use dot notation."
    },
    "label": {
     "name": "label",
     "type": "String",
     "description": "The text label displayed in column header."
    },
    "hideLabel": {
     "name": "hideLabel",
     "type": "Boolean",
     "description": "Whether to hide the label. A hidden label will be moved into an assistiveText span"
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The title attribute on the TH element"
    },
    "type": {
     "name": "type",
     "type": "String",
     "description": "Data type."
    },
    "sortable": {
     "name": "sortable",
     "type": "Boolean"
    },
    "disabled": {
     "name": "disabled",
     "type": "Boolean",
     "default": "false",
     "description": "Sets whether the column header's interactions should be disabled"
    },
    "required": {
     "name": "required",
     "type": "Boolean",
     "default": "false",
     "description": "Required field in current layout."
    },
    "direction": {
     "name": "direction",
     "type": "String",
     "description": "{ '', ascending, descending }"
    },
    "initialDirectionOnSort": {
     "name": "initialDirectionOnSort",
     "type": "String",
     "default": "descending",
     "description": "The initial sort direction when user clicks on the column header: {ascending, descending}"
    },
    "ascLabel": {
     "name": "ascLabel",
     "type": "String",
     "default": "Sorted Ascending",
     "description": "Accessibility label to use when column is ascending"
    },
    "descLabel": {
     "name": "descLabel",
     "type": "String",
     "default": "Sorted Descending",
     "description": "Accessibility label to use when column is descending"
    },
    "order": {
     "name": "order",
     "type": "Integer",
     "default": "0",
     "description": "The ordering of the sort (non-zero applies to multilevel sort only)."
    },
    "scope": {
     "name": "scope",
     "type": "String",
     "default": "col",
     "description": "{ col, row, colgroup, rowgroup }"
    },
    "onsortchange": {
     "name": "onsortchange",
     "type": "Aura.Action"
    },
    "assistiveSortText": {
     "name": "assistiveSortText",
     "type": "String",
     "default": "Sort",
     "description": "Accessibility label for sort trigger links"
    },
    "width": {
     "name": "width",
     "type": "Integer",
     "default": "-1",
     "description": "Fixed width of the column in pixels."
    },
    "outputComponent": {
     "name": "outputComponent",
     "type": "Aura.ComponentDefRef[]",
     "description": "Used by cells to override render output. Default value is wired to item's name field."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.name}",
     "action": "{!c.updateNameRef}",
     "description": "Handles a change to the name attribute by updating the wiring between the component and the name attribute."
    }
   },
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {}
    ],
    "aura:if": [
     {
      "isTrue": "{!v.sortable}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "dataGridSelectionColumn.cmp": {
   "attributes": {
    "selectAll": {
     "name": "selectAll",
     "type": "Boolean",
     "description": "Allows grid to control 'selectAll' visual state."
    },
    "outputComponent": {
     "name": "outputComponent",
     "type": "Aura.ComponentDefRef[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "header"
     }
    ],
    "ui:actionCheckbox": [
     {
      "name": "dataGrid:select",
      "value": "{!v.selectAll}",
      "label": "Select all rows",
      "labelClass": "assistiveText"
     },
     {
      "name": "dataGrid:select",
      "value": "{!selected}",
      "index": "{!index}",
      "label": "Select row",
      "labelClass": "assistiveText",
      "disabled": "{!disabled}"
     }
    ]
   }
  },
  "dataGridSummaryCell.cmp": {
   "attributes": {
    "column": {
     "name": "column",
     "type": "String",
     "description": "ApiName of column."
    },
    "type": {
     "name": "type",
     "type": "String",
     "description": "{ SUM, AVG, MIN, MAX }"
    },
    "items": {
     "name": "items",
     "type": "List"
    },
    "value": {
     "name": "value",
     "type": "Integer"
    },
    "outputComponent": {
     "name": "outputComponent",
     "type": "Aura.ComponentDefRef[]",
     "description": "Facet for rendering of value."
    },
    "priv_outputComponent": {
     "name": "priv_outputComponent",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.items}",
     "action": "{!c.handleItemsChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {}
    ]
   }
  },
  "dataProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "provide": {
     "name": "provide",
     "type": "ui:dataProvide",
     "description": "The event fired when the list is intialized."
    },
    "onchange": {
     "name": "onchange",
     "type": "ui:dataChanged",
     "description": "The event fired when the list data changes."
    },
    "error": {
     "name": "error",
     "type": "ui:dataProvideError",
     "description": "The event fired when there is an error during data fetching."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dataTable.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "default": "",
     "description": "The CSS style used to display the table."
    },
    "items": {
     "name": "items",
     "type": "Object[]",
     "description": "The items to be iterated over and processed."
    },
    "noDataText": {
     "name": "noDataText",
     "type": "String",
     "default": "No data found.",
     "description": "The text to display when no data is found. Default value is “No data found.”"
    },
    "headerValues": {
     "name": "headerValues",
     "type": "String[]",
     "description": "The text that appears in the header row of the table."
    },
    "striped": {
     "name": "striped",
     "type": "Boolean",
     "default": "false",
     "description": "Specifies whether or not the rows should be striped.  Defaults to 'false'."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.items.length > 0}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ],
    "ui:message": [
     {
      "severity": "info"
     }
    ]
   }
  },
  "dataTableColumn.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "default": "",
     "description": "The CSS style used to display the column in the table."
    },
    "scope": {
     "name": "scope",
     "type": "String",
     "description": "Identifies whether a cell is a header for a column, row, or group of columns or rows. Valid options: col, row, colgroup, rowgroup"
    },
    "headerValue": {
     "name": "headerValue",
     "type": "String",
     "description": "The text that appears in the column header."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dataTableRow.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "rowPress": {
     "name": "rowPress",
     "type": "ui:rowPress",
     "description": "The event fired when the row is pressed down. The element that is clicked on is checked before the event is fired."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dataWriter.cmp": {
   "attributes": {
    "items": {
     "name": "items",
     "type": "List",
     "description": "{ record: {...}, operation: SAVE/DELETE } }"
    },
    "defaultFields": {
     "name": "defaultFields",
     "type": "Map",
     "description": "Map of default values to apply to every record."
    },
    "sync": {
     "name": "sync",
     "type": "Boolean",
     "default": "false",
     "description": "Should changes to items immediately write."
    }
   },
   "imports": {},
   "events": {
    "write": {
     "name": "write",
     "type": "ui:write",
     "description": "Command event to invoke writing."
    },
    "onsuccess": {
     "name": "onsuccess",
     "type": "ui:response",
     "description": "Event fired on write success."
    },
    "onerror": {
     "name": "onerror",
     "type": "ui:response",
     "description": "Event fired on write error."
    }
   },
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.items}",
     "action": "{!c.handleItemsChange}"
    },
    "write": {
     "name": "write",
     "action": "{!c.handleWrite}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "datePicker.cmp": {
   "attributes": {
    "hasTime": {
     "name": "hasTime",
     "type": "Boolean",
     "default": "false",
     "description": "Indicate if the parent datePicker component supports time picker. This also works as a flag for S1 vs SFX view."
    },
    "hours": {
     "name": "hours",
     "type": "Integer",
     "description": "The hour value of a date object, which is always in 24 hour format."
    },
    "is24HourFormat": {
     "name": "is24HourFormat",
     "type": "Boolean",
     "default": "true",
     "description": "Indicate if it is set to 24 hour or 12-hour with am/pm."
    },
    "maxYear": {
     "name": "maxYear",
     "type": "Integer",
     "description": "The maximal year for year selection. Only on mobile. The default is the current year plus 30."
    },
    "minYear": {
     "name": "minYear",
     "type": "Integer",
     "description": "The minimum year for year selection. Only on mobile. The default is the current year minus 100."
    },
    "minutes": {
     "name": "minutes",
     "type": "Integer",
     "description": "The minute value of a date object."
    },
    "value": {
     "name": "value",
     "type": "String",
     "description": "A date string corresponding to a calendar day in the format yyyy-mm-dd."
    },
    "visible": {
     "name": "visible",
     "type": "Boolean",
     "default": "false",
     "description": "Indicates if the date picker is displayed. Defaults to false, which hides the date picker."
    },
    "_yearListInitialized": {
     "name": "_yearListInitialized",
     "type": "Boolean",
     "default": "false",
     "description": "Indicates if the year list is initialized or not."
    },
    "managed": {
     "name": "managed",
     "type": "Boolean",
     "default": "false",
     "description": "Indicates whether this component is managed by ui:datePickerManager. Defaults to 'false'."
    },
    "referenceElement": {
     "name": "referenceElement",
     "type": "Object",
     "description": "The reference node which this datePicker should be positioned to. Usually it is a inputDate element."
    },
    "showToday": {
     "name": "showToday",
     "type": "Boolean",
     "default": "true",
     "description": "Indicates whether a Today link should display at the bottom. If there is a time portion, the Today link wouldn't show up even this is set to true."
    },
    "hideOnSelect": {
     "name": "hideOnSelect",
     "type": "Boolean",
     "default": "false",
     "description": "Close the datePicker after a date is selected"
    },
    "setFocus": {
     "name": "setFocus",
     "type": "Boolean",
     "default": "true",
     "description": "Control if we should focus any date when we render the month."
    },
    "titleHeadingLevel": {
     "name": "titleHeadingLevel",
     "type": "String",
     "description": "The heading level for the title. The default is h2."
    },
    "closeOnClickOut": {
     "name": "closeOnClickOut",
     "access": "INTERNAL",
     "type": "Boolean",
     "default": "false",
     "description": "true if used with input date, work around for 198 REMOVE in 200"
    },
    "_today": {
     "name": "_today",
     "type": "String",
     "description": "The date string (yyyy-MM-dd) of today based on the Aura time zone."
    },
    "rangeStart": {
     "name": "rangeStart",
     "type": "String",
     "description": "Start date of the range in the format yyyy-mm-dd"
    },
    "rangeEnd": {
     "name": "rangeEnd",
     "type": "String",
     "description": "End date of the range in the format yyyy-mm-dd"
    },
    "rangeClass": {
     "name": "rangeClass",
     "type": "String",
     "description": "A CSS class to be applied when a range is selected"
    }
   },
   "imports": {
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "lib"
    }
   },
   "events": {
    "selectDate": {
     "name": "selectDate",
     "type": "ui:selectDate",
     "description": "The event fired when a date is selected."
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    },
    "change": {
     "name": "change",
     "value": "{!v.visible}",
     "action": "{!c.handleVisible}"
    }
   },
   "methods": {
    "highlightRange": {
     "rangeStart": {
      "name": "rangeStart",
      "type": "String",
      "description": "Start date of the range in the format yyyy-mm-dd"
     },
     "rangeEnd": {
      "name": "rangeEnd",
      "type": "String",
      "description": "End date of the range in the format yyyy-mm-dd"
     },
     "rangeClass": {
      "name": "rangeClass",
      "type": "String",
      "description": "A CSS class to be applied when a range is selected"
     }
    }
   },
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.hasTime}"
     },
     {
      "isTrue": "{!$Browser.formFactor != 'DESKTOP'}"
     },
     {
      "isTrue": "{!$Browser.formFactor == 'DESKTOP'}"
     },
     {
      "isTrue": "{!v.hasTime}"
     },
     {
      "isTrue": "{!v.showToday}"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "monthTitle",
      "value": ""
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ],
    "ui:datePickerGrid": [
     {
      "aura:id": "grid",
      "hasTime": "{!v.hasTime}",
      "setFocus": "{!v.setFocus}",
      "hide": "{!c.hide}",
      "selectDate": "{!c.selectDate}",
      "updateCalendarTitle": "{!c.updateCalendarTitle}"
     }
    ],
    "ui:timePicker": [
     {
      "aura:id": "time",
      "is24HourFormat": "{!v.is24HourFormat}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "today",
      "press": "{!c.selectToday}",
      "keydown": "{!c.handleTabToday}",
      "class": "calToday",
      "label": "Today"
     }
    ]
   }
  },
  "datePickerGrid.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "description": "A CSS style to be attached to the component."
    },
    "date": {
     "name": "date",
     "type": "Integer",
     "description": "The currently highlighted date."
    },
    "hasTime": {
     "name": "hasTime",
     "type": "Boolean",
     "default": "false",
     "description": "Indicate if the parent datePicker component supports time picker."
    },
    "month": {
     "name": "month",
     "type": "Integer",
     "description": "The currently rendered month."
    },
    "year": {
     "name": "year",
     "type": "Integer",
     "description": "The currently rendered year."
    },
    "selectedDate": {
     "name": "selectedDate",
     "type": "Date",
     "description": "The selected date."
    },
    "setFocus": {
     "name": "setFocus",
     "type": "Boolean",
     "default": "true",
     "description": "Control if we should focus any date when we render the month."
    },
    "rangeStart": {
     "name": "rangeStart",
     "type": "String",
     "description": "Start date of a range to be highlighted"
    },
    "rangeEnd": {
     "name": "rangeEnd",
     "type": "String",
     "description": "End date of a range to be highlighted"
    },
    "rangeClass": {
     "name": "rangeClass",
     "type": "String",
     "default": "highlight",
     "description": "A CSS class to be applied when a range is selected"
    },
    "_setFocus": {
     "name": "_setFocus",
     "type": "Boolean",
     "default": "true",
     "description": "The internal state of setFocus."
    },
    "_namesOfWeekdays": {
     "name": "_namesOfWeekdays",
     "type": "List",
     "description": "The names of the week days based on locale."
    },
    "_today": {
     "name": "_today",
     "type": "String",
     "description": "The date string (yyyy-MM-dd) of today based on the Aura time zone."
    }
   },
   "imports": {},
   "events": {
    "hide": {
     "name": "hide",
     "type": "ui:change",
     "description": "The event fired when the date picker is hidden from view."
    },
    "focus": {
     "name": "focus",
     "type": "ui:focus",
     "description": "The event fired when a date is focused."
    },
    "selectDate": {
     "name": "selectDate",
     "type": "ui:selectDate",
     "description": "The event fired when a date is selected."
    },
    "updateCalendar": {
     "name": "updateCalendar",
     "type": "ui:updateCalendar",
     "description": "The event fired when the calendar is updated."
    },
    "updateCalendarTitle": {
     "name": "updateCalendarTitle",
     "type": "ui:updateCalendarTitle",
     "description": "The event fired when the calendar month and year are updated."
    }
   },
   "handlers": {
    "focus": {
     "name": "focus",
     "action": "{!c.focus}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    },
    "updateCalendar": {
     "name": "updateCalendar",
     "action": "{!c.updateCalendar}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v._namesOfWeekdays}",
      "var": "day"
     }
    ],
    "ui:dayInMonthCell": [
     {
      "aura:id": "0",
      "label": "0"
     },
     {
      "aura:id": "1",
      "label": "0"
     },
     {
      "aura:id": "2",
      "label": "0"
     },
     {
      "aura:id": "3",
      "label": "0"
     },
     {
      "aura:id": "4",
      "label": "0"
     },
     {
      "aura:id": "5",
      "label": "0"
     },
     {
      "aura:id": "6",
      "label": "0"
     },
     {
      "aura:id": "7",
      "label": "0"
     },
     {
      "aura:id": "8",
      "label": "0"
     },
     {
      "aura:id": "9",
      "label": "0"
     },
     {
      "aura:id": "10",
      "label": "0"
     },
     {
      "aura:id": "11",
      "label": "0"
     },
     {
      "aura:id": "12",
      "label": "0"
     },
     {
      "aura:id": "13",
      "label": "0"
     },
     {
      "aura:id": "14",
      "label": "0"
     },
     {
      "aura:id": "15",
      "label": "0"
     },
     {
      "aura:id": "16",
      "label": "0"
     },
     {
      "aura:id": "17",
      "label": "0"
     },
     {
      "aura:id": "18",
      "label": "0"
     },
     {
      "aura:id": "19",
      "label": "0"
     },
     {
      "aura:id": "20",
      "label": "0"
     },
     {
      "aura:id": "21",
      "label": "0"
     },
     {
      "aura:id": "22",
      "label": "0"
     },
     {
      "aura:id": "23",
      "label": "0"
     },
     {
      "aura:id": "24",
      "label": "0"
     },
     {
      "aura:id": "25",
      "label": "0"
     },
     {
      "aura:id": "26",
      "label": "0"
     },
     {
      "aura:id": "27",
      "label": "0"
     },
     {
      "aura:id": "28",
      "label": "0"
     },
     {
      "aura:id": "29",
      "label": "0"
     },
     {
      "aura:id": "30",
      "label": "0"
     },
     {
      "aura:id": "31",
      "label": "0"
     },
     {
      "aura:id": "32",
      "label": "0"
     },
     {
      "aura:id": "33",
      "label": "0"
     },
     {
      "aura:id": "34",
      "label": "0"
     },
     {
      "aura:id": "35",
      "label": "0"
     },
     {
      "aura:id": "36",
      "label": "0"
     },
     {
      "aura:id": "37",
      "label": "0"
     },
     {
      "aura:id": "38",
      "label": "0"
     },
     {
      "aura:id": "39",
      "label": "0"
     },
     {
      "aura:id": "40",
      "label": "0"
     },
     {
      "aura:id": "41",
      "label": "0"
     }
    ]
   }
  },
  "datePickerManager.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "ui:showDatePicker",
     "action": "{!c.handleShowDatePicker}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:datePicker": [
     {
      "aura:id": "datePicker",
      "managed": "true",
      "selectDate": "{!c.handleDateSelected}"
     }
    ]
   }
  },
  "dayInMonthCell.cmp": {
   "attributes": {
    "ariaSelected": {
     "name": "ariaSelected",
     "type": "Boolean",
     "default": "false",
     "description": "The date highlighted."
    },
    "tabIndex": {
     "name": "tabIndex",
     "type": "Integer",
     "default": "-1",
     "description": "The tab index of the anchor element."
    },
    "value": {
     "name": "value",
     "type": "Date",
     "description": "The date this component renders."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dialog.cmp": {
   "attributes": {
    "ariaRole": {
     "name": "ariaRole",
     "type": "String",
     "default": "dialog",
     "description": "The value of the dialog's ARIA role attribute. Valid values are 'dialog' and 'alertdialog'. The default is 'dialog'."
    },
    "autoFocus": {
     "name": "autoFocus",
     "type": "Boolean",
     "default": "{!true}",
     "description": "Automatically focus on the first focusable element when the dialog is displayed. The default is 'true'."
    },
    "buttons": {
     "name": "buttons",
     "type": "Aura.Component[]",
     "description": "Buttons that should be displayed at the bottom of the dialog (e.g., 'Cancel', 'OK', etc.). This attribute must be of type ui:dialogButtons."
    },
    "clickOutToClose": {
     "name": "clickOutToClose",
     "type": "Boolean",
     "default": "{!true}",
     "description": "Specifies if the dialog should be closed when any element outside the dialog is clicked. The default is 'true'."
    },
    "description": {
     "name": "description",
     "type": "String",
     "description": "Instructional information about the purpose of the dialog. This text will not be visible on-screen, but still readable by assistive technologies. Required for accessibility.",
     "required": "true"
    },
    "isModal": {
     "name": "isModal",
     "type": "Boolean",
     "default": "{!false}",
     "description": "Whether or not the dialog is modal. Modal dialogs do not allow any interaction with other page elements until the dialog is dealt with. Non-modal dialogs allow interactivity with other parts of the page, even when the dialog is open. The default is 'false'."
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The title displayed in the dialog's header. Required for accessibility.",
     "required": "true"
    },
    "width": {
     "name": "width",
     "type": "String",
     "default": "medium",
     "description": "The width of the dialog. Valid values are 'small', 'medium', 'large' (which equal 310px, 620px, and 940px, respectively), and 'auto', which sizes based on the contents of the dialog. Note that 'auto' will only work properly when the 'isModal' attribute is set to 'false'. The default is 'medium'."
    },
    "theme": {
     "name": "theme",
     "type": "String",
     "default": "",
     "description": "Theme to apply to this component."
    },
    "closeClass": {
     "name": "closeClass",
     "type": "String",
     "description": "Additional CSS classes to apply to the dialog close button, located in the upper right corner of the dialog window."
    },
    "closeLabel": {
     "name": "closeLabel",
     "type": "String",
     "default": "&times;",
     "description": "The label of the dialog close button, located in the upper right corner of the dialog window."
    },
    "closeTitle": {
     "name": "closeTitle",
     "type": "String",
     "default": "Close this window",
     "description": "The title attribute of the dialog close button, located in the upper right corner of the dialog window."
    },
    "dialogClass": {
     "name": "dialogClass",
     "type": "String",
     "description": "Additional CSS classes to apply to the dialog's outermost <div> wrapper."
    },
    "maskClass": {
     "name": "maskClass",
     "type": "String",
     "description": "Additional CSS classes to apply to the window mask located behind a modal dialog."
    },
    "_handlerConfig": {
     "name": "_handlerConfig",
     "type": "Object",
     "description": "PRIVATE ATTRIBUTE - DO NOT SET | Reference to the event handlers necessary for interactivity."
    }
   },
   "imports": {},
   "events": {
    "close": {
     "name": "close",
     "type": "ui:closeDialog",
     "description": "Event fired when the dialog window requests to close itself."
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.isModal}"
     },
     {
      "isTrue": "{!v.buttons.length > 0}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "closeButton",
      "class": "{!'close ' + v.closeClass}",
      "label": "{!v.closeLabel}",
      "buttonTitle": "{!v.closeTitle}",
      "press": "{!c.close}"
     }
    ]
   }
  },
  "dialogButtons.cmp": {
   "attributes": {
    "defaultButtons": {
     "name": "defaultButtons",
     "type": "String",
     "default": "none",
     "description": "Which default buttons to include (if any). Valid values are 'confirm', 'cancel', 'both', or 'none'. Default is 'none'. If you choose to use default and custom buttons together, custom buttons will always appear between the default cancel and default confirm buttons."
    },
    "confirmClass": {
     "name": "confirmClass",
     "type": "String",
     "description": "Additional CSS classes to apply to the default confirm button."
    },
    "confirmLabel": {
     "name": "confirmLabel",
     "type": "String",
     "default": "OK",
     "description": "The label of the default confirm button."
    },
    "confirmTitle": {
     "name": "confirmTitle",
     "type": "String",
     "default": "Click to confirm",
     "description": "The title attribute of the default confirm button."
    },
    "cancelClass": {
     "name": "cancelClass",
     "type": "String",
     "description": "Additional CSS classes to apply to the default cancel button."
    },
    "cancelLabel": {
     "name": "cancelLabel",
     "type": "String",
     "default": "Cancel",
     "description": "The label of the default cancel button."
    },
    "cancelTitle": {
     "name": "cancelTitle",
     "type": "String",
     "default": "Click to cancel",
     "description": "The title attribute of the default cancel button."
    },
    "_parentDialog": {
     "name": "_parentDialog",
     "type": "Object",
     "description": "PRIVATE ATTRIBUTE - DO NOT SET | Reference to the parent ui:dialog component."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.defaultButtons == 'cancel' || v.defaultButtons == 'both'}"
     },
     {
      "isTrue": "{!v.defaultButtons == 'confirm' || v.defaultButtons == 'both'}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "cancelButton",
      "class": "{!v.cancelClass}",
      "label": "{!v.cancelLabel}",
      "buttonTitle": "{!v.cancelTitle}",
      "press": "{!c.cancel}"
     },
     {
      "aura:id": "confirmButton",
      "class": "{!v.confirmClass}",
      "label": "{!v.confirmLabel}",
      "buttonTitle": "{!v.confirmTitle}",
      "press": "{!c.confirm}"
     }
    ]
   }
  },
  "dialogManager.cmp": {
   "attributes": {
    "_activeDialog": {
     "name": "_activeDialog",
     "type": "Object",
     "description": "PRIVATE ATTRIBUTE | DO NOT SET -- Reference to the currently active (i.e., open) ui:dialog component."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "ui:closeDialog",
     "action": "{!c.closeDialog}",
     "description": "Deactivates a single ui:dialog component."
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "dragAndDropAccessibility.cmp": {
   "attributes": {
    "draggables": {
     "name": "draggables",
     "type": "Aura.Component[]",
     "required": "true",
     "description": "Draggable components that are being dragged. Must be of type ui:draggable."
    },
    "target": {
     "name": "target",
     "type": "Object",
     "required": "true",
     "description": "The event target in which accessibility element should be relative to."
    }
   },
   "imports": {
    "ui:dragAndDropLib": {
     "library": "ui:dragAndDropLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {
    "startDragAndDrop": {
     "draggables": {
      "name": "draggables",
      "type": "Aura.Component[]",
      "required": "true",
      "description": "Draggable components that are being dragged. Must be of type ui:draggable."
     },
     "target": {
      "name": "target",
      "type": "Object",
      "required": "true",
      "description": "The event target in which accessibility element should be relative to."
     }
    }
   },
   "dependencies": {}
  },
  "dragAndDropAccessibilityMenu.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "default": "",
     "description": "Additional CSS style to be attached to this component."
    },
    "draggables": {
     "name": "draggables",
     "type": "Aura.Component[]",
     "description": "Currently active draggable components."
    },
    "dropzoneMenu": {
     "name": "dropzoneMenu",
     "type": "List",
     "description": "Dropzone components to be rendered as menuItem."
    }
   },
   "imports": {
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "positioningLib",
     "description": "Library to help position accessibility menu"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:menu": [
     {
      "aura:id": "menu",
      "class": "{!v.class}"
     }
    ],
    "ui:menuList": [
     {
      "aura:id": "menuList",
      "attachToBody": "true",
      "menuFocusChange": "{!c.handleMenuFocusChange}",
      "menuCollapse": "{!c.handleMenuCollapse}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.dropzoneMenu}",
      "var": "menu"
     }
    ],
    "ui:actionMenuItem": [
     {
      "value": "{!menu.value}",
      "label": "{!menu.label}",
      "menuSelect": "{!c.handleMenuSelect}"
     }
    ]
   }
  },
  "draggable.cmp": {
   "attributes": {
    "type": {
     "name": "type",
     "type": "String",
     "default": "move",
     "description": "Operation type: can be either copy, link, or move."
    },
    "dataTransfer": {
     "name": "dataTransfer",
     "type": "Map",
     "description": "A Map<String, String> of data to be transferred during drag and drop operation. The key could be MIME type or some custom type."
    },
    "class": {
     "name": "class",
     "type": "String",
     "default": "",
     "description": "Additional CSS style to be attached to this component."
    },
    "dragClass": {
     "name": "dragClass",
     "type": "String",
     "default": "",
     "description": "Additional CSS style to be attached to this component while it's being dragged."
    },
    "dragAccessibilityClass": {
     "name": "dragAccessibilityClass",
     "type": "String",
     "default": "",
     "description": "Additional CSS style to be attached to this component while it's being dragged in accessibility mode. It's defaulted to dragClass attribute if it's unspecified."
    },
    "dragImageClass": {
     "name": "dragImageClass",
     "type": "String",
     "default": "",
     "description": "Additional CSS style to be attached to drag image. Note that different browsers will render differently."
    },
    "disable": {
     "name": "disable",
     "type": "Boolean",
     "default": "false",
     "description": "Set to true to disable draggable or false otherwise."
    },
    "ariaGrabbed": {
     "name": "ariaGrabbed",
     "type": "boolean",
     "default": "false",
     "description": "Indicate a draggable component."
    },
    "accessibilityComponent": {
     "name": "accessibilityComponent",
     "type": "String",
     "description": "Accessibility component's global Id for this draggable component. Must be of type ui:dragAndDropAccessibility."
    },
    "isSuccessful": {
     "name": "isSuccessful",
     "type": "Boolean",
     "default": "true",
     "description": "Set to true if drop is performed or false if it's aborted."
    },
    "target": {
     "name": "target",
     "type": "Object",
     "description": "The event target for dragend."
    },
    "isValid": {
     "name": "isValid",
     "type": "Boolean",
     "default": "true",
     "description": "Set to true if dragEnd is performed or false if it's aborted."
    },
    "isInAccessibilityMode": {
     "name": "isInAccessibilityMode",
     "type": "Boolean",
     "default": "true",
     "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
    }
   },
   "imports": {
    "ui:dragAndDropLib": {
     "library": "ui:dragAndDropLib",
     "property": "lib"
    }
   },
   "events": {
    "dragStart": {
     "name": "dragStart",
     "type": "ui:dragEvent",
     "description": "Event fired when user starts dragging this component."
    },
    "dragEnd": {
     "name": "dragEnd",
     "type": "ui:dragEvent",
     "description": "Event fired when this drag operation is being ended."
    },
    "dropComplete": {
     "name": "dropComplete",
     "type": "ui:dragEvent",
     "description": "Event fired when drop operation is completed."
    }
   },
   "handlers": {
    "dropComplete": {
     "name": "dropComplete",
     "action": "{!c.handleDropComplete}"
    }
   },
   "methods": {
    "setDropStatus": {
     "isSuccessful": {
      "name": "isSuccessful",
      "type": "Boolean",
      "default": "true",
      "description": "Set to true if drop is performed or false if it's aborted."
     }
    },
    "fireDragEnd": {
     "target": {
      "name": "target",
      "type": "Object",
      "description": "The event target for dragend."
     },
     "isValid": {
      "name": "isValid",
      "type": "Boolean",
      "default": "true",
      "description": "Set to true if dragEnd is performed or false if it's aborted."
     },
     "isInAccessibilityMode": {
      "name": "isInAccessibilityMode",
      "type": "Boolean",
      "default": "true",
      "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
     }
    }
   },
   "dependencies": {}
  },
  "dropzone.cmp": {
   "attributes": {
    "types": {
     "name": "types",
     "type": "String[]",
     "default": "move",
     "description": "Supported operation types: can be either copy, link, or move."
    },
    "dragOverInterval": {
     "name": "dragOverInterval",
     "type": "Integer",
     "default": "500",
     "description": "Interval in milliseconds for how often dragOver event will be fired."
    },
    "class": {
     "name": "class",
     "type": "String",
     "default": "",
     "description": "Additional CSS style to be attached to the component."
    },
    "dragOverClass": {
     "name": "dragOverClass",
     "type": "String",
     "default": "",
     "description": "Additional CSS style to be attached to this component while it's being dragged over."
    },
    "dragOverAccessibilityClass": {
     "name": "dragOverAccessibilityClass",
     "type": "String",
     "default": "",
     "description": "Additional CSS style to be attached to this component while it's being dragged over in accessibility mode. It's defaulted to dragOverClass attribute if it's unspecified."
    },
    "label": {
     "name": "label",
     "type": "String",
     "description": "Label for this component. It's primarily used for accessibility."
    },
    "ariaDropEffect": {
     "name": "ariaDropEffect",
     "type": "String",
     "default": "none",
     "access": "private",
     "description": "Indicate what operation this component is capable of receiving."
    },
    "target": {
     "name": "target",
     "type": "Object",
     "description": "The event target for dragend."
    },
    "isInAccessibilityMode": {
     "name": "isInAccessibilityMode",
     "type": "Boolean",
     "default": "true",
     "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
    },
    "dragComponents": {
     "name": "dragComponents",
     "type": "Aura.Component[]",
     "required": "true",
     "description": "The drag components that are dropped."
    }
   },
   "imports": {
    "ui:dragAndDropLib": {
     "library": "ui:dragAndDropLib",
     "property": "lib"
    }
   },
   "events": {
    "dragEnter": {
     "name": "dragEnter",
     "type": "ui:dragEvent",
     "description": "Event fired when a dragged component enters this drop target."
    },
    "dragOver": {
     "name": "dragOver",
     "type": "ui:dragEvent",
     "description": "Event fired when a dragged component is hovered over this drop target."
    },
    "dragLeave": {
     "name": "dragLeave",
     "type": "ui:dragEvent",
     "description": "Event fired when a dragged component leaves this drop target."
    },
    "drop": {
     "name": "drop",
     "type": "ui:dragEvent",
     "description": "Event fired when a component is dropped on this drop target."
    }
   },
   "handlers": {},
   "methods": {
    "enterDragOperation": {},
    "exitDragOperation": {},
    "fireDragEnter": {
     "target": {
      "name": "target",
      "type": "Object",
      "description": "The event target for dragend."
     },
     "isInAccessibilityMode": {
      "name": "isInAccessibilityMode",
      "type": "Boolean",
      "default": "true",
      "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
     }
    },
    "fireDragLeave": {
     "target": {
      "name": "target",
      "type": "Object",
      "description": "The event target for dragend."
     },
     "isInAccessibilityMode": {
      "name": "isInAccessibilityMode",
      "type": "Boolean",
      "default": "true",
      "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
     }
    },
    "fireDrop": {
     "target": {
      "name": "target",
      "type": "Object",
      "description": "The event target for dragend."
     },
     "dragComponents": {
      "name": "dragComponents",
      "type": "Aura.Component[]",
      "required": "true",
      "description": "The drag components that are dropped."
     },
     "isInAccessibilityMode": {
      "name": "isInAccessibilityMode",
      "type": "Boolean",
      "default": "true",
      "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
     }
    }
   },
   "dependencies": {}
  },
  "fieldLabel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "header.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "tag",
      "value": "header"
     },
     {
      "attribute": "class",
      "value": "{!($Browser.isAndroid ? 'android ' + v.class : v.class)}"
     }
    ]
   }
  },
  "image.cmp": {
   "attributes": {
    "title": {
     "name": "title",
     "type": "String",
     "description": "Title for the image."
    },
    "imageType": {
     "name": "imageType",
     "type": "String",
     "default": "informational",
     "description": "The type of image. Accepted values: informational or decorative."
    },
    "src": {
     "name": "src",
     "type": "String",
     "default": "/auraFW/resources/aura/s.gif",
     "description": "The absolute or relative URL of the image."
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "The CSS style used to display the image."
    },
    "href": {
     "name": "href",
     "type": "String",
     "description": "The URL that the image directs to when clicked."
    },
    "linkClass": {
     "name": "linkClass",
     "type": "String",
     "description": "The CSS style used to display the URL link."
    },
    "alt": {
     "name": "alt",
     "type": "String",
     "default": "",
     "description": "The alternate text description of the image. If imageType=\"informational\", the alt attribute is required. Otherwise, it is not required if imageType=\"decorative\"."
    },
    "target": {
     "name": "target",
     "type": "String",
     "default": "_self",
     "description": "The target URL to display when the image is clicked. Default value is “_self”. Valid options: _blank, _parent, _top, _self"
    }
   },
   "imports": {},
   "events": {
    "onload": {
     "name": "onload",
     "type": "ui:response",
     "description": "Event fired when the image is done loading, passes the image loaded to the event."
    },
    "onerror": {
     "name": "onerror",
     "type": "ui:response",
     "description": "Event fired when an error occurs while loading the image."
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "infiniteList.cmp": {
   "attributes": {
    "enableRowSwipe": {
     "name": "enableRowSwipe",
     "type": "Boolean",
     "default": "false",
     "description": "Toggles touch event handlers to open and close rows."
    }
   },
   "imports": {},
   "events": {
    "onRowOpen": {
     "name": "onRowOpen",
     "type": "ui:openRow",
     "description": "Fired when a row is swiped open."
    },
    "onRowClose": {
     "name": "onRowClose",
     "type": "ui:closeRow",
     "description": "Fired when a row is swiped closed."
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "showMore": {
     "name": "showMore",
     "action": "{!c.showMore}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.items}",
      "var": "{!v.itemVar}",
      "template": "{!v.itemTemplate}",
      "iterationComplete": "{!c.iterationComplete}"
     }
    ]
   }
  },
  "infiniteListRow.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String"
    },
    "swipeBody": {
     "name": "swipeBody",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {
    "open": {
     "name": "open",
     "type": "ui:open"
    },
    "close": {
     "name": "close",
     "type": "ui:close"
    }
   },
   "handlers": {
    "open": {
     "name": "open",
     "action": "{!c.handleOpen}"
    },
    "close": {
     "name": "close",
     "action": "{!c.handleClose}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "input.cmp": {
   "attributes": {
    "disableDoubleClicks": {
     "name": "disableDoubleClicks",
     "type": "Boolean",
     "default": "false",
     "description": "Disables double clicking the component within 350ms"
    },
    "showErrors": {
     "name": "showErrors",
     "type": "Boolean",
     "default": "true",
     "description": "Shows the error component in compound fields. If set to true and errors exist, displays the errors using inputCmp.set(\"v.errors\", errors)."
    },
    "errors": {
     "name": "errors",
     "type": "Object[]",
     "description": "The list of errors to be displayed."
    },
    "errorComponent": {
     "name": "errorComponent",
     "type": "Aura.Component[]",
     "description": "A component that displays any error messages, such as validation errors, associated with the input field."
    },
    "type": {
     "name": "type",
     "type": "String",
     "description": "Specifies the input type. Possible values: button, checkbox, file, hidden, image, password, radio, reset, submit, text, textarea. Corresponds to the type attribute of the rendered HTML input element. Override type in a component that extends this component to set it to a different HTML input type."
    },
    "required": {
     "name": "required",
     "type": "Boolean",
     "default": "false",
     "access": "GLOBAL",
     "description": "Specifies whether the input is required. Default value is \"false\"."
    },
    "updateOn": {
     "name": "updateOn",
     "type": "String",
     "default": "change",
     "access": "GLOBAL",
     "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\"."
    },
    "value": {
     "name": "value",
     "type": "String",
     "access": "GLOBAL",
     "description": "The value currently in the input field."
    },
    "label": {
     "name": "label",
     "type": "String",
     "access": "GLOBAL",
     "description": "The text of the label component"
    },
    "labelClass": {
     "name": "labelClass",
     "type": "String",
     "default": "",
     "access": "GLOBAL",
     "description": "The CSS class of the label component"
    },
    "labelPosition": {
     "name": "labelPosition",
     "type": "String",
     "default": "left",
     "description": "The position in which the label should be displayed. Possible values are \"left\", \"top\", \"right\", \"bottom\", and \"hidden\". Default value is \"left\"."
    },
    "labelTitle": {
     "name": "labelTitle",
     "type": "String",
     "description": "The text displayed in a tooltip when the mouse pointer hovers over the button."
    },
    "requiredIndicatorClass": {
     "name": "requiredIndicatorClass",
     "type": "String",
     "default": "",
     "access": "GLOBAL",
     "description": "The CSS class of the required indicator component"
    },
    "disabled": {
     "name": "disabled",
     "type": "Boolean",
     "default": "false",
     "access": "GLOBAL",
     "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\"."
    },
    "domId": {
     "name": "domId",
     "type": "String",
     "description": "DOM id of the input element. By default, this attribute resolved to the globalId of the component to avoid id collision."
    },
    "requiredIndicator": {
     "name": "requiredIndicator",
     "type": "Aura.Component[]",
     "description": "A component that displays the indicator for the required field."
    }
   },
   "imports": {
    "ui:eventLib": {
     "library": "ui:eventLib",
     "property": "lib"
    }
   },
   "events": {
    "change": {
     "name": "change",
     "type": "ui:change",
     "access": "GLOBAL",
     "description": "The event fired when the user changes the content of the input."
    },
    "copy": {
     "name": "copy",
     "type": "ui:copy",
     "access": "GLOBAL",
     "description": "The event fired when the user copies content to the clipboard."
    },
    "cut": {
     "name": "cut",
     "type": "ui:cut",
     "access": "GLOBAL",
     "description": "The event fired when the user cuts content to the clipboard."
    },
    "paste": {
     "name": "paste",
     "type": "ui:paste",
     "access": "GLOBAL",
     "description": "The event fired when the user pastes content from the clipboard."
    },
    "onError": {
     "name": "onError",
     "type": "ui:validationError",
     "access": "GLOBAL",
     "description": "The event fired when there are any validation errors on the component."
    },
    "onClearErrors": {
     "name": "onClearErrors",
     "type": "ui:clearErrors",
     "access": "GLOBAL",
     "description": "The event fired when any validation errors should be cleared."
    },
    "updateError": {
     "name": "updateError",
     "type": "ui:updateError",
     "description": "The event fired to trigger the default error component and messages (deprecated)."
    },
    "input": {
     "name": "input",
     "type": "ui:inputEvent",
     "description": "The event fired when the user enters an input."
    }
   },
   "handlers": {
    "updateError": {
     "name": "updateError",
     "action": "{!c.updateError}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.labelPosition}",
     "action": "{!c.handleLabelPositionChange}"
    }
   },
   "methods": {
    "focus": {}
   },
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:label",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://ui:inputDefaultError",
      "type": "COMPONENT"
     }
    ]
   }
  },
  "inputCheckbox.cmp": {
   "attributes": {
    "updateOn": {
     "name": "updateOn",
     "type": "String",
     "access": "GLOBAL",
     "default": "change,click",
     "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change,click\"."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputCurrency.cmp": {
   "attributes": {},
   "imports": {
    "ui:inputNumberLibrary": {
     "library": "ui:inputNumberLibrary",
     "property": "inputNumberLibrary"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputDate.cmp": {
   "attributes": {
    "placeholder": {
     "name": "placeholder",
     "type": "String",
     "description": "The hint for the date input format. Set during init based on the 'format' value."
    },
    "loadDatePicker": {
     "name": "loadDatePicker",
     "type": "Boolean",
     "default": "true",
     "description": "Set to true to load the date picker. Defaults to 'true'."
    }
   },
   "imports": {},
   "events": {
    "openPicker": {
     "name": "openPicker",
     "type": "ui:openPicker"
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    },
    "openPicker": {
     "name": "openPicker",
     "action": "{!c.openDatePicker}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!$Browser.isPhone || $Browser.isTablet}"
     },
     {
      "isTrue": "{!v.displayDatePicker}"
     },
     {
      "isTrue": "{!$Browser.formFactor == 'DESKTOP'}"
     },
     {
      "isTrue": "{!v.displayDatePicker}"
     },
     {
      "isTrue": "{! v.loadDatePicker }"
     }
    ],
    "ui:datePicker": [
     {
      "aura:id": "datePicker",
      "hideOnSelect": "true",
      "closeOnClickOut": "true",
      "selectDate": "{!c.setValue}",
      "showToday": "{!$Browser.isPhone || $Browser.isTablet}"
     }
    ]
   }
  },
  "inputDateRange.cmp": {
   "attributes": {
    "startInputPlaceholder": {
     "name": "startInputPlaceholder",
     "type": "String",
     "description": "The hint for the start date input. If empty, will be set based on the 'format' value."
    },
    "endInputPlaceholder": {
     "name": "endInputPlaceholder",
     "type": "String",
     "description": "The hint for the end date input. If empty, will be set based on the 'format' value."
    },
    "startDate": {
     "name": "startDate",
     "type": "String",
     "description": "Start date in the format yyyy-mm-dd."
    },
    "endDate": {
     "name": "endDate",
     "type": "String",
     "description": "End date in the format yyyy-mm-dd."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.displayDatePicker}"
     },
     {
      "isTrue": "{!v.displayDatePicker}"
     }
    ],
    "ui:datePicker": [
     {
      "aura:id": "datePicker",
      "selectDate": "{!c.setValue}",
      "hideOnSelect": "false",
      "showToday": "false"
     }
    ]
   }
  },
  "inputDateTime.cmp": {
   "attributes": {
    "useSingleInput": {
     "name": "useSingleInput",
     "type": "Boolean",
     "default": "false",
     "description": "Use single input mode, even on desktop view"
    },
    "value": {
     "name": "value",
     "type": "String",
     "access": "GLOBAL",
     "description": "The input value of the date/time."
    },
    "placeholder": {
     "name": "placeholder",
     "type": "String",
     "description": "The text that is displayed for date input by default. Set during init based on the 'format' value."
    },
    "timePlaceholder": {
     "name": "timePlaceholder",
     "type": "String",
     "description": "The text that is displayed for time input by default. Set during init based on the 'format' value."
    }
   },
   "imports": {},
   "events": {
    "openPicker": {
     "name": "openPicker",
     "type": "ui:openPicker"
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    },
    "openPicker": {
     "name": "openPicker",
     "action": "{!c.openDatePicker}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!and($Browser.formFactor == 'DESKTOP', !v.useSingleInput)}"
     },
     {
      "isTrue": "{!and(v.displayDatePicker, !v.disabled)}"
     },
     {
      "isTrue": "{!$Browser.formFactor == 'DESKTOP'}"
     },
     {
      "isTrue": "{!and(v.displayDatePicker, !v.disabled)}"
     }
    ],
    "ui:datePicker": [
     {
      "aura:id": "datePicker",
      "selectDate": "{!c.setValue}"
     },
     {
      "aura:id": "datePicker",
      "selectDate": "{!c.setValue}"
     }
    ],
    "ui:inputTimePicker": [
     {
      "aura:id": "timePicker",
      "selectDate": "{!c.setValue}",
      "timeFormat": "{!v.timeFormat}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ]
   }
  },
  "inputDateTrigger.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:showDatePicker",
      "type": "EVENT"
     }
    ],
    "aura:set": [
     {
      "attribute": "displayDatePicker",
      "value": "true"
     },
     {
      "attribute": "loadDatePicker",
      "value": "false"
     }
    ]
   }
  },
  "inputDefaultError.cmp": {
   "attributes": {
    "value": {
     "access": "GLOBAL",
     "name": "value",
     "type": "String[]",
     "description": "The list of errors strings to be displayed."
    },
    "errors": {
     "name": "errors",
     "type": "Object[]",
     "description": "The list of errors objects to be displayed."
    },
    "domId": {
     "name": "domId",
     "type": "String",
     "description": "DOM id of the list of errors. By default, this attribute resolved to the globalId of the component to avoid id collision."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{! !empty(v.value) || !empty(v.errors)}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.value}",
      "var": "message"
     },
     {
      "items": "{!v.errors}",
      "var": "error"
     }
    ]
   }
  },
  "inputEmail.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputFile.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:underConstruction": [
     {}
    ]
   }
  },
  "inputNumber.cmp": {
   "attributes": {},
   "imports": {
    "ui:inputNumberLibrary": {
     "library": "ui:inputNumberLibrary",
     "property": "inputNumberLibrary"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputOption.cmp": {
   "attributes": {
    "type": {
     "name": "type",
     "type": "String",
     "default": "selectOption",
     "description": "The input type. Default value is “selectOption”. Possible values: checkbox, radio, selectOption."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputPercent.cmp": {
   "attributes": {},
   "imports": {
    "ui:inputNumberLibrary": {
     "library": "ui:inputNumberLibrary",
     "property": "inputNumberLibrary"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputPhone.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputRadio.cmp": {
   "attributes": {
    "disabled": {
     "access": "GLOBAL",
     "name": "disabled",
     "type": "Boolean",
     "default": "false",
     "description": "Specifies whether this radio button should be displayed in a disabled state. Disabled radio buttons can't be clicked. Default value is \"false\"."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputRange.cmp": {
   "attributes": {
    "min": {
     "name": "min",
     "type": "Integer",
     "default": "0",
     "description": "Specifies the minimum integer allowed. Default value is “0”."
    },
    "max": {
     "name": "max",
     "type": "Integer",
     "default": "100",
     "description": "Specifies the maximum integer allowed. Default value is “100”."
    },
    "step": {
     "name": "step",
     "type": "Integer",
     "default": "1",
     "description": "Specifies the allowed integer intervals. Default value is “1”."
    },
    "value": {
     "name": "value",
     "type": "Integer",
     "default": "0",
     "description": "The input value of the integer."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputRichText.cmp": {
   "attributes": {
    "toolbar": {
     "name": "toolbar",
     "type": "String",
     "default": "basic",
     "description": "Specify the toolbar config to be used. Possible values: standard, full, email and custom. Default value is \"basic\". Custom config can be added in inputRichTextHelper"
    },
    "customToolbarConfig": {
     "name": "customToolbarConfig",
     "type": "Object",
     "description": "A custom configuration for the toolbar"
    },
    "toolbarLocation": {
     "name": "toolbarLocation",
     "type": "String",
     "default": "top",
     "description": "Location of the toolbar. Possible options are \"top\" and \"bottom\"."
    },
    "width": {
     "access": "GLOBAL",
     "name": "width",
     "type": "String",
     "description": "The editor UI outer width. This can be an integer, for pixel sizes, or any CSS-defined unit. If isRichText is set to false, use the cols attribute instead."
    },
    "height": {
     "access": "GLOBAL",
     "name": "height",
     "type": "String",
     "default": "200",
     "description": "The height of the editing area (that includes the editor content). This can be an integer, for pixel sizes, or any CSS-defined length unit."
    },
    "isRichText": {
     "name": "isRichText",
     "type": "Boolean",
     "default": "true",
     "description": "Indicates if the input is in rich text or plain text. If set to false, a text area replaces the rich text editor."
    }
   },
   "imports": {},
   "events": {
    "editorInstanceReady": {
     "name": "editorInstanceReady",
     "type": "ui:load",
     "description": "Fired when the rich text instance is ready"
    }
   },
   "handlers": {
    "undefined": {
     "event": "ui:toggleRichText",
     "action": "{!c.toggle}",
     "description": "Handler for ui:toggleRichText event"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:clientLibrary": [
     {
      "name": "CkEditor",
      "type": "JS"
     }
    ]
   }
  },
  "inputSearch.cmp": {
   "attributes": {
    "updateOn": {
     "name": "updateOn",
     "type": "String",
     "default": "search,change",
     "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value for ui:inputSearch is \"search\"."
    },
    "type": {
     "name": "type",
     "type": "String",
     "default": "search",
     "description": "The input type of the string. Default value is \"search\"."
    },
    "placeholder": {
     "name": "placeholder",
     "type": "String",
     "default": "Search",
     "description": "Text that is displayed when the field is empty, to prompt the user for a valid search string. Default value is \"Search\"."
    },
    "showClear": {
     "name": "showClear",
     "type": "Boolean",
     "default": "false",
     "description": "Boolean value indicate if we should show the search clear button. Default value is \"false\"."
    }
   },
   "imports": {},
   "events": {
    "search": {
     "name": "search",
     "type": "ui:searchEvent",
     "description": "The event fired when the user runs a search."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.showClear}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "clearSearchTermButton",
      "class": "{!v.value ? 'clear' : 'hide clear'}",
      "label": "clear",
      "labelDisplay": "false",
      "press": "{!c.clearSearchTerm}"
     }
    ]
   }
  },
  "inputSecret.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputSelect.cmp": {
   "attributes": {
    "options": {
     "access": "GLOBAL",
     "name": "options",
     "type": "List",
     "description": "A list of aura.components.ui.InputOption."
    },
    "name": {
     "name": "name",
     "type": "String",
     "description": "The name of the component."
    },
    "multiple": {
     "access": "GLOBAL",
     "name": "multiple",
     "type": "Boolean",
     "default": "false",
     "description": "Specifies whether the input is a multiple select. Default value is “false”."
    },
    "size": {
     "name": "size",
     "type": "Integer",
     "default": "1",
     "description": "The number of options displayed at one time. Default value is “1”."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    },
    "change": {
     "name": "change",
     "value": "{!v.options}",
     "action": "{!c.optionsChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!and(v.options.length eq 0, v.body.length gt 0)}"
     }
    ]
   }
  },
  "inputSelectOption.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.label == '' || v.label == null || v.label == undefined}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "inputSelectOptionGroup.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "description": "The CSS style used to display the option group."
    },
    "label": {
     "name": "label",
     "type": "String",
     "description": "The text displayed on the option group."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputText.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputTextArea.cmp": {
   "attributes": {
    "rows": {
     "access": "GLOBAL",
     "name": "rows",
     "type": "Integer",
     "default": "2",
     "description": "The height of the text area, which is defined by the number of rows to display at a time. Default value is “2”."
    },
    "cols": {
     "access": "GLOBAL",
     "name": "cols",
     "type": "Integer",
     "default": "20",
     "description": "The width of the text area, which is defined by the number of characters to display in a single row at a time. Default value is “20”."
    },
    "readonly": {
     "access": "GLOBAL",
     "name": "readonly",
     "type": "Boolean",
     "default": "false",
     "description": "Specifies whether the text area should be rendered as read-only. Default value is “false”."
    },
    "placeholder": {
     "access": "GLOBAL",
     "name": "placeholder",
     "type": "String",
     "default": "",
     "description": "The text that is displayed by default."
    },
    "resizable": {
     "access": "GLOBAL",
     "name": "resizable",
     "type": "Boolean",
     "default": "true",
     "description": "Specifies whether or not the textarea should be resizable.  Defaults to true."
    },
    "maxlength": {
     "access": "GLOBAL",
     "name": "maxlength",
     "type": "Integer",
     "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML textarea element."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.value}",
     "action": "{!c.valueChange}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "inputTextAreaForAutocomplete.cmp": {
   "attributes": {
    "autocompleteButton": {
     "name": "autocompleteButton",
     "type": "Aura.Component[]",
     "description": "Optional button to render with this component."
    },
    "ariaExpanded": {
     "name": "ariaExpanded",
     "type": "String",
     "default": "false",
     "description": "Whether the autocomplete list is expanded"
    },
    "ariaActiveDescendant": {
     "name": "ariaActiveDescendant",
     "type": "String",
     "default": "",
     "description": "The ID of the active descendant option"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputTextForAutocomplete.cmp": {
   "attributes": {
    "autocompleteButton": {
     "name": "autocompleteButton",
     "type": "Aura.Component[]",
     "description": "Optional button to render with this component."
    },
    "ariaExpanded": {
     "name": "ariaExpanded",
     "type": "String",
     "default": "false",
     "description": "Whether the autocomplete list is expanded"
    },
    "ariaActiveDescendant": {
     "name": "ariaActiveDescendant",
     "type": "String",
     "default": "",
     "description": "The ID of the active descendant option"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputTimePicker.cmp": {
   "attributes": {
    "timeFormat": {
     "name": "timeFormat",
     "type": "String",
     "description": "The java.text.SimpleDateFormat style format for the time."
    },
    "langLocale": {
     "name": "langLocale",
     "type": "String",
     "description": "The language locale used to format time."
    },
    "hours": {
     "name": "hours",
     "type": "Integer",
     "default": "12",
     "description": "The hour value."
    },
    "minutes": {
     "name": "minutes",
     "type": "Integer",
     "default": "00",
     "description": "The miniue value."
    },
    "interval": {
     "name": "interval",
     "type": "Integer",
     "default": "30",
     "description": "The interval in minutes."
    },
    "visible": {
     "name": "visible",
     "type": "Boolean",
     "default": "false",
     "description": "Indicates if this time picker list is displayed. Defaults to false."
    },
    "referenceElement": {
     "name": "referenceElement",
     "type": "Object",
     "description": "The reference node which this datePicker should be positioned to. Usually it is a inputDate element."
    },
    "_timeListInitialized": {
     "name": "_timeListInitialized",
     "access": "private",
     "type": "Boolean",
     "default": "false",
     "description": "Indicates if the time list is initialized or not."
    }
   },
   "imports": {
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "lib"
    }
   },
   "events": {
    "selectDate": {
     "name": "selectDate",
     "type": "ui:selectDate",
     "description": "The event fired when a date is selected."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "inputURL.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "interactive.cmp": {
   "attributes": {
    "disabled": {
     "name": "disabled",
     "type": "Boolean",
     "access": "GLOBAL",
     "default": "false",
     "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\"."
    },
    "disableDoubleClicks": {
     "name": "disableDoubleClicks",
     "type": "Boolean",
     "default": "false",
     "description": "Disables double clicking the component within 350ms"
    }
   },
   "imports": {},
   "events": {
    "blur": {
     "name": "blur",
     "type": "ui:blur",
     "access": "GLOBAL",
     "description": "The event fired when the user moves off from the component."
    },
    "focus": {
     "name": "focus",
     "type": "ui:focus",
     "access": "GLOBAL",
     "description": "The event fired when the user focuses on the component."
    },
    "keydown": {
     "name": "keydown",
     "type": "ui:keydown",
     "access": "GLOBAL",
     "description": "The event fired when the user presses a keyboard key on the component."
    },
    "keypress": {
     "name": "keypress",
     "type": "ui:keypress",
     "access": "GLOBAL",
     "description": "The event fired when the user presses or holds down a keyboard key on the component."
    },
    "keyup": {
     "name": "keyup",
     "type": "ui:keyup",
     "access": "GLOBAL",
     "description": "The event fired when the user releases a keyboard key on the component."
    },
    "select": {
     "name": "select",
     "type": "ui:select",
     "access": "GLOBAL",
     "description": "The event fired when the user selects some text."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "label.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String",
     "description": "The text of the label."
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The text displayed in a tooltip when the mouse pointer hovers over the button."
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "A CSS style to be attached to the label."
    },
    "labelDisplay": {
     "name": "labelDisplay",
     "default": "true",
     "type": "Boolean",
     "description": "Specifies whether the label is displayed. If not, we add a hidden text for accessibility purpose."
    },
    "for": {
     "name": "for",
     "type": "Object",
     "description": "Specified to indicate a component with which the label is to be associated. This attribute can accept raw string, localId, globalId, or the component object. If the value is resolved to a component, the global id of the component will be used in the output."
    },
    "requiredIndicator": {
     "name": "requiredIndicator",
     "type": "Aura.Component[]",
     "description": "A component that displays the indicator for the required field. "
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "list.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.items}",
      "var": "{!v.itemVar}",
      "template": "{!v.itemTemplate}",
      "iterationComplete": "{!c.iterationComplete}"
     }
    ]
   }
  },
  "listSorter.cmp": {
   "attributes": {
    "dataProvider": {
     "name": "dataProvider",
     "type": "Aura.Component[]",
     "description": "A list of data provider components. Use a ui:dataProvider component to provide list data."
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component."
    },
    "title": {
     "name": "title",
     "type": "String",
     "default": "Sort",
     "description": "The title of this component."
    },
    "cancelLabel": {
     "name": "cancelLabel",
     "type": "String",
     "default": "Cancel",
     "description": "The label for the cancel button."
    },
    "applyLabel": {
     "name": "applyLabel",
     "type": "String",
     "default": "Apply",
     "description": "The label for the apply button."
    },
    "visible": {
     "name": "visible",
     "type": "Boolean",
     "default": "false",
     "description": "Controls the visibility of the component."
    },
    "items": {
     "name": "items",
     "type": "Object[]",
     "description": "An array of arbitrary map objects representing the rows of data in the list."
    },
    "defaultSelectedItems": {
     "name": "defaultSelectedItems",
     "type": "Object",
     "description": "Default selected row item."
    },
    "triggerLabel": {
     "name": "triggerLabel",
     "type": "String",
     "description": "The text displayed on the trigger component."
    },
    "ascendingLabel": {
     "name": "ascendingLabel",
     "type": "String",
     "default": "Ascending",
     "description": "Assistive text label for the ascending button"
    },
    "descendingLabel": {
     "name": "descendingLabel",
     "type": "String",
     "default": "Descending",
     "description": "Assistive text label for the descending button"
    },
    "trigger": {
     "name": "trigger",
     "type": "Aura.Component[]",
     "description": "Trigger component"
    },
    "modal": {
     "name": "modal",
     "type": "Boolean",
     "default": "true",
     "description": "Determines whether the component is a modal dialog."
    },
    "rowVar": {
     "name": "rowVar",
     "type": "String",
     "description": "The name by which to refer to the current data object inside of the sorter for each sorter row."
    },
    "rowDef": {
     "name": "rowDef",
     "type": "Aura.ComponentDefRef[]",
     "description": "Component definition to use for each row in the list sorter"
    },
    "onApply": {
     "name": "onApply",
     "type": "Aura.Action",
     "description": "The action invoked when the user click on the apply button. The selected items are passed in as the argument. If the sort order is descending, the prefix '-' is appended to the the item."
    },
    "onOpen": {
     "name": "onOpen",
     "type": "Aura.Action",
     "description": "The action invoked when the user click on the trigger to open the sorter component."
    },
    "onCancel": {
     "name": "onCancel",
     "type": "Aura.Action",
     "description": "The action invoked when the user click on the cancel button or hit ESC key to close the listSorter component."
    }
   },
   "imports": {},
   "events": {
    "refresh": {
     "name": "refresh",
     "type": "ui:refresh"
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.visible}",
     "action": "{!c.onVisible}"
    },
    "refresh": {
     "name": "refresh",
     "action": "{!c.refresh}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:menuTriggerLink",
      "type": "COMPONENT"
     }
    ],
    "ui:menu": [
     {
      "aura:id": "sorterMenu",
      "class": "sorterMenu"
     }
    ],
    "ui:menuList": [
     {
      "aura:id": "sorterMenuList",
      "manualPosition": "{!modal ? false : true}",
      "closeOnTabKey": "false",
      "visible": "{!v.visible}",
      "class": "sorterMenuList scrollable",
      "menuSelect": "{!c.onMenuSelected}",
      "menuExpand": "{!c.onMenuExpand}",
      "menuCollapse": "{!c.onMenuCollapse}",
      "closeOnClickOutside": "false"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.items}",
      "var": "{!v.rowVar}",
      "body": "{!v.rowDef}",
      "iterationComplete": "{!c.iterationComplete}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.modal}"
     }
    ]
   }
  },
  "manifest.cmp": {
   "attributes": {
    "lastMod": {
     "name": "lastMod",
     "type": "String",
     "default": ""
    },
    "resourceURLs": {
     "name": "resourceURLs",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "menu.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "menuItem.cmp": {
   "attributes": {
    "selected": {
     "access": "GLOBAL",
     "name": "selected",
     "type": "Boolean",
     "default": "false",
     "description": "The status of the menu item. True means this menu item is selected; False is not selected."
    },
    "type": {
     "access": "GLOBAL",
     "name": "type",
     "type": "String",
     "description": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem."
    },
    "hideMenuAfterSelected": {
     "access": "GLOBAL",
     "name": "hideMenuAfterSelected",
     "type": "Boolean",
     "default": "false",
     "description": "Set to true to hide menu after the menu item is selected."
    },
    "label": {
     "access": "GLOBAL",
     "name": "label",
     "type": "String",
     "description": "The text displayed on the component."
    }
   },
   "imports": {},
   "events": {
    "menuSelect": {
     "name": "menuSelect",
     "type": "ui:menuSelect",
     "description": "The event that is fired when the menu item is selected."
    }
   },
   "handlers": {
    "mouseover": {
     "name": "mouseover",
     "action": "{!c.handleMouseover}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "menuItemSeparator.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "menuList.cmp": {
   "attributes": {
    "menuItems": {
     "access": "GLOBAL",
     "name": "menuItems",
     "type": "List",
     "description": "A list of menu items set explicitly using instances of the Java class: aura.​components.​ui.MenuItem."
    },
    "visible": {
     "access": "GLOBAL",
     "name": "visible",
     "type": "Boolean",
     "default": "{!false}",
     "description": "Controls the visibility of the menu. The default is false, which hides the menu."
    },
    "focusItemIndex": {
     "name": "focusItemIndex",
     "type": "Integer",
     "default": "0",
     "description": "The index of the item which should be on focus when the menu displays. 0 means the first item and -1 refers to the last."
    },
    "focusTrigger": {
     "name": "focusTrigger",
     "type": "Aura.Action",
     "description": "The action is invoked to set focus to the menu trigger."
    },
    "headerText": {
     "name": "headerText",
     "type": "String",
     "description": "If set, shows a non-selectable header text."
    },
    "childMenuItems": {
     "name": "childMenuItems",
     "type": "Aura.Component[]",
     "description": "a read-only attribute pointing to child components."
    }
   },
   "imports": {},
   "events": {
    "menuCollapse": {
     "access": "GLOBAL",
     "name": "menuCollapse",
     "type": "ui:collapse",
     "description": "The event fired when the menu list collapses."
    },
    "menuExpand": {
     "access": "GLOBAL",
     "name": "menuExpand",
     "type": "ui:expand",
     "description": "The event fired when the menu list displays."
    },
    "menuSelect": {
     "access": "GLOBAL",
     "name": "menuSelect",
     "type": "ui:menuSelect",
     "description": "The event fired when the user select a menu item."
    },
    "menuFocusChange": {
     "access": "GLOBAL",
     "name": "menuFocusChange",
     "type": "ui:menuFocusChange",
     "description": "The event fired when the menu list focus changed from one menuItem to another menuItem."
    },
    "refresh": {
     "name": "refresh",
     "type": "ui:refresh",
     "description": "Fire this event to refresh the menuList."
    }
   },
   "handlers": {
    "refresh": {
     "name": "refresh",
     "action": "{!c.update}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.headerText != null}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.menuItems}",
      "var": "item"
     }
    ],
    "ui:menuItem": [
     {
      "aura:id": "item",
      "class": "{!item.className}",
      "disabled": "{!item.disabled}",
      "label": "{!item.label}",
      "selected": "{!item.selected}",
      "type": "{!item.type}",
      "value": "{!item.value}"
     }
    ]
   }
  },
  "menuTrigger.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "menuTriggerPress": {
     "access": "GLOBAL",
     "name": "menuTriggerPress",
     "type": "ui:menuTriggerPress",
     "description": "The event that is fired when the trigger is clicked."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "trigger"
     }
    ]
   }
  },
  "menuTriggerLink.cmp": {
   "attributes": {
    "label": {
     "access": "GLOBAL",
     "name": "label",
     "type": "String",
     "description": "The text displayed on the component."
    }
   },
   "imports": {},
   "events": {
    "menuTriggerPress": {
     "access": "GLOBAL",
     "name": "menuTriggerPress",
     "type": "ui:menuTriggerPress",
     "description": "The event that is fired when the trigger is clicked."
    },
    "blur": {
     "access": "GLOBAL",
     "name": "blur",
     "type": "ui:blur",
     "description": "The event fired when the user moves off from the trigger."
    },
    "focus": {
     "access": "GLOBAL",
     "name": "focus",
     "type": "ui:focus",
     "description": "The event fired when the user focuses on the trigger."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "trigger"
     },
     {
      "attribute": "else"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.body.length == 0}"
     }
    ]
   }
  },
  "message.cmp": {
   "attributes": {
    "title": {
     "access": "GLOBAL",
     "name": "title",
     "type": "String",
     "description": "The title text for the message."
    },
    "severity": {
     "access": "GLOBAL",
     "name": "severity",
     "type": "String",
     "default": "message",
     "description": "The severity of the message. Possible values:  message (default), confirm, info, warning, error"
    },
    "closable": {
     "access": "GLOBAL",
     "name": "closable",
     "type": "Boolean",
     "default": "false",
     "description": "Specifies whether to display an 'x' that will close the alert when clicked. Default value is 'false'."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:block": [
     {}
    ],
    "aura:set": [
     {
      "attribute": "right"
     },
     {
      "attribute": "left"
     }
    ],
    "aura:renderif": [
     {
      "isTrue": "{!v.closable}"
     },
     {
      "isTrue": "{!v.title && v.title !=''}"
     },
     {
      "isTrue": "{!v.body.length > 0}"
     }
    ],
    "ui:image": [
     {
      "aura:id": "messageIcon",
      "class": "icon",
      "alt": "{!v.severity}"
     }
    ]
   }
  },
  "modal.cmp": {
   "attributes": {
    "title": {
     "name": "title",
     "type": "String",
     "description": "The title of the dialog window"
    },
    "titleDisplay": {
     "name": "titleDisplay",
     "type": "Boolean",
     "default": "true",
     "description": "The title of the window can be shown/hidden for accessibility"
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "CSS class"
    },
    "startOfDialogLabel": {
     "name": "startOfDialogLabel",
     "type": "String",
     "default": "Start of Dialog",
     "description": "Accessibility label that indicates the start of the dialog"
    },
    "showCloseButton": {
     "name": "showCloseButton",
     "type": "Boolean",
     "default": "true",
     "description": "Adds a close button in top right corner of the dialog"
    },
    "closeButton": {
     "name": "closeButton",
     "type": "Aura.Component[]"
    },
    "closeAction": {
     "name": "closeAction",
     "type": "Object",
     "description": "Overrides default close action (which is destroy) when close button is clicked."
    },
    "closeDialogLabel": {
     "name": "closeDialogLabel",
     "type": "String",
     "default": "Close",
     "description": "Close dialog button label"
    },
    "useTransition": {
     "name": "useTransition",
     "type": "Boolean",
     "default": "true",
     "description": "Use css transition when showing or hiding the panel."
    },
    "animation": {
     "name": "animation",
     "type": "String",
     "default": "center",
     "description": "Adds animation to the dialog"
    },
    "closeAnimation": {
     "name": "closeAnimation",
     "type": "String",
     "description": "Adds animation to the dialog"
    },
    "autoFocus": {
     "name": "autoFocus",
     "type": "Boolean",
     "default": "true",
     "description": "Sets initial focus on the first item in the panel"
    }
   },
   "imports": {
    "ui:panelLib": {
     "library": "ui:panelLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "notify": {
     "name": "notify",
     "event": "ui:notify",
     "action": "{!c.onNotify}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://aura:unescapedHtml",
      "type": "COMPONENT"
     }
    ],
    "aura:If": [
     {
      "isTrue": "{!!empty(v.title)}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.showCloseButton}"
     },
     {
      "isTrue": "{!!empty(v.footer)}"
     }
    ]
   }
  },
  "output.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "Object",
     "required": "true",
     "access": "GLOBAL",
     "description": "The value displayed when the output is rendered."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputCheckbox.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "Boolean",
     "required": "true",
     "access": "GLOBAL",
     "description": "Specifies whether the checkbox is checked."
    },
    "altChecked": {
     "name": "altChecked",
     "type": "String",
     "default": "True",
     "access": "GLOBAL",
     "description": "The alternate text description when the checkbox is checked. Default value is “True”."
    },
    "altUnchecked": {
     "name": "altUnchecked",
     "type": "String",
     "default": "False",
     "access": "GLOBAL",
     "description": "The alternate text description when the checkbox is unchecked. Default value is “False”."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:image": [
     {
      "class": "{!v.value == true ? v.class + ' checked' : v.class + ' unchecked'}",
      "aura:id": "img1",
      "alt": "{!v.value == true ? v.altChecked : v.altUnchecked}"
     }
    ]
   }
  },
  "outputCurrency.cmp": {
   "attributes": {
    "value": {
     "access": "GLOBAL",
     "name": "value",
     "type": "Decimal",
     "required": "true",
     "description": "The output value of the currency, which is defined as type Decimal."
    },
    "format": {
     "access": "GLOBAL",
     "name": "format",
     "type": "String",
     "description": "The format of the number. For example, format=&ldquo;.00&rdquo; displays the number followed by two decimal places. If not specified, the default format based on the browser's locale will be used."
    },
    "currencyCode": {
     "access": "GLOBAL",
     "name": "currencyCode",
     "type": "String",
     "description": "The ISO 4217 currency code specified as a String, e.g. &ldquo;USD&rdquo;."
    },
    "currencySymbol": {
     "access": "GLOBAL",
     "name": "currencySymbol",
     "type": "String",
     "description": "The currency symbol specified as a String."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputDate.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "required": "true",
     "access": "GLOBAL",
     "description": "The output value of the date. It should be a date string in ISO-8601 format (YYYY-MM-DD)."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputDateTime.cmp": {
   "attributes": {
    "timezone": {
     "name": "timezone",
     "type": "String",
     "default": "{!$Locale.timezone}",
     "access": "GLOBAL",
     "description": "The timezone ID, for example, America/Los_Angeles."
    },
    "value": {
     "name": "value",
     "type": "String",
     "required": "true",
     "access": "GLOBAL",
     "description": "An ISO8601-formatted string representing a date time."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputEmail.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "required": "true",
     "access": "GLOBAL",
     "description": "The output value of the email"
    }
   },
   "imports": {
    "ui:eventLib": {
     "library": "ui:eventLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputLabel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputMultiSelect.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String[]",
     "required": "true",
     "description": "An array of string values representing the selected options."
    },
    "delimiter": {
     "name": "delimiter",
     "type": "String",
     "default": "; ",
     "description": "The symbol or character used to separate the selected options. Default value is “; ”."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputNumber.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "Decimal",
     "required": "true",
     "access": "GLOBAL",
     "description": "The number displayed when this component is rendered."
    },
    "format": {
     "name": "format",
     "type": "String",
     "access": "GLOBAL",
     "description": "The format of the number. For example, format=&ldquo;.00&rdquo; displays the number followed by two decimal places. If not specified, the Locale default format will be used."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputPercent.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "Decimal",
     "required": "true",
     "description": "The percentage displayed when this component is rendered."
    },
    "format": {
     "name": "format",
     "type": "String",
     "description": "The format of the percent of type String."
    },
    "valueScale": {
     "name": "valueScale",
     "type": "Integer",
     "default": "0",
     "description": "Displays the result output, multiplying the value attribute with (10^valueScale) * 100%."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputPhone.cmp": {
   "attributes": {
    "value": {
     "access": "GLOBAL",
     "name": "value",
     "type": "String",
     "required": "true",
     "description": "The phone number displayed when this component is rendered."
    }
   },
   "imports": {
    "ui:eventLib": {
     "library": "ui:eventLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputRadio.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:underConstruction": [
     {}
    ]
   }
  },
  "outputRichText.cmp": {
   "attributes": {
    "value": {
     "access": "GLOBAL",
     "name": "value",
     "type": "String",
     "description": "The richly-formatted text used for output."
    },
    "supportedTags": {
     "name": "supportedTags",
     "type": "String",
     "description": "A list of supported HTML tag names separated by comma; the list is stored in the helper file of this component. Certain tags, such as <script>, are removed. The default value is used if it is not specified."
    },
    "supportedAttrs": {
     "name": "supportedAttrs",
     "type": "String",
     "description": "A list of supported attributes separated by comma; the default list is stored in the helper file of this component and will be used if this attribute is not specified."
    }
   },
   "imports": {
    "ui:securityLib": {
     "library": "ui:securityLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:unescapedHTML": [
     {
      "value": "{!v.value}"
     }
    ]
   }
  },
  "outputSelect.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputText.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "required": "true",
     "access": "GLOBAL",
     "description": "The text displayed when this component is rendered."
    },
    "title": {
     "name": "title",
     "type": "String",
     "access": "GLOBAL",
     "description": "The title attribute for the text in this component"
    }
   },
   "imports": {
    "ui:eventLib": {
     "library": "ui:eventLib",
     "property": "lib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputTextArea.cmp": {
   "attributes": {
    "value": {
     "access": "GLOBAL",
     "name": "value",
     "type": "String",
     "required": "true",
     "description": "The text to display."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "outputURL.cmp": {
   "attributes": {
    "iconClass": {
     "access": "GLOBAL",
     "name": "iconClass",
     "type": "String",
     "description": "The CSS style used to display the icon or image."
    },
    "title": {
     "access": "GLOBAL",
     "name": "title",
     "type": "String",
     "default": "",
     "description": "The text to display as a tooltip when the mouse pointer hovers over this component."
    },
    "value": {
     "access": "GLOBAL",
     "name": "value",
     "type": "String",
     "required": "true",
     "description": "The text displayed when this component is rendered."
    },
    "target": {
     "access": "GLOBAL",
     "name": "target",
     "type": "String",
     "description": "The target destination where this rendered component is displayed. Possible values: _blank, _parent, _self, _top"
    },
    "alt": {
     "access": "GLOBAL",
     "name": "alt",
     "type": "String",
     "description": "The alternate text description for image (used when there is no label)"
    },
    "label": {
     "access": "GLOBAL",
     "name": "label",
     "type": "String",
     "description": "The text displayed on the component."
    },
    "disabled": {
     "access": "GLOBAL",
     "name": "disabled",
     "type": "Boolean",
     "default": "false",
     "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\"."
    },
    "stopPropagation": {
     "name": "stopPropagation",
     "type": "Boolean",
     "default": "false",
     "description": "Prevents the click event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."
    },
    "fixURL": {
     "name": "fixURL",
     "type": "Boolean",
     "default": "false",
     "description": "If true prepends 'http://' to links that don't specify a protocol nor start with '/'"
    },
    "stopNavigation": {
     "name": "stopNavigation",
     "type": "Boolean",
     "default": "false",
     "description": "Prevents navigation to specified URL on click if true."
    }
   },
   "imports": {
    "ui:eventLib": {
     "library": "ui:eventLib",
     "property": "lib"
    }
   },
   "events": {
    "click": {
     "name": "click",
     "type": "ui:click",
     "access": "GLOBAL",
     "description": "The event fired when the user clicks on the component."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "pager.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "onPageChange": {
     "name": "onPageChange",
     "type": "ui:pagerEvent",
     "description": "The event that is fired when a concrete pager triggers a paging event."
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.updateCalculatedFields}"
    },
    "change": {
     "name": "change",
     "value": "{!v.totalItems}",
     "action": "{!c.updateCalculatedFields}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "pagerJumpToPage.cmp": {
   "attributes": {
    "Labels_Page": {
     "name": "Labels_Page",
     "type": "String",
     "default": "Page ",
     "description": "The text to display in the label before the page input."
    },
    "Labels_Of": {
     "name": "Labels_Of",
     "type": "String",
     "default": " of ",
     "description": "The text to display in the label between the page input and pageCount."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "pagerNextPrevious.cmp": {
   "attributes": {
    "Labels_First": {
     "name": "Labels_First",
     "type": "String",
     "default": "First",
     "description": "The text to display in the label of the link used to jump to the first page."
    },
    "Labels_Last": {
     "name": "Labels_Last",
     "type": "String",
     "default": "Last",
     "description": "The text to display in the label of the link used to jump to the last page."
    },
    "Labels_Next": {
     "name": "Labels_Next",
     "type": "String",
     "default": "Next",
     "description": "The text to display in the label of the link used to jump to the next page."
    },
    "Labels_Previous": {
     "name": "Labels_Previous",
     "type": "String",
     "default": "Previous",
     "description": "The text to display in the label of the link used to jump to the previous page."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.currentPage le 1}"
     },
     {
      "isTrue": "{!v.currentPage le 1}"
     },
     {
      "isTrue": "{!v.currentPage == v.pageCount}"
     },
     {
      "isTrue": "{!v.currentPage == v.pageCount}"
     }
    ]
   }
  },
  "pagerPageInfo.cmp": {
   "attributes": {
    "Labels_Of": {
     "name": "Labels_Of",
     "type": "String",
     "default": " of ",
     "description": "The text to display between the endItem and totalItems."
    },
    "Labels_To": {
     "name": "Labels_To",
     "type": "String",
     "default": " - ",
     "description": "The text to display between the startItem and endItem."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "pagerPageSize.cmp": {
   "attributes": {
    "Labels_All": {
     "name": "Labels_All",
     "type": "String",
     "default": "All",
     "description": "The text to display in the option to show all items."
    },
    "Labels_Records": {
     "name": "Labels_Records",
     "type": "String",
     "default": "Records per page: ",
     "description": "The text to display in the label before the pageSize input."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputSelect": [
     {
      "label": "{!v.Labels_Records}",
      "value": "{!v.pageSize}",
      "change": "{!c.changePageSize}"
     }
    ],
    "ui:inputSelectOption": [
     {
      "label": "10",
      "text": "10"
     },
     {
      "label": "25",
      "text": "25"
     },
     {
      "label": "50",
      "text": "50"
     },
     {
      "label": "100",
      "text": "100"
     },
     {
      "label": "200",
      "text": "200"
     }
    ]
   }
  },
  "panel.cmp": {
   "attributes": {
    "title": {
     "name": "title",
     "type": "String",
     "description": "The title of the dialog window"
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "CSS class"
    },
    "titleDisplay": {
     "name": "titleDisplay",
     "type": "Boolean",
     "default": "true",
     "description": "If true, the title of the window can be shown/hidden for accessibility. The default is true."
    },
    "startOfDialogLabel": {
     "name": "startOfDialogLabel",
     "type": "String",
     "default": "Start of Dialog",
     "description": "Accessibility label that indicates the start of the dialog"
    },
    "closeOnClickOut": {
     "name": "closeOnClickOut",
     "type": "Boolean",
     "default": "false",
     "description": "If true, adds a listener to close the dialog when a user clicks outside the dialog. The default is false."
    },
    "closeAction": {
     "name": "closeAction",
     "type": "Object",
     "description": "Overrides default close action (which is destroy) on click outside, tab out and Esc key press. The action is called with two parameters: panel component and one of 'closeOnEsc', 'closeOnTabOut' or 'closeOnClickOut'"
    },
    "showCloseButton": {
     "name": "showCloseButton",
     "type": "Boolean",
     "default": "true",
     "description": "If true, adds a close button in top right corner of the dialog. The default is true."
    },
    "closeDialogLabel": {
     "name": "closeDialogLabel",
     "type": "String",
     "default": "Close",
     "description": "Close dialog button label"
    },
    "useTransition": {
     "name": "useTransition",
     "type": "Boolean",
     "default": "true",
     "description": "If true, uses css transition when showing or hiding the panel. The default is true."
    },
    "animation": {
     "name": "animation",
     "type": "String",
     "default": "bottom",
     "description": "Adds animation to the dialog"
    },
    "closeAnimation": {
     "name": "closeAnimation",
     "type": "String",
     "description": "Adds a different animation for closing the panel"
    },
    "autoFocus": {
     "name": "autoFocus",
     "type": "Boolean",
     "default": "true",
     "description": "If true, sets the panel as the first focusable element. The default is true."
    },
    "referenceElementSelector": {
     "name": "referenceElementSelector",
     "type": "String",
     "description": "A selector representing the reference element to position relative to. If the selector resolves to mutiple elements the first one will be used."
    },
    "referenceElement": {
     "name": "referenceElement",
     "type": "Object",
     "description": "The reference node to which this dialog should be positioned."
    },
    "direction": {
     "name": "direction",
     "type": "String",
     "default": "north",
     "description": "The direction to position the panel. The default is north. Valid values: north, east, west, south, northwest, northeast, southeast, southwest"
    },
    "showPointer": {
     "name": "showPointer",
     "type": "Boolean",
     "default": "false",
     "description": "If true, shows a pointer that points to the referenceElement. The default is false."
    },
    "boundingElement": {
     "name": "boundingElement",
     "type": "Object",
     "description": "an element to keep the panel within, default is the window"
    },
    "inside": {
     "name": "inside",
     "type": "Boolean",
     "default": "false",
     "description": "Position the element inside the target"
    },
    "advancedConfig": {
     "name": "advancedConfig",
     "type": "Object",
     "description": "Advanced positioning options, overrides direction. align and targetAlign are required, vertPad is optional."
    },
    "pad": {
     "name": "pad",
     "type": "Integer",
     "default": "15",
     "description": "How much padding."
    },
    "closeButton": {
     "name": "closeButton",
     "type": "Aura.Component[]",
     "description": "Replaces the default close button with a custom one"
    }
   },
   "imports": {
    "ui:panelLib": {
     "library": "ui:panelLib",
     "property": "lib"
    },
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "positioningLib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "notify": {
     "name": "notify",
     "event": "ui:notify",
     "action": "{!c.onNotify}",
     "description": "Enables panel manager and panels to communicate"
    },
    "change": {
     "name": "change",
     "value": "{!v.boundingElement}",
     "action": "{!c.onRefChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://aura:unescapedHtml",
      "type": "COMPONENT"
     }
    ],
    "aura:If": [
     {
      "isTrue": "{!!empty(v.title)}"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.showPointer}"
     }
    ]
   }
  },
  "panelDialog.cmp": {
   "attributes": {
    "closeOnClickOut": {
     "name": "closeOnClickOut",
     "type": "Boolean",
     "default": "false",
     "description": "Adds a listener to close the dialog when a user clicks outside the dialog"
    },
    "showCloseButton": {
     "name": "showCloseButton",
     "type": "Boolean",
     "default": "true",
     "description": "Adds a close button in top right corner of the dialog"
    },
    "closeAction": {
     "name": "closeAction",
     "type": "Aura.Action",
     "default": "{!c.hide}",
     "description": "Close Aura Action function"
    },
    "class": {
     "name": "class",
     "type": "String",
     "default": "",
     "description": "Adds CSS classes to the dialog"
    },
    "animation": {
     "name": "animation",
     "type": "String",
     "default": "bottom",
     "description": "Adds animation to the dialog"
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The title of the dialog window"
    },
    "startOfDialogLabel": {
     "name": "startOfDialogLabel",
     "type": "String",
     "default": "Start of Dialog",
     "description": "Accessibility label that indicates the start of the dialog"
    },
    "closeDialogLabel": {
     "name": "closeDialogLabel",
     "type": "String",
     "default": "Close",
     "description": "Close dialog button label"
    },
    "detail": {
     "name": "detail",
     "type": "String",
     "description": "The description of the dialog window"
    },
    "icon": {
     "name": "icon",
     "type": "Aura.Component[]",
     "description": "The icon for the dialog"
    },
    "isVisible": {
     "name": "isVisible",
     "type": "Boolean",
     "default": "false",
     "description": "Displays dialog on render"
    },
    "autoFocus": {
     "name": "autoFocus",
     "type": "Boolean",
     "default": "true",
     "description": "Focuses automatically on the first focusable element"
    },
    "titleDisplay": {
     "name": "titleDisplay",
     "type": "Boolean",
     "default": "true",
     "description": "The title of the window can be shown/hidden for accessibility"
    },
    "isTransient": {
     "name": "isTransient",
     "type": "Boolean",
     "default": "true",
     "description": "Indicates if the dialog is one-time use and should be destroyed when hidden"
    },
    "isModal": {
     "name": "isModal",
     "type": "Boolean",
     "default": "false",
     "description": "Indicates if this dialog is modal"
    },
    "referenceElement": {
     "name": "referenceElement",
     "type": "Object",
     "description": "The reference node to which this dialog should be positioned"
    },
    "lastFocusedInput": {
     "name": "lastFocusedInput",
     "type": "Object",
     "description": "The last element within the panel to receive input focus."
    },
    "callbacks": {
     "name": "callbacks",
     "type": "Object",
     "description": "Option callbacks that can be set when creating a new panel through the panelManager."
    }
   },
   "imports": {},
   "events": {
    "panelDoneRendering": {
     "name": "panelDoneRendering",
     "type": "ui:panelDoneRendering"
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:panelTransitionBegin",
      "type": "EVENT"
     },
     {
      "resource": "markup://ui:panelTransitionEnd",
      "type": "EVENT"
     },
     {
      "resource": "markup://ui:updateSize",
      "type": "EVENT"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.isModal}"
     },
     {
      "isTrue": "{!v.showCloseButton}"
     }
    ],
    "ui:header": [
     {
      "class": "titleBar modalWindow"
     }
    ],
    "aura:renderIf": [
     {
      "isTrue": "{! v.title != '' && v.title != null}"
     }
    ],
    "ui:button": [
     {
      "class": "closeBtn",
      "press": "{!c.close}",
      "label": "{!v.closeDialogLabel}",
      "buttonTitle": "{!v.closeDialogLabel}",
      "labelDisplay": "false"
     }
    ]
   }
  },
  "panelManager.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "default": "one",
     "description": "The class that's added to the div tag of the panel container."
    },
    "cancelButtonLabel": {
     "name": "cancelButtonLabel",
     "type": "String",
     "default": "Cancel",
     "description": "The label on the Cancel button on an overlay panel. The default label is Cancel."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "undefined": {
     "event": "ui:panelDestroy",
     "action": "{!c.destroyAllPanels}",
     "description": "The event fired when all panels are destroyed from the DOM."
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:panelDialog"
     },
     {
      "resource": "markup://ui:hidePanel",
      "type": "EVENT"
     },
     {
      "resource": "markup://ui:button",
      "type": "COMPONENT"
     }
    ]
   }
  },
  "panelManager2.cmp": {
   "attributes": {
    "registeredPanels": {
     "name": "registeredPanels",
     "type": "Aura.ComponentDefRef[]",
     "description": "The panel and modal components handled by the panel manager."
    },
    "useSharedContainer": {
     "name": "useSharedContainer",
     "type": "Boolean",
     "default": "false",
     "description": ""
    }
   },
   "imports": {
    "ui:containerManagerLib": {
     "library": "ui:containerManagerLib",
     "property": "cmLib"
    },
    "ui:stackManagerLib": {
     "library": "ui:stackManagerLib",
     "property": "smLib"
    }
   },
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "notify": {
     "name": "notify",
     "event": "ui:notify",
     "action": "{!c.handleNotify}"
    },
    "undefined": {
     "event": "ui:stackPanel",
     "action": "{!c.stackPanel}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{! not(v.useSharedContainer) }"
     }
    ]
   }
  },
  "pill.cmp": {
   "attributes": {
    "label": {
     "name": "label",
     "type": "String",
     "description": "The text displayed in the pill"
    },
    "id": {
     "name": "id",
     "type": "String",
     "description": "The id of the object the pill represents"
    },
    "showDelete": {
     "name": "showDelete",
     "type": "Boolean",
     "default": "true",
     "description": "Show delete icon inside pill"
    },
    "iconUrl": {
     "name": "iconUrl",
     "type": "String",
     "description": "The url for the icon"
    },
    "iconBackgroundColor": {
     "name": "iconBackgroundColor",
     "type": "String",
     "description": "The background color for the icon"
    },
    "iconAlt": {
     "name": "iconAlt",
     "type": "String",
     "description": "The alt attribute for the icon"
    },
    "accessibleDeleteLabel": {
     "name": "accessibleDeleteLabel",
     "type": "String",
     "default": "Press Delete to Remove",
     "description": "The accessible label for the close icon."
    },
    "maxCharacters": {
     "name": "maxCharacters",
     "type": "Integer",
     "default": "30",
     "description": "The maximum number of characters displayed in a pill."
    },
    "active": {
     "name": "active",
     "type": "Boolean",
     "default": "true",
     "description": "Specifies whether a pill is active and will take focus"
    }
   },
   "imports": {
    "ui:eventLib": {
     "library": "ui:eventLib",
     "property": "lib"
    }
   },
   "events": {
    "onHandledEvent": {
     "name": "onHandledEvent",
     "type": "ui:response",
     "description": "The event fired when the user interactions with this component which it should be handled by the pillContainer (i.e left and right arrow, Enter, and Backspace)"
    },
    "keydown": {
     "name": "keydown",
     "type": "ui:keydown",
     "access": "GLOBAL",
     "description": "The event fired when the user presses a keyboard key on the component."
    },
    "blur": {
     "name": "blur",
     "type": "ui:blur",
     "access": "GLOBAL",
     "description": "The event fired when the user moves off from the component."
    }
   },
   "handlers": {
    "keydown": {
     "name": "keydown",
     "action": "{!c.handleInteraction}"
    },
    "blur": {
     "name": "blur",
     "action": "{!c.onBlur}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!!empty(v.iconUrl)}"
     },
     {
      "isTrue": "{!v.showDelete}"
     }
    ],
    "ui:image": [
     {
      "aura:id": "icon",
      "src": "{!v.iconUrl}",
      "imageType": "{!empty(v.iconAlt) ? 'decorative' : 'informational'}",
      "alt": "{!v.iconAlt}",
      "onerror": "{!c.onIconError}"
     }
    ]
   }
  },
  "pillContainer.cmp": {
   "attributes": {
    "items": {
     "name": "items",
     "type": "List"
    },
    "maxAllowed": {
     "name": "maxAllowed",
     "type": "Integer",
     "default": "10",
     "description": "Max pills this container should have."
    },
    "maxLines": {
     "name": "maxLines",
     "type": "Integer",
     "default": "0",
     "description": "Maximum lines to show. Hidden lines can be expanded. Use 0 to disable."
    },
    "focusOnInput": {
     "name": "focusOnInput",
     "type": "Boolean",
     "default": "true",
     "description": "Focus on input box when the component is created."
    },
    "allowRemove": {
     "name": "allowRemove",
     "type": "Boolean",
     "default": "true",
     "description": "Allows deleting pills from container."
    },
    "pillInput": {
     "name": "pillInput",
     "type": "Aura.Component[]",
     "description": "An input component that will be added to the end of the list of pills"
    },
    "showMoreLabel": {
     "name": "showMoreLabel",
     "type": "String",
     "default": "Show More ▾",
     "description": "The label for the show more button"
    },
    "pillFlavor": {
     "name": "pillFlavor",
     "type": "String",
     "default": "default"
    },
    "assistiveTextLabel": {
     "name": "assistiveTextLabel",
     "type": "String",
     "description": "Assitive text for the pill container"
    },
    "expanded": {
     "name": "expanded",
     "type": "Boolean",
     "default": "false",
     "access": "private"
    }
   },
   "imports": {},
   "events": {
    "pillInserted": {
     "name": "pillInserted",
     "type": "ui:response",
     "description": "Event fired when a pill is inserted in this container."
    },
    "pillRemoved": {
     "name": "pillRemoved",
     "type": "ui:response",
     "description": "Event fired when a pill is removed from this container."
    }
   },
   "handlers": {
    "blur": {
     "name": "blur",
     "event": "ui:blur",
     "action": "{!c.onInputFocus}"
    },
    "focus": {
     "name": "focus",
     "event": "ui:focus",
     "action": "{!c.onInputBlur}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.maxAllowed}",
     "action": "{!c.onItemsChanged}"
    }
   },
   "methods": {
    "insertItems": {
     "items": {
      "name": "items",
      "type": "List"
     }
    }
   },
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.items}",
      "var": "item",
      "iterationComplete": "{!c.pillIterationComplete}",
      "aura:id": "pills"
     }
    ],
    "ui:pill": [
     {
      "aura:id": "pill",
      "aura:flavor": "{!v.pillFlavor}",
      "iconUrl": "{!item.icon.url}",
      "iconBackgroundColor": "{!item.icon.backgroundColor}",
      "iconAlt": "{!item.icon.alt}",
      "label": "{!item.label}",
      "id": "{!item.id}",
      "showDelete": "{!v.allowRemove}",
      "maxCharacters": "{!v.maxCharactersInPill}",
      "onHandledEvent": "{!c.handlePillEvent}"
     }
    ]
   }
  },
  "pillContainerAutoComplete.cmp": {
   "attributes": {
    "allowNew": {
     "name": "allowNew",
     "type": "Boolean",
     "default": "true",
     "description": "Allows new items to be added that are not returned from the data provider"
    },
    "parameters": {
     "name": "parameters",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {
    "updateParameters": {
     "parameters": {
      "name": "parameters",
      "type": "List"
     }
    }
   },
   "dependencies": {}
  },
  "pillContainerAutoCompleteOption.cmp": {
   "attributes": {
    "iconUrl": {
     "name": "iconUrl",
     "type": "String",
     "default": "true"
    },
    "iconBackgroundColor": {
     "name": "iconBackgroundColor",
     "type": "String",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:image": [
     {
      "src": "{!v.iconUrl}",
      "class": "optionIcon",
      "imageType": "decorative"
     }
    ]
   }
  },
  "popup.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "popupTriggerPress": {
     "name": "popupTriggerPress",
     "type": "ui:popupTriggerPress",
     "description": "The event fired when the popup trigger is pressed. Other components may also fire this event to simulate a trigger press."
    },
    "popupTargetShow": {
     "name": "popupTargetShow",
     "type": "ui:popupTargetShow",
     "description": "The trigger fires this event to show the target. Other components may also fire this event to show the target."
    },
    "popupTargetHide": {
     "name": "popupTargetHide",
     "type": "ui:popupTargetHide",
     "description": "The trigger fires this event to hide the target. Other components may also fire this event to hide the target."
    },
    "popupKeyboardEvent": {
     "name": "popupKeyboardEvent",
     "type": "ui:popupKeyboardEvent",
     "description": "The event fired when a user interacts with a popup via the keyboard."
    },
    "refresh": {
     "name": "refresh",
     "type": "ui:refresh",
     "description": "Fire this event to refresh the popup"
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    },
    "popupTriggerPress": {
     "name": "popupTriggerPress",
     "action": "{!c.onTriggerPress}"
    },
    "popupTargetShow": {
     "name": "popupTargetShow",
     "action": "{!c.onTargetShow}"
    },
    "popupTargetHide": {
     "name": "popupTargetHide",
     "action": "{!c.onTargetHide}"
    },
    "popupKeyboardEvent": {
     "name": "popupKeyboardEvent",
     "action": "{!c.onKeyboardEvent}"
    },
    "refresh": {
     "name": "refresh",
     "action": "{!c.onRefresh}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "popupTarget.cmp": {
   "attributes": {
    "visible": {
     "name": "visible",
     "type": "Boolean",
     "default": "false",
     "description": "Controls the visibility of the popup target. The default is false, which hides the menu."
    },
    "closeOnTabKey": {
     "access": "GLOBAL",
     "name": "closeOnTabKey",
     "type": "Boolean",
     "default": "true",
     "description": "Indicates whether to close the target list on tab key or not."
    },
    "autoPosition": {
     "access": "GLOBAL",
     "name": "autoPosition",
     "type": "Boolean",
     "default": "true",
     "description": "Move the popup target up when there is not enough space at the bottom to display. Note: even if autoPosition is set to false, popup will still position the menu relative to the trigger. To override default positioning, use manualPosition attribute."
    },
    "manualPosition": {
     "name": "manualPosition",
     "type": "Boolean",
     "default": "false",
     "description": "Flag to override auto position."
    },
    "attachToBody": {
     "name": "attachToBody",
     "type": "Boolean",
     "default": "false",
     "description": "Move the target up to HTML body level to make sure it is not blocked by others. "
    },
    "referenceElement": {
     "name": "referenceElement",
     "type": "Object",
     "description": "The reference node which this target list should be positioned to. Usually it is a trigger element."
    },
    "curtain": {
     "access": "GLOBAL",
     "name": "curtain",
     "type": "Boolean",
     "default": "false",
     "description": "Whether or not to apply an overlay under the target."
    },
    "closeOnClickOutside": {
     "access": "GLOBAL",
     "name": "closeOnClickOutside",
     "type": "Boolean",
     "default": "true",
     "description": "Close target when user clicks or taps outside of the target"
    },
    "closeOnClickInside": {
     "name": "closeOnClickInside",
     "type": "Boolean",
     "default": "false",
     "description": "Close target when user clicks or taps inside of the target"
    },
    "preTransitionClass": {
     "name": "preTransitionClass",
     "type": "String",
     "default": "",
     "description": "This CSS class is initially applied to the target then removed prior to toggling the visible class. This is to allow for CSS transitions."
    },
    "showNubbin": {
     "name": "showNubbin",
     "type": "Boolean",
     "default": "false",
     "description": "Shows a little triangle at the top when used in a menu."
    }
   },
   "imports": {},
   "events": {
    "popupCollapse": {
     "name": "popupCollapse",
     "type": "ui:collapse",
     "description": "The event fired when the popup target list collapses."
    },
    "popupExpand": {
     "name": "popupExpand",
     "type": "ui:expand",
     "description": "The event fired when the popup target list displays."
    },
    "popupKeyboardEvent": {
     "name": "popupKeyboardEvent",
     "type": "ui:popupKeyboardEvent",
     "description": "The event fired when the user interacts with the popup using the keyboard."
    },
    "doClose": {
     "name": "doClose",
     "type": "ui:collapse",
     "description": "Tell the target to close itself."
    }
   },
   "handlers": {
    "popupKeyboardEvent": {
     "name": "popupKeyboardEvent",
     "action": "{!c.handleKeyboardEvent}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{! v.attachToBody && v.curtain}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "popupTrigger.cmp": {
   "attributes": {
    "title": {
     "access": "GLOBAL",
     "name": "title",
     "type": "String",
     "default": "",
     "description": "The text to display as a tooltip when the mouse pointer hovers over this component."
    },
    "trigger": {
     "name": "trigger",
     "type": "Aura.Component[]",
     "description": "Used to override the default HTML and trigger event handling. If used, developer must trigger show/hide events for popup target since v.trigger is not wrapped in a link tag, it is wrapped in a plain div."
    },
    "stopClickPropagation": {
     "name": "stopClickPropagation",
     "type": "Boolean",
     "default": "false",
     "description": "Prevents the click event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."
    }
   },
   "imports": {},
   "events": {
    "popupTriggerPress": {
     "name": "popupTriggerPress",
     "type": "ui:popupTriggerPress",
     "description": "The event fired when a popup trigger is pressed."
    },
    "popupTargetShow": {
     "name": "popupTargetShow",
     "type": "ui:popupTargetShow",
     "description": "The trigger fires this event to show the target."
    },
    "popupTargetHide": {
     "name": "popupTargetHide",
     "type": "ui:popupTargetHide",
     "description": "The trigger fires this event to hide the target."
    },
    "popupKeyboardEvent": {
     "name": "popupKeyboardEvent",
     "type": "ui:popupKeyboardEvent",
     "description": "The event fired when a user interacts with a popup via the keyboard."
    }
   },
   "handlers": {
    "undefined": {
     "event": "ui:popupTargetToggle",
     "action": "{!c.onPopupToggle}"
    }
   },
   "methods": {
    "triggerInteraction": {}
   },
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.trigger.length > 0}"
     },
     {
      "isTrue": "{!v.label != null}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ]
   }
  },
  "radioMenuItem.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "click": {
     "name": "click",
     "action": "{!c.handleClick}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.body.length == 0}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "radioToggleMenuItem.cmp": {
   "attributes": {
    "isAscending": {
     "name": "isAscending",
     "type": "Boolean",
     "default": "true",
     "description": "Component can be either in a true or false set (independent of being selected)"
    },
    "ascLabel": {
     "name": "ascLabel",
     "type": "String",
     "default": "Ascending",
     "description": "Label for ascending state"
    },
    "descLabel": {
     "name": "descLabel",
     "type": "String",
     "default": "Descending",
     "description": "Label for descending state"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.isAscending}",
     "action": "{!c.updateDirection}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "resizeObserver.cmp": {
   "attributes": {
    "onresize": {
     "name": "onresize",
     "type": "Aura.Action",
     "description": "The action that is run on resize."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "aura:doneWaiting",
     "action": "{!c.updateSize}",
     "description": "The event fired when the client is done waiting for a response to a server request."
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "scroller.cmp": {
   "attributes": {
    "scroll": {
     "name": "scroll",
     "type": "String",
     "default": "vertical",
     "description": "Defines the scroll direction. The string values can be either horizontal, vertical or bidirectional"
    },
    "enabled": {
     "name": "enabled",
     "type": "Boolean",
     "default": "true",
     "description": "Sets the default state of the scroller"
    },
    "useCSSTransition": {
     "name": "useCSSTransition",
     "type": "Boolean",
     "description": "Denotes whether to use css transitions. By default scroller will decide depending on the platform"
    },
    "useNativeScroller": {
     "name": "useNativeScroller",
     "type": "Boolean",
     "default": "false",
     "description": "Leverage native scrolling"
    },
    "preventNestedScroll": {
     "name": "preventNestedScroll",
     "type": "Boolean",
     "default": "false",
     "description": "(If useNative: true) Prevents any parent nested scroller to scroll by default"
    },
    "preventDefaultOnMove": {
     "name": "preventDefaultOnMove",
     "type": "Boolean",
     "default": "false",
     "description": "preventDefault native events on mouse move"
    },
    "debounce": {
     "name": "debounce",
     "type": "Boolean",
     "default": "false",
     "description": "Separate the gesture move from the animation"
    },
    "snap": {
     "name": "snap",
     "type": "Boolean",
     "default": "false",
     "description": "Enable snap behaviour on the scroller (adds the Snap plugins to the scroller)"
    },
    "endless": {
     "name": "endless",
     "type": "Boolean",
     "default": "false",
     "description": "Activates the endless plugin (gpuOptimization needs to be enable for this)"
    },
    "snapType": {
     "name": "snapType",
     "type": "String",
     "default": "soft",
     "description": "Snap type. Values: sticky | soft"
    },
    "plugins": {
     "name": "plugins",
     "type": "String",
     "default": "",
     "description": "The list of plugins to add"
    },
    "gpuOptimization": {
     "name": "gpuOptimization",
     "type": "Boolean",
     "default": "false",
     "description": "Activate Surface Mannager to create GPU accelerate surfaces for better performace."
    },
    "bindEventsToScroller": {
     "name": "bindEventsToScroller",
     "type": "Boolean",
     "default": "false",
     "description": "Binds mouse or touch events to the scroller DOM container, otherwise will be attached to the window object"
    },
    "showScrollbars": {
     "name": "showScrollbars",
     "type": "Boolean",
     "default": "false",
     "description": "Enable scrollbars"
    },
    "canShowMore": {
     "name": "canShowMore",
     "type": "Boolean",
     "description": "Whether this scroller can be invoked to show more content"
    },
    "canRefresh": {
     "name": "canRefresh",
     "type": "Boolean",
     "description": "Whether this scroller can be invoked to refresh its content"
    },
    "width": {
     "name": "width",
     "type": "Integer",
     "description": "The width of the scroll area in pixels"
    },
    "height": {
     "name": "height",
     "type": "Integer",
     "description": "The height of the scroll area in pixels"
    },
    "itemWidth": {
     "name": "itemWidth",
     "type": "Integer",
     "description": "The width of the scroll area in pixels"
    },
    "itemHeight": {
     "name": "itemHeight",
     "type": "Integer",
     "description": "The height of the scroll area in pixels"
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "A CSS style to be attached to the scroll area"
    },
    "scrollContentClass": {
     "name": "scrollContentClass",
     "type": "String",
     "description": "A CSS style to be attached to the scroll content area"
    },
    "minThreshold": {
     "name": "minThreshold",
     "type": "Integer",
     "default": "5",
     "description": ""
    },
    "minDirectionThreshold": {
     "name": "minDirectionThreshold",
     "type": "Integer",
     "default": "1",
     "description": ""
    },
    "lockOnDirection": {
     "name": "lockOnDirection",
     "type": "String",
     "description": ""
    },
    "onBeforeScrollStart": {
     "name": "onBeforeScrollStart",
     "type": "Aura.Action",
     "description": "The action invoked before the user starts scrolling"
    },
    "onScrollStart": {
     "name": "onScrollStart",
     "type": "Aura.Action",
     "description": "The action invoked when the scroll starts"
    },
    "onScrollEnd": {
     "name": "onScrollEnd",
     "type": "Aura.Action",
     "description": "The action invoked when scroller stops"
    },
    "onScrollMove": {
     "name": "onScrollMove",
     "type": "Aura.Action",
     "description": "The action invoked when scrolling"
    },
    "onPullToShowMore": {
     "name": "onPullToShowMore",
     "type": "Aura.Action",
     "description": "The action invoked when the user pulls from the bottom to load more"
    },
    "onPullToRefresh": {
     "name": "onPullToRefresh",
     "type": "Aura.Action",
     "description": "The action invoked when the user pulls to refresh the scroller area"
    },
    "infiniteLoading": {
     "name": "infiniteLoading",
     "type": "Boolean",
     "description": "Enable Infinite loading (adds the infinite loading plugin to the scroller)"
    },
    "infiniteLoadingThreshold": {
     "name": "infiniteLoadingThreshold",
     "type": "Integer",
     "description": "Callback invoked When the user scrolls to this many pixels from the bottom"
    },
    "infiniteLoadingDataProvider": {
     "name": "infiniteLoadingDataProvider",
     "type": "Aura.Action",
     "description": "The action invoked when the user has reached the end of the scrolling area"
    },
    "infiniteLoadingNoDataLabel": {
     "name": "infiniteLoadingNoDataLabel",
     "type": "String",
     "default": "No more data to display",
     "description": "The text to display when no more data is available to be shown"
    },
    "infiniteLoadingIdleLabel": {
     "name": "infiniteLoadingIdleLabel",
     "type": "String",
     "default": "",
     "description": "The text to display when no loading is happening"
    },
    "infiniteLoadingLoadingLabel": {
     "name": "infiniteLoadingLoadingLabel",
     "type": "String",
     "default": "Loading more...",
     "description": "The text to display while the infinite loading callback is invoked"
    },
    "pullToShowMoreClick": {
     "name": "pullToShowMoreClick",
     "type": "String",
     "default": "Tap to show more",
     "description": "The text before the user pulls clicks to refresh content"
    },
    "pullToShowMorePull": {
     "name": "pullToShowMorePull",
     "type": "String",
     "default": "Pull up to show more...",
     "description": "The text before the user pulls to show more content"
    },
    "pullToShowMoreRelease": {
     "name": "pullToShowMoreRelease",
     "type": "String",
     "default": "Release to show more...",
     "description": "The text when the user pulls to show more content in the scroller area"
    },
    "pullToShowMoreUpdating": {
     "name": "pullToShowMoreUpdating",
     "type": "String",
     "default": "Updating...",
     "description": "The text to display while the scroller component is updating"
    },
    "pullToShowMoreSubtitle": {
     "name": "pullToShowMoreSubtitle",
     "type": "String",
     "default": "",
     "description": "The text to display in the bottom cell"
    },
    "pullToShowMoreError": {
     "name": "pullToShowMoreError",
     "type": "String",
     "default": "Error on Pull to load more",
     "description": "The text to display while the scroller component is updating"
    },
    "pullToRefreshClick": {
     "name": "pullToRefreshClick",
     "type": "String",
     "default": "Tap to refresh",
     "description": "The text to display in the top cell before the user clicks to refresh the page"
    },
    "pullToRefreshPull": {
     "name": "pullToRefreshPull",
     "type": "String",
     "default": "Pull down to refresh...",
     "description": "The text to display in the top cell before the user pulls to refresh the page"
    },
    "pullToRefreshRelease": {
     "name": "pullToRefreshRelease",
     "type": "String",
     "default": "Release to refresh...",
     "description": "The text to display in the revealed area above the scroller"
    },
    "pullToRefreshUpdating": {
     "name": "pullToRefreshUpdating",
     "type": "String",
     "default": "Loading...",
     "description": "The text to display while the scroller component is updating"
    },
    "pullToRefreshError": {
     "name": "pullToRefreshError",
     "type": "String",
     "default": "Error on Pull to refresh",
     "description": "The text to display in the top cell when the user pulls and there is an error"
    },
    "pullToRefreshSubtitle": {
     "name": "pullToRefreshSubtitle",
     "type": "String",
     "default": "",
     "description": "The text to display in the top cell when the user pulls the scroller area to refresh the content"
    },
    "scrollButtonUp": {
     "name": "scrollButtonUp",
     "type": "String",
     "default": "Page Up",
     "description": "The text to display in the Page Up button."
    },
    "scrollButtonDown": {
     "name": "scrollButtonDown",
     "type": "String",
     "default": "Page Down",
     "description": "The text to display in the Page Down button."
    },
    "scrollButtonLeft": {
     "name": "scrollButtonLeft",
     "type": "String",
     "default": "Page Left",
     "description": "The text to display in the Page Left button."
    },
    "scrollButtonRight": {
     "name": "scrollButtonRight",
     "type": "String",
     "default": "Page Right",
     "description": "The text to display in the Page Right button."
    },
    "supportVoiceOver": {
     "name": "supportVoiceOver",
     "type": "Boolean",
     "default": "true",
     "description": "If set to true and Global.isVoiceOver is also true, user can scroll the content by clicking on the up or down button."
    }
   },
   "imports": {
    "ui:scrollerLib": {
     "library": "ui:scrollerLib",
     "property": "lib"
    },
    "ui:scopedScroll": {
     "library": "ui:scopedScroll",
     "property": "scopedScroll"
    }
   },
   "events": {
    "scrollTo": {
     "name": "scrollTo",
     "type": "ui:scrollTo",
     "description": "The event fired when the scroller should move to a new destination"
    },
    "scrollBy": {
     "name": "scrollBy",
     "type": "ui:scrollBy",
     "description": "The event fired when the scroller should move to a new destination relative to its current position"
    }
   },
   "handlers": {
    "scrollTo": {
     "name": "scrollTo",
     "action": "{!c.scrollTo}",
     "description": "Catches the event fired when the scroller should move to a new destination"
    },
    "scrollBy": {
     "name": "scrollBy",
     "action": "{!c.scrollBy}",
     "description": "Catches the event fired when the scroller should move to a new destination relative to its current position"
    },
    "change": {
     "name": "change",
     "value": "{!$Global.isVoiceOver}",
     "action": "{!c.handleVoiceOverChange}",
     "description": "Handler called when Global.isVoiceOver changes."
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:resizeObserver": [
     {
      "onresize": "{!c.refresh}"
     }
    ]
   }
  },
  "scrollerDeprecated.cmp": {
   "attributes": {
    "hScroll": {
     "name": "hScroll",
     "type": "Boolean",
     "default": "false",
     "description": "Enables horizontal scrolling on the component. Default value is \"false\"."
    },
    "vScroll": {
     "name": "vScroll",
     "type": "Boolean",
     "default": "true",
     "description": "Enables vertical scrolling on the component. Default value is \"true\"."
    },
    "showScrollbars": {
     "name": "showScrollbars",
     "type": "Boolean",
     "default": "true",
     "description": "Shows or hides scroll bars. Default value is \"true\", which shows the scroll bars."
    },
    "enabled": {
     "name": "enabled",
     "type": "Boolean",
     "default": "true",
     "description": "Displays the scroller in an enabled state. Default value is \"true\"."
    },
    "useTransform": {
     "name": "useTransform",
     "type": "Boolean",
     "default": "true",
     "description": "Denotes whether to use transform scrollers and usually used with nested scrollers. Default value is \"true\"."
    },
    "useTransition": {
     "name": "useTransition",
     "type": "Boolean",
     "default": "true",
     "description": "Denotes whether to use css transition. Default value is \"false\"."
    },
    "snap": {
     "name": "snap",
     "type": "String",
     "description": "The CSS style used to display the snap area. Locks the scroller to predefined positions."
    },
    "width": {
     "name": "width",
     "type": "String",
     "description": "The width of the scroll area in pixels (px) or percentage (%). Default value is \"100px\"."
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "A CSS style to be attached to the scroll area. This style is added in addition to base styles output by the component."
    },
    "scrollContentClass": {
     "name": "scrollContentClass",
     "type": "String",
     "description": "A CSS style to be attached to the scroll content area. This style is added in addition to base styles output by the component."
    },
    "onBeforeScrollStart": {
     "name": "onBeforeScrollStart",
     "type": "Aura.Action",
     "description": "The action invoked before the user starts scrolling."
    },
    "onScrollStart": {
     "name": "onScrollStart",
     "type": "Aura.Action",
     "description": "The action invoked when the user starts scrolling."
    },
    "onScrollEnd": {
     "name": "onScrollEnd",
     "type": "Aura.Action",
     "description": "The action invoked when the user stops scrolling."
    },
    "onScrollMove": {
     "name": "onScrollMove",
     "type": "Aura.Action",
     "description": "The action invoked when the user is scrolling."
    },
    "onScrollToBottom": {
     "name": "onScrollToBottom",
     "type": "Aura.Action",
     "description": "The action invoked when the user has reached the end of the scrolling area."
    },
    "scrollToBottomThreshold": {
     "name": "scrollToBottomThreshold",
     "type": "Integer",
     "default": "10",
     "description": "When the user scrolls to this many pixels from the bottom of the scrollable area, the onScrollToBottom action is called."
    },
    "onPullToShowMore": {
     "name": "onPullToShowMore",
     "type": "Aura.Action",
     "description": "The action invoked when the user pulls from the bottom to load more.  The spacebar or Enter key also triggers a refresh."
    },
    "pullToShowMorePull": {
     "name": "pullToShowMorePull",
     "type": "String",
     "default": "Pull up to show more...",
     "description": "The text to display in the bottom cell before the user pulls to show more content. Default value is \"Pull up to show more...\"."
    },
    "pullToShowMoreRelease": {
     "name": "pullToShowMoreRelease",
     "type": "String",
     "default": "Release to show more...",
     "description": "The text to display in the revealed area below the scroller contents when the user pulls to show more content in the scroller area, but has not yet released the pull. Default value is \"Release to show more...\"."
    },
    "pullToShowMoreUpdating": {
     "name": "pullToShowMoreUpdating",
     "type": "String",
     "default": "Loading...",
     "description": "The text to display while the scroller component is updating after the user pulls to show more content in the scroller. Default value is \"Loading...\"."
    },
    "pullToShowMoreSubtitle": {
     "name": "pullToShowMoreSubtitle",
     "type": "String",
     "description": "The text to display in the bottom cell when the user pulls the scroller area to show more content."
    },
    "canShowMore": {
     "name": "canShowMore",
     "type": "Boolean",
     "default": "true",
     "description": "Whether this scroller can be invoked to show more content. Defaults to true."
    },
    "onPullToRefresh": {
     "name": "onPullToRefresh",
     "type": "Aura.Action",
     "description": "The action invoked when the user pulls to refresh the scroller area.  The spacebar or Enter key also triggers a refresh."
    },
    "pullToRefreshPull": {
     "name": "pullToRefreshPull",
     "type": "String",
     "default": "Pull down to refresh...",
     "description": "The text to display in the top cell before the user pulls to refresh the page. Default value is \"Pull down to refresh...\"."
    },
    "pullToRefreshRelease": {
     "name": "pullToRefreshRelease",
     "type": "String",
     "default": "Release to refresh...",
     "description": "The text to display in the revealed area above the scroller contents when the user pulls to refresh the scroller area, but has not yet released the pull. Default value is \"Release to refresh...\"."
    },
    "pullToRefreshUpdating": {
     "name": "pullToRefreshUpdating",
     "type": "String",
     "default": "Loading...",
     "description": "The text to display while the scroller component is updating after the user pulls to refresh the scroller. Default value is \"Loading...\"."
    },
    "pullToRefreshSubtitle": {
     "name": "pullToRefreshSubtitle",
     "type": "String",
     "description": "The text to display in the top cell when the user pulls the scroller area to refresh the content."
    },
    "canRefresh": {
     "name": "canRefresh",
     "type": "Boolean",
     "default": "true",
     "description": "Whether this scroller can be invoked to refresh its content. Defaults to true."
    },
    "extendedPullContent": {
     "name": "extendedPullContent",
     "type": "Aura.Component[]",
     "description": "Add additional hidden content to be shown just above the starting scroll position"
    },
    "stopEventPropagation": {
     "name": "stopEventPropagation",
     "type": "Boolean",
     "default": "false",
     "description": "Disables DOM event propagation. (This probably isn't something you want to enable.)"
    },
    "checkDOMChanges": {
     "name": "checkDOMChanges",
     "type": "Boolean",
     "default": "false",
     "description": "Refresh the scroller after DOM changes."
    },
    "bindEventsToScroller": {
     "name": "bindEventsToScroller",
     "type": "Boolean",
     "default": "false",
     "description": "Set to true to bind the mouse or touch events to the scroller DOM element, otherwise, bind to the window object."
    }
   },
   "imports": {},
   "events": {
    "refreshed": {
     "name": "refreshed",
     "type": "ui:scrollerRefreshed",
     "description": "The event fired when the scroller is refreshed."
    },
    "scrollTo": {
     "name": "scrollTo",
     "type": "ui:scrollTo",
     "description": "The event fired when the scroller should move to a new destination."
    },
    "scrollBy": {
     "name": "scrollBy",
     "type": "ui:scrollBy",
     "description": "The event fired when the scroller should move to a new destination relative to its current position."
    }
   },
   "handlers": {
    "undefined": {
     "event": "aura:locationChange",
     "action": "{!c.locationChange}",
     "description": "The event fired when a location change occurs."
    },
    "scrollTo": {
     "name": "scrollTo",
     "action": "{!c.scrollTo}",
     "description": "Catches the event fired when the scroller should move to a new destination."
    },
    "scrollBy": {
     "name": "scrollBy",
     "action": "{!c.scrollBy}",
     "description": "Catches the event fired when the scroller should move to a new destination relative to its current position."
    },
    "change": {
     "name": "change",
     "value": "{!v.canShowMore}",
     "action": "{!c.handleCanShowMoreChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:resizeObserver": [
     {
      "onresize": "{!c.refresh}"
     }
    ],
    "aura:renderIf": [
     {
      "isTrue": "{!v.onPullToRefresh != null && v.canRefresh}"
     },
     {
      "isTrue": "{!v.extendedPullContent != null && v.extendedPullContent.length > 0}"
     },
     {
      "isTrue": "{!v.onPullToShowMore != null && v.canShowMore}"
     }
    ]
   }
  },
  "spinner.cmp": {
   "attributes": {
    "isVisible": {
     "access": "GLOBAL",
     "name": "isVisible",
     "type": "Boolean",
     "default": "true",
     "description": "Specifies whether or not this spinner should be visible. Defaults to true."
    },
    "class": {
     "access": "GLOBAL",
     "name": "class",
     "type": "Boolean",
     "default": "true",
     "description": "ACCESS CHECK FIX. PLEASE VERIFY THE NEED."
    }
   },
   "imports": {},
   "events": {
    "toggle": {
     "access": "GLOBAL",
     "name": "toggle",
     "type": "ui:toggleLoadingIndicator",
     "description": "The event fired when the spinner is toggled."
    }
   },
   "handlers": {
    "toggle": {
     "name": "toggle",
     "action": "{!c.toggleSpinner}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:image": [
     {
      "class": "spinner-img",
      "src": "/auraFW/resources/aura/images/spinner.gif",
      "alt": "Loading"
     }
    ]
   }
  },
  "stamp.cmp": {
   "attributes": {
    "severity": {
     "name": "severity",
     "type": "String",
     "description": "The severity with which to decorate this stamp.  Accepted values: success, warning, important, info, inverse"
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The title text for the stamp."
    },
    "onclick": {
     "name": "onclick",
     "type": "Aura.Action",
     "description": "The controller method that runs when the stamp is clicked."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tab.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "description": ""
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The text to display as a tooltip when the mouse hovers over the tab."
    },
    "name": {
     "name": "name",
     "type": "String",
     "description": "The internal name of the tab that can be referenced to."
    },
    "icon": {
     "name": "icon",
     "type": "Aura.Component[]",
     "description": "The graphical image displayed on the tab."
    },
    "scroll": {
     "name": "scroll",
     "type": "Boolean",
     "description": "Specified whether scrolling is enabled (true) or not (false) on the tab.",
     "default": "false"
    },
    "active": {
     "name": "active",
     "type": "Boolean",
     "description": "Specifies whether a tab is active (true) or not (false)."
    },
    "hidden": {
     "name": "hidden",
     "type": "Boolean",
     "description": "Specifies whether a tab is hidden (true) or not (false)."
    },
    "iconClass": {
     "name": "iconClass",
     "type": "String",
     "description": "The CSS style used to display the icon on the tab."
    },
    "closable": {
     "name": "closable",
     "type": "Boolean",
     "description": "Specifies whether to display an 'x' that will close the tab when clicked"
    },
    "ariaControlId": {
     "name": "ariaControlId",
     "type": "String",
     "description": "Force the aria-controls attribute to point to this ID. Use only when trying to override default behaviour."
    }
   },
   "imports": {},
   "events": {
    "beforeActivate": {
     "name": "beforeActivate",
     "type": "ui:tabsetEvent",
     "description": "The event is triggered before the tab is activated. Can be canceled to prevent the tab from activating."
    },
    "onActivated": {
     "name": "onActivated",
     "type": "ui:tabsetEvent",
     "description": "The event fired when the tab is activated."
    },
    "setActive": {
     "name": "setActive",
     "type": "ui:tabsetEvent",
     "description": "The event fired from ui:tabset to set this tab as active or deactive."
    }
   },
   "handlers": {
    "setActive": {
     "name": "setActive",
     "action": "{!c.setActive}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "tabBar.cmp": {
   "attributes": {
    "tabs": {
     "name": "tabs",
     "type": "List",
     "description": "List of tab configurations."
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "CSS class"
    },
    "useOverflowMenu": {
     "name": "useOverflowMenu",
     "type": "Boolean",
     "default": "false",
     "description": "Determines whether the tab bar should use an overflow menu. If true, and the total width of the tab items exceeds the specified bar width, a menu will be shown that includes the tabs that do not fit. Use in conjunction with barWidth and tabItemWidth"
    },
    "overflowLabel": {
     "name": "overflowLabel",
     "type": "String",
     "default": "More",
     "description": "Label to use for the overflow menu trigger."
    },
    "overflowIcon": {
     "name": "overflowIcon",
     "type": "Aura.Component[]",
     "description": "Icon to use for the overflow menu trigger."
    },
    "overflowData": {
     "name": "overflowData",
     "type": "Map",
     "default": "{}",
     "access": "PRIVATE",
     "description": "Internal object used to store overflow information"
    },
    "tabHeaders": {
     "name": "tabHeaders",
     "type": "Aura.Component[]",
     "access": "PRIVATE"
    }
   },
   "imports": {},
   "events": {
    "setActive": {
     "name": "setActive",
     "type": "ui:tabsetEvent",
     "description": "This event is fired from parent component to activate a tab item."
    },
    "addTab": {
     "name": "addTab",
     "type": "ui:tabsetEvent",
     "description": "This event is fired from parent component to add a tab item."
    },
    "closeTab": {
     "name": "closeTab",
     "type": "ui:tabsetEvent",
     "description": "This event is fired from parent component to close a tab item."
    },
    "onTabClosed": {
     "name": "onTabClosed",
     "type": "ui:tabsetEvent",
     "description": "This event is fired when the close icon is clicked."
    },
    "onTabActivated": {
     "name": "onTabActivated",
     "type": "ui:tabsetEvent",
     "description": "This event is fired when the tab item is clicked."
    },
    "onTabHover": {
     "name": "onTabHover",
     "type": "ui:onTabHover",
     "description": "The event is fired when the mouse moves over a tab or when a tab is put into focus."
    },
    "onTabUnhover": {
     "name": "onTabUnhover",
     "type": "ui:onTabHover",
     "description": "The event is fired when the mouse moves off of a tab or when focus is moved away from a tab."
    }
   },
   "handlers": {
    "setActive": {
     "name": "setActive",
     "action": "{!c.setActive}"
    },
    "addTab": {
     "name": "addTab",
     "action": "{!c.addTab}"
    },
    "closeTab": {
     "name": "closeTab",
     "action": "{!c.closeTab}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:tabItem"
     },
     {
      "resource": "markup://ui:tabOverflowMenuItem"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.useOverflowMenu}"
     },
     {
      "isTrue": "{!v.useOverflowMenu}"
     }
    ],
    "ui:resizeObserver": [
     {
      "onresize": "{!c.onResize}"
     }
    ],
    "ui:tabOverflowMenuItem": [
     {
      "aura:id": "overflowMenu",
      "title": "{!v.overflowLabel}",
      "icon": "{!v.overflowIcon}",
      "onTabSelection": "{!c.onOverflowSelection}"
     }
    ]
   }
  },
  "tabItem.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "description": "The class to apply to the tab item"
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The text to display on the tab."
    },
    "name": {
     "name": "name",
     "type": "String",
     "description": "The internal name of the tab that can be referenced to."
    },
    "icon": {
     "name": "icon",
     "type": "Aura.Component[]",
     "description": "The graphical image displayed on the tab."
    },
    "active": {
     "name": "active",
     "type": "Boolean",
     "description": "Indicates the tab is active or not."
    },
    "hidden": {
     "name": "hidden",
     "type": "Boolean",
     "description": "Specifies whether a tab is hidden (true) or not (false)."
    },
    "iconClass": {
     "name": "iconClass",
     "type": "String",
     "description": "The CSS style used to display the icon on the tab."
    },
    "closable": {
     "name": "closable",
     "type": "Boolean",
     "default": "false",
     "description": "Specifies whether to display an 'x' that will close the tab when clicked. Default value is 'false'."
    },
    "ariaControlId": {
     "name": "ariaControlId",
     "type": "String",
     "description": "Internal use for aria-controls attribute."
    },
    "focus": {
     "name": "focus",
     "type": "Boolean",
     "description": "Indicates the tab item should be focused or not."
    },
    "callback": {
     "name": "callback",
     "type": "Object",
     "description": "Callback function"
    }
   },
   "imports": {},
   "events": {
    "onActivate": {
     "name": "onActivate",
     "type": "ui:tabsetEvent",
     "description": "The event is fired when the tab is clicked to activate."
    },
    "onClose": {
     "name": "onClose",
     "type": "ui:tabsetEvent",
     "description": "The event is fired when the close icon is clicked to close the tab."
    },
    "onTabHover": {
     "name": "onTabHover",
     "type": "ui:onTabHover",
     "description": "The event is fired when the mouse moves over a tab or when a tab is put into focus."
    },
    "onTabUnhover": {
     "name": "onTabUnhover",
     "type": "ui:onTabHover",
     "description": "The event is fired when the mouse moves off of a tab or when focus is moved away from a tab."
    }
   },
   "handlers": {},
   "methods": {
    "setActive": {
     "active": {
      "name": "active",
      "type": "Boolean",
      "description": "Indicates the tab is active or not."
     },
     "focus": {
      "name": "focus",
      "type": "Boolean",
      "description": "Indicates the tab item should be focused or not."
     },
     "callback": {
      "name": "callback",
      "type": "Object",
      "description": "Callback function"
     }
    }
   },
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.closable}"
     }
    ]
   }
  },
  "tabOverflowMenuItem.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "description": "The class to apply to the tab item"
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The text to display on the tab."
    },
    "icon": {
     "name": "icon",
     "type": "Aura.Component[]",
     "description": "The graphical image displayed on the tab."
    },
    "active": {
     "name": "active",
     "type": "Boolean",
     "description": "Indicates the tab is active or not."
    },
    "iconClass": {
     "name": "iconClass",
     "type": "String",
     "description": "The CSS style used to display the icon on the tab."
    },
    "ariaControlId": {
     "name": "ariaControlId",
     "type": "String",
     "description": "Internal use for aria-controls attribute."
    },
    "menuItems": {
     "name": "menuItems",
     "type": "Object[]",
     "description": "List of objects that represent the menu items to be generated. Should be of the form {id: String, label: String}"
    },
    "menuItemCache": {
     "name": "menuItemCache",
     "type": "Object",
     "access": "PRIVATE"
    },
    "focusedItemName": {
     "name": "focusedItemName",
     "type": "String",
     "access": "PRIVATE"
    },
    "index": {
     "name": "index",
     "type": "Integer",
     "description": "which menu item to focuse."
    }
   },
   "imports": {},
   "events": {
    "onTabHover": {
     "name": "onTabHover",
     "type": "ui:onTabHover",
     "description": "The event is fired when the mouse moves over a tab or when a tab is put into focus."
    },
    "onTabUnhover": {
     "name": "onTabUnhover",
     "type": "ui:onTabHover",
     "description": "The event is fired when the mouse moves off of a tab or when focus is moved away from a tab."
    },
    "onTabSelection": {
     "name": "onTabSelection",
     "type": "ui:tabsetEvent",
     "description": "The event is fired when a tab from the overflow menu is selected."
    }
   },
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.menuItems}",
     "action": "{!c.updateMenuItems}"
    }
   },
   "methods": {
    "setActive": {
     "active": {
      "name": "active",
      "type": "Boolean",
      "description": "Indicates the tab is active or not."
     },
     "index": {
      "name": "index",
      "type": "Integer",
      "description": "which menu item to focuse."
     }
    }
   },
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:actionMenuItem"
     }
    ],
    "ui:menu": [
     {
      "aura:id": "menu"
     }
    ],
    "ui:menuTrigger": [
     {
      "aura:id": "trigger"
     }
    ],
    "ui:tabOverflowMenuList": [
     {
      "aura:id": "menuList",
      "menuFocusChange": "{!c.focusChange}",
      "menuCollapse": "{!c.onCollapse}",
      "forwardWrap": "{!c.handleForwardWrap}",
      "reverseWrap": "{!c.handleReverseWrap}"
     }
    ]
   }
  },
  "tabOverflowMenuList.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "forwardWrap": {
     "access": "PUBLIC",
     "name": "forwardWrap",
     "type": "ui:collapse",
     "description": "The event fired when the menu list attempts a forward wrap due to a key press."
    },
    "reverseWrap": {
     "access": "PUBLIC",
     "name": "reverseWrap",
     "type": "ui:collapse",
     "description": "The event fired when the menu list attempts a reverse wrap due to a key press."
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tabset.cmp": {
   "attributes": {
    "tabs": {
     "name": "tabs",
     "type": "List",
     "description": "The collection of objects to construct tabs."
    },
    "tabItems": {
     "name": "tabItems",
     "access": "private",
     "type": "List",
     "description": "Use internally for passing a list of tab items to ui:tabBar component."
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component."
    },
    "lazyRenderTabs": {
     "name": "lazyRenderTabs",
     "type": "Boolean",
     "default": "false",
     "description": "If true, contained ui:tab components are rendered only when they are activated. The default is false."
    },
    "useOverflowMenu": {
     "name": "useOverflowMenu",
     "type": "Boolean",
     "default": "false",
     "description": "Set to true to use an overflow menu. The default is false. The overflow menu contains any tabs that fall outside the width of the tabset."
    },
    "overflowLabel": {
     "name": "overflowLabel",
     "type": "String",
     "default": "More",
     "description": "The text label that appears on the label. The default is \"More\"."
    }
   },
   "imports": {},
   "events": {
    "addTab": {
     "name": "addTab",
     "type": "ui:tabsetEvent",
     "description": "Add new tab to the component."
    },
    "removeTab": {
     "name": "removeTab",
     "type": "ui:tabsetEvent",
     "description": "Remove a tab from the component."
    },
    "activateTab": {
     "name": "activateTab",
     "type": "ui:tabsetEvent",
     "description": "Activate a tab."
    },
    "getActiveTab": {
     "name": "getActiveTab",
     "type": "ui:tabsetEvent",
     "description": "Get the currently active tab."
    },
    "beforeActivate": {
     "name": "beforeActivate",
     "type": "ui:tabsetEvent",
     "description": "The event is triggered before the tab is activated. Can be canceled to prevent the tab from activating."
    },
    "onActivate": {
     "name": "onActivate",
     "type": "ui:tabsetEvent",
     "description": "The event is triggered when the tab is activated."
    }
   },
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    },
    "addTab": {
     "name": "addTab",
     "action": "{!c.addTab}"
    },
    "removeTab": {
     "name": "removeTab",
     "action": "{!c.removeTab}"
    },
    "activateTab": {
     "name": "activateTab",
     "action": "{!c.activateTab}"
    },
    "getActiveTab": {
     "name": "getActiveTab",
     "action": "{!c.getActiveTab}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:tab",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://ui:tabItem",
      "type": "COMPONENT"
     }
    ],
    "ui:tabBar": [
     {
      "aura:id": "tabBar",
      "tabs": "{!v.tabItems}",
      "onTabActivated": "{!c.onTabActivated}",
      "onTabClosed": "{!c.onTabClosed}",
      "useOverflowMenu": "{!v.useOverflowMenu}",
      "overflowLabel": "{!v.overflowLabel}"
     }
    ]
   }
  },
  "timePicker.cmp": {
   "attributes": {
    "hours": {
     "name": "hours",
     "type": "Integer",
     "default": "12",
     "description": "The hour value."
    },
    "is24HourFormat": {
     "name": "is24HourFormat",
     "type": "Boolean",
     "default": "true",
     "description": "Indicate if it is set to 24 hour or 12-hour with am/pm."
    },
    "isValid": {
     "name": "isValid",
     "type": "Boolean",
     "default": "true",
     "description": "Indicate if the valid hour and minute values are inputed."
    },
    "minutes": {
     "name": "minutes",
     "type": "Integer",
     "default": "0",
     "description": "The miniue value."
    },
    "visible": {
     "name": "visible",
     "type": "Boolean",
     "default": "false",
     "description": "Indicates if this time picker is displayed. Defaults to false, which hides this time picker."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:label": [
     {
      "label": "hours",
      "for": "hours",
      "labelDisplay": "false"
     },
     {
      "label": "minutes",
      "for": "minutes",
      "labelDisplay": "false"
     },
     {
      "label": "period",
      "for": "ampm",
      "labelDisplay": "false"
     }
    ],
    "ui:inputText": [
     {
      "type": "number",
      "aura:id": "hours",
      "class": "input-hours",
      "change": "{!c.updateHours}"
     },
     {
      "type": "number",
      "aura:id": "minutes",
      "class": "input-minutes",
      "change": "{!c.updateMinutes}"
     }
    ],
    "ui:image": [
     {
      "class": "time-separator",
      "imageType": "decorative",
      "src": "/auraFW/resources/aura/images/time-separator.png"
     }
    ],
    "aura:renderIf": [
     {
      "isTrue": "{!v.is24HourFormat != true}"
     }
    ],
    "ui:inputSelect": [
     {
      "aura:id": "ampm",
      "class": "ampm",
      "change": "{!c.updateAmpm}"
     }
    ],
    "ui:inputSelectOption": [
     {
      "aura:id": "amOpt",
      "label": "AM",
      "text": "am"
     },
     {
      "aura:id": "pmOpt",
      "label": "PM",
      "text": "pm"
     }
    ],
    "ui:inputDefaultError": [
     {
      "aura:id": "hourError",
      "class": "hide"
     },
     {
      "aura:id": "minuteError",
      "class": "hide"
     }
    ]
   }
  },
  "toolbar.cmp": {
   "attributes": {
    "class": {
     "name": "class",
     "type": "String",
     "description": "The CSS style used to display the toolbar component."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "tooltip.cmp": {
   "attributes": {
    "tooltipBody": {
     "name": "tooltipBody",
     "type": "String",
     "access": "INTERNAL",
     "default": "false",
     "description": "The message to display in the tooltip"
    },
    "tooltipStyle": {
     "name": "tooltipStyle",
     "type": "String",
     "access": "INTERNAL",
     "default": "false",
     "description": "The style of the tooltip"
    },
    "disabled": {
     "name": "disabled",
     "type": "Boolean",
     "access": "INTERNAL",
     "default": "false",
     "description": "Specifies whether the tooltip is disabled. The default is \"false\"."
    },
    "advanced": {
     "access": "INTERNAL",
     "name": "advanced",
     "type": "Boolean",
     "default": "false",
     "description": "Determines if the tooltip uses JavaScript positioning. The default is \"false\". Setting it to false creates the tooltip using CSS only."
    },
    "trigger": {
     "access": "INTERNAL",
     "name": "trigger",
     "type": "String",
     "default": "hover",
     "description": "TThe event that toggles the tooltip. Valid values are \"focus\", \"click\", \"hover\", and \"none\". The default is \"hover\". Only \"focus\" and \"click\" are keyboard accessible."
    },
    "triggerClass": {
     "name": "triggerClass",
     "type": "String",
     "access": "INTERNAL",
     "description": "The CSS class for the trigger element"
    },
    "isVisible": {
     "name": "isVisible",
     "type": "Boolean",
     "description": "Specifies whether the tooltip is visible. The default is \"false\".",
     "default": "false"
    },
    "fadeOut": {
     "name": "fadeOut",
     "access": "INTERNAL",
     "default": "0",
     "type": "Boolean",
     "description": "Fade out"
    },
    "fadeIn": {
     "name": "fadeIn",
     "access": "INTERNAL",
     "default": "0",
     "type": "Boolean",
     "description": "Fade in"
    },
    "fadeOutDuration": {
     "name": "fadeOutDuration",
     "access": "INTERNAL",
     "default": "0",
     "type": "Integer",
     "description": "Fade out duration in ms"
    },
    "fadeInDuration": {
     "name": "fadeInDuration",
     "access": "INTERNAL",
     "default": "0",
     "type": "Integer",
     "description": "Fade in duration in ms"
    },
    "delay": {
     "name": "delay",
     "default": "0",
     "access": "INTERNAL",
     "type": "Integer",
     "description": "Appearance delay in ms"
    },
    "class": {
     "name": "class",
     "type": "String",
     "access": "INTERNAL",
     "default": "",
     "description": "A CSS style to be attached to the tooltip. This style is added in addition to base styles output by the component."
    },
    "classList": {
     "name": "classList",
     "type": "String",
     "access": "INTERNAL",
     "default": "",
     "description": "A CSS style to be attached to the tooltip. This style is added in addition to base styles output by the component."
    },
    "tabIndex": {
     "name": "tabIndex",
     "type": "Integer",
     "access": "INTERNAL",
     "description": "The tab index for the trigger, REQUIRED if the trigger is focus and there are no focusable elements in the body"
    },
    "tabIndexOverride": {
     "name": "tabIndexOverride",
     "type": "Integer",
     "access": "INTERNAL",
     "description": "The tab index override "
    },
    "disableFocusTrigger": {
     "name": "disableFocusTrigger",
     "type": "Integer",
     "access": "INTERNAL",
     "description": "Disabled the focus trigger on the root element. Child focusable elements are not affected"
    },
    "direction": {
     "name": "direction",
     "type": "String",
     "access": "INTERNAL",
     "default": "north",
     "description": "The direction in which the tooltip should go. Valid values are \"north\", \"south\", \"west\", and \"east\". The default is \"north\"."
    },
    "allowFlips": {
     "name": "allowFlips",
     "default": "true",
     "type": "Boolean",
     "access": "INTERNAL",
     "description": "If true the tooltip will change direction automatically when needed to stay in the viewport"
    },
    "domId": {
     "name": "domId",
     "type": "String",
     "access": "INTERNAL",
     "description": "DOM id of the input element. By default, this attribute resolved to the globalId of the component to avoid id collision."
    }
   },
   "imports": {
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "lib"
    },
    "ui:containerManagerLib": {
     "library": "ui:containerManagerLib",
     "property": "cmLib"
    },
    "ui:stackManagerLib": {
     "library": "ui:stackManagerLib",
     "property": "smLib"
    },
    "ui:tooltipLib": {
     "library": "ui:tooltipLib",
     "property": "ttLib"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {
    "show": {},
    "hide": {}
   },
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://ui:tooltipAdvanced",
      "type": "COMPONENT"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.advanced}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "tooltipAdvanced.cmp": {
   "attributes": {
    "isVisible": {
     "name": "isVisible",
     "type": "Boolean",
     "description": "Specifies whether the tooltip is visible. The default is \"false\".",
     "default": "false"
    },
    "tooltipBody": {
     "name": "tooltipBody",
     "type": "String",
     "default": "false",
     "description": "The message to display in the tooltip"
    },
    "target": {
     "name": "target",
     "type": "Aura.Component",
     "access": "INTERNAL"
    },
    "classList": {
     "name": "classList",
     "type": "String",
     "access": "INTERNAL"
    },
    "direction": {
     "name": "direction",
     "type": "String",
     "access": "INTERNAL"
    },
    "advanced": {
     "name": "advanced",
     "type": "Boolean",
     "access": "INTERNAL",
     "default": "true"
    },
    "disabled": {
     "name": "disabled",
     "type": "Boolean",
     "access": "INTERNAL",
     "default": "false",
     "description": "Specifies whether the tooltip is disabled. The default is \"false\"."
    },
    "fadeOut": {
     "name": "fadeOut",
     "access": "INTERNAL",
     "default": "0",
     "type": "Boolean",
     "description": "Fade out"
    },
    "fadeIn": {
     "name": "fadeIn",
     "access": "INTERNAL",
     "default": "0",
     "type": "Boolean",
     "description": "Fade in"
    },
    "fadeOutDuration": {
     "name": "fadeOutDuration",
     "access": "INTERNAL",
     "default": "0",
     "type": "Integer",
     "description": "Fade out duration in ms"
    },
    "fadeInDuration": {
     "name": "fadeInDuration",
     "access": "INTERNAL",
     "default": "0",
     "type": "Integer",
     "description": "Fade in duration in ms"
    },
    "delay": {
     "name": "delay",
     "default": "0",
     "access": "INTERNAL",
     "type": "Integer",
     "description": "Appearance delay in ms"
    },
    "class": {
     "name": "class",
     "type": "String",
     "access": "INTERNAL",
     "default": "",
     "description": "A CSS style to be attached to the tooltip. This style is added in addition to base styles output by the component."
    },
    "tooltipStyle": {
     "name": "tooltipStyle",
     "type": "String",
     "access": "INTERNAL",
     "default": "false",
     "description": "The style of the tooltip"
    },
    "domClass": {
     "name": "domClass",
     "type": "String",
     "access": "INTERNAL",
     "description": "The classes to include in the dom",
     "default": "advanced-wrapper "
    },
    "allowFlips": {
     "name": "allowFlips",
     "default": "true",
     "type": "Boolean",
     "access": "INTERNAL",
     "description": "If true the tooltip will change direction automatically when needed to stay in the viewport"
    },
    "domId": {
     "name": "domId",
     "type": "String",
     "access": "INTERNAL",
     "description": "DOM id of the input element. By default, this attribute resolved to the globalId of the component to avoid id collision."
    }
   },
   "imports": {
    "ui:panelPositioningLib": {
     "library": "ui:panelPositioningLib",
     "property": "lib"
    },
    "ui:tooltipLib": {
     "library": "ui:tooltipLib",
     "property": "ttLib"
    }
   },
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.isVisible}",
     "action": "{!c.handleVis}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "tree.cmp": {
   "attributes": {
    "nodes": {
     "name": "nodes",
     "type": "java://List<aura.components.ui.TreeNode>"
    },
    "class": {
     "name": "class",
     "type": "String",
     "default": ""
    },
    "activeNode": {
     "name": "activeNode",
     "type": "Aura.Component",
     "description": "When the activeNode is set on a tree, its active attribute is set to true."
    }
   },
   "imports": {},
   "events": {
    "getChildren": {
     "name": "getChildren",
     "type": "ui:getChildren"
    }
   },
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.activeNode}",
     "action": "{!c.onActiveNodeChange}"
    },
    "getChildren": {
     "name": "getChildren",
     "action": "{!c.getChildren}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.nodes}",
      "var": "node"
     }
    ],
    "ui:treeNode": [
     {
      "item": "{!node}",
      "aura:id": "modelNode",
      "hidden": "false"
     }
    ]
   }
  },
  "treeNode.cmp": {
   "attributes": {
    "href": {
     "name": "href",
     "type": "String",
     "description": "For a leaf node, the link associated with the element. Unsupported for non-leaf nodes."
    },
    "title": {
     "name": "title",
     "type": "String",
     "description": "The label to display in the UI."
    },
    "leafClass": {
     "name": "leafClass",
     "type": "String",
     "description": "A custom class to apply if the node is a leaf"
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "A custom class to apply to this node"
    },
    "expanded": {
     "name": "expanded",
     "type": "Boolean",
     "default": "false",
     "description": "The expansion state of the node. Changing this is a no-op for leaf nodes."
    },
    "active": {
     "name": "active",
     "type": "Boolean",
     "description": "The active state of the node. If true, then this node's <li> will have the DOM attribute active='true' and the node will scroll into view if necessary. "
    },
    "hidden": {
     "name": "hidden",
     "type": "Boolean",
     "default": "false",
     "description": "Controls whether this node should render into the DOM. Currently unsupported."
    },
    "item": {
     "name": "item",
     "type": "java://org.auraframework.components.ui.TreeNode",
     "description": "For nodes generated via a server-side model, the dictionary representing the TreeNode object."
    }
   },
   "imports": {},
   "events": {
    "getChildren": {
     "name": "getChildren",
     "type": "ui:getChildren"
    }
   },
   "handlers": {
    "traverse": {
     "name": "traverse",
     "action": "{!c.traverse}"
    },
    "makeVisitor": {
     "name": "makeVisitor",
     "action": "{!c.makeVisitor}"
    },
    "getChildren": {
     "name": "getChildren",
     "action": "{!c.getChildren}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!!v.hidden}"
     },
     {
      "isTrue": "{!v.item.href != null || v.href != null}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.item.children}",
      "var": "child"
     }
    ],
    "ui:treeNode": [
     {
      "item": "{!child}",
      "aura:id": "modelNode"
     }
    ]
   }
  },
  "underConstruction.cmp": {
   "attributes": {
    "short": {
     "name": "short",
     "type": "Boolean",
     "default": "false",
     "description": "A short message that displays “Unsupported” if true, or “This field isn't currently supported.” otherwise. "
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.short}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "vbox.cmp": {
   "attributes": {
    "north": {
     "name": "north",
     "type": "Aura.Component[]",
     "description": "The top facet of the component."
    },
    "south": {
     "name": "south",
     "type": "Aura.Component[]",
     "description": "The bottom facet of the component."
    },
    "centerClass": {
     "name": "centerClass",
     "type": "String",
     "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by <ui:vbox>."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "virtualDataGrid.cmp": {
   "attributes": {
    "sortBy": {
     "name": "sortBy",
     "type": "String"
    },
    "items": {
     "name": "items",
     "type": "List",
     "description": "A list of objects representing the rows of data in the grid"
    },
    "widths": {
     "name": "widths",
     "type": "Integer[]"
    },
    "class": {
     "name": "class",
     "type": "String",
     "description": "CSS class to be applied to the table element"
    },
    "headerColumns": {
     "name": "headerColumns",
     "type": "Aura.Component[]",
     "description": "Components used as the header elements of the table"
    },
    "columns": {
     "name": "columns",
     "type": "Aura.ComponentDefRef[]",
     "description": "Components used as the template for each row"
    },
    "columnsEdit": {
     "name": "columnsEdit",
     "type": "Aura.ComponentDefRef[]"
    },
    "dataModel": {
     "name": "dataModel",
     "type": "Aura.Component[]",
     "description": "Optional component to provide data for the grid"
    },
    "_dirty": {
     "name": "_dirty",
     "type": "Integer",
     "description": "Internal attribute for evaluating whether the grid should be rerendered"
    },
    "itemVar": {
     "name": "itemVar",
     "type": "String",
     "default": "item",
     "description": "The name of the variable to use for each item inside the grid"
    },
    "_sortBy": {
     "name": "_sortBy",
     "type": "String",
     "default": "",
     "description": "Sort order of the data in the grid. Name of column, predicated by a '-' for descending."
    },
    "useRowHeaders": {
     "name": "useRowHeaders",
     "type": "Boolean",
     "default": "false",
     "description": "Makes the first column of each row a header cell. The default is false."
    },
    "fixedHeader": {
     "name": "fixedHeader",
     "type": "Boolean",
     "default": "false",
     "description": "Specifies whether the grid should use CSS to fix the header's position. Content in the table body is set to overflow and scrolling is enabled. The default is false."
    },
    "enableResizableColumns": {
     "name": "enableResizableColumns",
     "type": "Boolean",
     "default": "false",
     "description": "Enables the column resize plugin. The default is false."
    },
    "resizableColumnsConfig": {
     "name": "resizableColumnsConfig",
     "type": "Object",
     "description": "The column resize configuration. If not provided, the default configuration is used."
    }
   },
   "imports": {
    "ui:virtualDataGridLib": {
     "library": "ui:virtualDataGridLib",
     "property": "lib"
    }
   },
   "events": {
    "refresh": {
     "name": "refresh",
     "type": "ui:refresh",
     "description": "Provides fresh data from the dataProvider."
    },
    "gridAction": {
     "name": "gridAction",
     "type": "ui:gridAction",
     "description": "Notifies listeners when actions were triggered by grid cells"
    },
    "onsort": {
     "name": "onsort",
     "type": "ui:sort",
     "description": "The event fired when a column is sorted."
    },
    "onColumnResize": {
     "name": "onColumnResize",
     "type": "ui:resize",
     "description": "The event fired when a column is resized."
    }
   },
   "handlers": {
    "refresh": {
     "name": "refresh",
     "action": "{!c.handleRefresh}"
    },
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.columns}",
     "action": "{!c.handleColumnsChange}"
    }
   },
   "methods": {
    "appendItems": {
     "items": {
      "name": "items",
      "type": "Object"
     }
    },
    "resizeColumns": {
     "widths": {
      "name": "widths",
      "type": "Integer[]"
     }
    },
    "sort": {
     "sortBy": {
      "name": "sortBy",
      "type": "String"
     }
    }
   },
   "dependencies": {}
  },
  "virtualList.cmp": {
   "attributes": {
    "_dirty": {
     "name": "_dirty",
     "type": "Integer",
     "description": "Internal attribute for evaluating dirtyness"
    },
    "itemTemplate": {
     "name": "itemTemplate",
     "type": "Aura.ComponentDefRef[]",
     "required": "true",
     "description": ""
    },
    "items": {
     "name": "items",
     "type": "Object[]"
    },
    "forceRender": {
     "name": "forceRender",
     "type": "Boolean",
     "default": "false"
    },
    "itemVar": {
     "name": "itemVar",
     "type": "String",
     "required": "true",
     "description": "name for the variable to iterate"
    },
    "dataProvider": {
     "name": "dataProvider",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    },
    "change": {
     "name": "change",
     "value": "{!v.items}",
     "action": "{!c.handleItemsChange}"
    }
   },
   "methods": {
    "rerenderList": {}
   },
   "dependencies": {}
  }
 },
 "actionsTest": {
  "beanActionModel.cmp": {
   "attributes": {
    "counter": {
     "name": "counter",
     "type": "string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "actionsTest:beanActionModelChild": [
     {
      "aura:id": "childCmp"
     }
    ]
   }
  },
  "beanActionModelChild.cmp": {
   "attributes": {
    "childCounter": {
     "name": "childCounter",
     "type": "string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInitChild}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "chainBoundaryCases.cmp": {
   "attributes": {
    "responseOrder": {
     "type": "String",
     "name": "responseOrder",
     "default": ""
    },
    "callbackCount": {
     "type": "Integer",
     "name": "callbackCount",
     "default": "0"
    }
   },
   "imports": {},
   "events": {
    "press": {
     "name": "press",
     "type": "ui:press"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "chainExternalActions.cmp": {
   "attributes": {},
   "imports": {},
   "events": {
    "press": {
     "name": "press",
     "type": "ui:press"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {
    "actionsTest:chainLocalActions": [
     {
      "aura:id": "facet"
     }
    ]
   }
  },
  "chainLocalActions.cmp": {
   "attributes": {
    "responseOrder": {
     "type": "String",
     "name": "responseOrder",
     "default": ""
    }
   },
   "imports": {},
   "events": {
    "press": {
     "name": "press",
     "type": "ui:press"
    }
   },
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "press": "{!c.handleClick}",
      "label": "Add Two numbers"
     },
     {
      "press": "{!c.callServerButPassNoChainedActions}",
      "label": "Add Two numbers and pass null for chained actions parameter"
     }
    ]
   }
  },
  "clientAction.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "throwsAnError": {}
   },
   "dependencies": {
    "ui:button": [
     {
      "label": "Run client action in foreground",
      "press": "{!c.clientExecuteInForeground}",
      "aura:id": "executeInForeground"
     },
     {
      "label": "Run client action in FOREGROUND (case-sensitivity of controller method name)",
      "press": "{!c.clientExecuteInFOREGROUND}",
      "aura:id": "executeInFOREGROUND"
     }
    ]
   }
  },
  "deferredServerAction.cmp": {
   "attributes": {
    "result": {
     "name": "result",
     "type": "String"
    },
    "error": {
     "name": "error",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "simpleDeferBtn",
      "label": "simple defer",
      "press": "{!c.simpleDefer}"
     },
     {
      "aura:id": "chainedDeferBtn",
      "label": "chained defer",
      "press": "{!c.chainedDefer}"
     },
     {
      "aura:id": "errorDeferBtn",
      "label": "error defer",
      "press": "{!c.errorDefer}"
     },
     {
      "aura:id": "chainedErrorDeferBtn",
      "label": "chained error defer",
      "press": "{!c.chainedErrorDefer}"
     },
     {
      "aura:id": "callbackWrappedDeferBtn",
      "label": "callback wrapped defer",
      "press": "{!c.callbackWrappedDefer}"
     }
    ]
   }
  },
  "serverAction.cmp": {
   "attributes": {
    "text": {
     "name": "text",
     "type": "String"
    },
    "errorMessage": {
     "name": "errorMessage",
     "type": "String"
    },
    "transactionId": {
     "name": "transactionId",
     "type": "Integer",
     "default": "999"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "auraStorage:init": [
     {
      "name": "actions",
      "secure": "true",
      "debugLoggingEnabled": "true",
      "defaultExpiration": "60",
      "defaultAutoRefreshInterval": "60"
     }
    ],
    "ui:button": [
     {
      "label": "Run server action in foreground",
      "press": "{!c.cExecuteInForeground}",
      "aura:id": "executeInForeground"
     },
     {
      "label": "Run server action in foreground with return",
      "press": "{!c.cExecuteInForegroundWithReturn}",
      "aura:id": "executeInForegroundWithReturn"
     },
     {
      "label": "Run server action in background",
      "press": "{!c.cExecuteInBackground}",
      "aura:id": "executeInBackground"
     },
     {
      "label": "Run server action in background with return",
      "press": "{!c.cExecuteInBackgroundWithReturn}",
      "aura:id": "executeInBackgroundWithReturn"
     },
     {
      "label": "Run server action in foreground with error",
      "press": "{!c.cErrorInForeground}",
      "aura:id": "errorInForeground"
     }
    ]
   }
  },
  "transactions.cmp": {
   "attributes": {
    "transactionId": {
     "name": "transactionId",
     "type": "string",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "actionsTest:transactionsEntry",
      "type": "COMPONENT"
     }
    ],
    "ui:button": [
     {
      "label": "Set Transaction",
      "press": "{!c.setTransaction}",
      "aura:id": "setTransaction"
     },
     {
      "label": "Clear Transaction",
      "press": "{!c.clearTransaction}",
      "aura:id": "clearTransaction"
     },
     {
      "label": "Send Abortable Command",
      "press": "{!c.sendAbortable}",
      "aura:id": "sendAbortable"
     },
     {
      "label": "Send Non-Abortable Command",
      "press": "{!c.sendNonAbortable}",
      "aura:id": "sendNonAbortable"
     }
    ]
   }
  },
  "transactionsEntry.cmp": {
   "attributes": {
    "transactionId": {
     "name": "transactionId",
     "type": "string",
     "default": ""
    },
    "actionId": {
     "name": "actionId",
     "type": "string",
     "default": ""
    },
    "state": {
     "name": "state",
     "type": "string",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "clientApiTest": {
  "arrayIndexOf.cmp": {
   "attributes": {
    "array": {
     "name": "array",
     "type": "String[]",
     "default": "red,green,blue,green,yellow"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "assertTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "auraWarningTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.onInit}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "cssStyleTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputText": [
     {
      "aura:id": "inputText",
      "value": "in one component"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "outputText",
      "value": "out the other"
     }
    ],
    "test:testValidCSS": [
     {}
    ]
   }
  },
  "eventBinding.cmp": {
   "attributes": {
    "focusEvent": {
     "name": "focusEvent",
     "type": "Boolean",
     "default": "false"
    },
    "blurEvent": {
     "name": "blurEvent",
     "type": "Boolean",
     "default": "false"
    },
    "clickCount": {
     "name": "clickCount",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "getComponent.cmp": {
   "attributes": {
    "cmpGlobalId": {
     "name": "cmpGlobalId",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:text": [
     {
      "aura:id": "auraText",
      "value": "aura text"
     },
     {
      "aura:id": "innerText",
      "value": "inner text"
     },
     {
      "aura:id": "destroyedComponent",
      "value": "value"
     }
    ]
   }
  },
  "getDefinition.cmp": {
   "attributes": {
    "definitionNames": {
     "name": "definitionNames",
     "type": "String[]",
     "default": ""
    },
    "complete": {
     "name": "complete",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://aura:text",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://aura:label",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://aura:valueChange",
      "type": "EVENT"
     },
     {
      "resource": "markup://aura:titleChange",
      "type": "EVENT"
     }
    ],
    "ui:button": [
     {
      "label": "Get Event Definition without Access",
      "press": "{!c.getEventDefinitionWithoutAccess}",
      "class": "getEventDefinitionWithoutAccessButton"
     },
     {
      "label": "Get Component Definition without Access",
      "press": "{!c.getComponentDefinitionWithoutAccess}",
      "class": "getComponentDefinitionWithoutAccessButton"
     },
     {
      "label": "Get Multiple Definitions without Access",
      "press": "{!c.getDefinitionsWithoutAccess}",
      "class": "getDefinitionsWithoutAccessButton"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.definitionNames}",
      "var": "name",
      "indexVar": "index"
     }
    ]
   }
  },
  "hasDefinition.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://aura:text",
      "type": "COMPONENT"
     },
     {
      "resource": "markup://aura:valueChange",
      "type": "EVENT"
     }
    ]
   }
  },
  "jsonMethodExposure.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "removeElement.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "timeoutCallback.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "utilTests.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "cmpQueryLanguage": {
  "query.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "provider:*"
     }
    ]
   }
  }
 },
 "definitionServiceImplTest": {
  "targetComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "docstest": {
  "searchFilterTreeTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "auradocs:searchFilterTree": [
     {
      "aura:id": "searchTree"
     }
    ],
    "ui:tree": [
     {
      "aura:id": "tree"
     }
    ],
    "ui:treeNode": [
     {
      "aura:id": "root",
      "title": "root"
     },
     {
      "aura:id": "iota",
      "href": "#iota",
      "title": "Iota is lonely"
     },
     {
      "aura:id": "A",
      "title": "A"
     },
     {
      "aura:id": "mu",
      "href": "#mu",
      "title": "Moo cows"
     },
     {
      "aura:id": "B",
      "title": "VHS or Beta?"
     },
     {
      "aura:id": "lambda",
      "href": "#lambda",
      "title": "Lambda is after moo"
     },
     {
      "aura:id": "D",
      "title": "D"
     },
     {
      "aura:id": "gamma",
      "href": "#gamma",
      "title": "Gamma rays"
     },
     {
      "aura:id": "G",
      "title": "G has Rho as a child"
     },
     {
      "aura:id": "pi",
      "href": "#pi",
      "title": "Pi is delicious"
     },
     {
      "aura:id": "rho",
      "href": "#rho",
      "title": "Rho Rho Rho your boat"
     },
     {
      "aura:id": "tau",
      "href": "#tau",
      "title": "Some argue Tau is better than Pi"
     },
     {
      "aura:id": "E",
      "title": "E"
     },
     {
      "aura:id": "alpha",
      "href": "#alpha",
      "title": "The alpha and the omega"
     },
     {
      "aura:id": "beta",
      "href": "#beta",
      "title": "Beta means Ship it"
     },
     {
      "aura:id": "F",
      "title": "F"
     },
     {
      "aura:id": "H",
      "title": "H"
     },
     {
      "aura:id": "chi",
      "href": "#chi",
      "title": "Tea"
     },
     {
      "aura:id": "psi",
      "href": "#psi",
      "title": "Pressure Bars"
     },
     {
      "aura:id": "omega",
      "href": "#omega",
      "title": "Where's alpha?"
     },
     {
      "aura:id": "C",
      "title": "C is lonely"
     },
     {
      "aura:id": "secondRoot",
      "title": "secondRoot"
     },
     {
      "aura:id": "foo",
      "href": "#foo",
      "title": "foo"
     },
     {
      "aura:id": "bar",
      "href": "#bar",
      "title": "bar"
     }
    ]
   }
  }
 },
 "expressionTest": {
  "arrayValue.cmp": {
   "attributes": {
    "first": {
     "name": "first",
     "type": "Object[]"
    },
    "second": {
     "name": "second",
     "type": "Object[]"
    },
    "firstArrayLen": {
     "name": "firstArrayLen",
     "type": "Integer",
     "default": "0"
    },
    "secondArrayLen": {
     "name": "secondArrayLen",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.second}",
     "action": "{!c.onChange2}"
    }
   },
   "methods": {},
   "dependencies": {
    "expressionTest:arrays": [
     {
      "aura:id": "innerCmp",
      "passedInArray": "{!v.first}"
     }
    ]
   }
  },
  "arrays.cmp": {
   "attributes": {
    "isNotSet": {
     "name": "isNotSet",
     "type": "String[]"
    },
    "stringArray": {
     "name": "stringArray",
     "type": "String[]",
     "default": "one,two,three"
    },
    "arrayAsObject": {
     "name": "arrayAsObject",
     "type": "Object"
    },
    "componentArray": {
     "name": "componentArray",
     "type": "Aura.Component[]"
    },
    "passedInArray": {
     "name": "passedInArray",
     "type": "Object[]",
     "default": "['a','b','c']"
    },
    "passedInArrayLength": {
     "name": "passedInArrayLength",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.passedInArray}",
     "action": "{!c.onPassedInArrayLengthChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "expressionTest:test": [
     {
      "expression": "{!m.stringArray}",
      "exprText": "m.stringArray",
      "expected": "['red','green','blue']"
     },
     {
      "expression": "{!m.stringArray[0]}",
      "exprText": "m.stringArray[0]",
      "expected": "'red'"
     },
     {
      "expression": "{!m.stringArray[1]}",
      "exprText": "m.stringArray[1]",
      "expected": "'green'"
     },
     {
      "expression": "{!m.stringArray[2]=='blue'}",
      "exprText": "m.stringArray[2]=='blue'",
      "expected": "true"
     },
     {
      "expression": "{!m.stringArray[2]=='BLUE'}",
      "exprText": "m.stringArray[2]=='BLUE'",
      "expected": "false"
     },
     {
      "expression": "{!m.stringArray.length}",
      "exprText": "m.stringArray.length",
      "expected": "3"
     },
     {
      "expression": "{!m.stringArray.length > 3}",
      "exprText": "m.stringArray.length > 3",
      "expected": "false"
     },
     {
      "expression": "{!m.stringArray.length <= 3}",
      "exprText": "m.stringArray.length <= 3",
      "expected": "true"
     },
     {
      "expression": "{!m.stringArray[3]}",
      "exprText": "m.stringArray[3]",
      "expected": "undefined"
     },
     {
      "expression": "{!v.componentArray.length}",
      "exprText": "v.componentArray.length",
      "expected": "4"
     },
     {
      "expression": "{!v.componentArray.length > 2}",
      "exprText": "v.componentArray.length > 2",
      "expected": "true"
     },
     {
      "expression": "{!v.stringArray}",
      "exprText": "v.stringArray",
      "expected": "['one','two','three']"
     },
     {
      "expression": "{!v.stringArray[2]}",
      "exprText": "v.stringArray[2]",
      "expected": "'three'"
     },
     {
      "expression": "{!v.stringArray.length}",
      "exprText": "v.stringArray.length",
      "expected": "3"
     },
     {
      "expression": "{!v.isNotSet}",
      "exprText": "v.isNotSet",
      "expected": "[]"
     },
     {
      "expression": "{!v.isNotSet.length}",
      "exprText": "v.isNotSet.length",
      "expected": "0"
     },
     {
      "expression": "{!v.isNotSet[0]}",
      "exprText": "v.isNotSet[0]",
      "expected": "undefined"
     },
     {
      "expression": "{!m.emptyArray}",
      "exprText": "m.emptyArray",
      "expected": "[]"
     },
     {
      "expression": "{!m.emptyArray.length}",
      "exprText": "m.emptyArray.length",
      "expected": "0"
     },
     {
      "expression": "{!m.emptyArray[0]}",
      "exprText": "m.emptyArray[0]",
      "expected": "undefined"
     },
     {
      "expression": "{!m.stringList}",
      "exprText": "m.stringList",
      "expected": "['one','two','three']"
     },
     {
      "expression": "{!m.stringList[0]}",
      "exprText": "m.stringList[0]",
      "expected": "'one'"
     },
     {
      "expression": "{!m.stringList[0] + ' chance'}",
      "exprText": "m.stringList[0]",
      "expected": "'one chance'"
     },
     {
      "expression": "{!m.stringList.length}",
      "exprText": "m.stringList.length",
      "expected": "3"
     },
     {
      "expression": "{!m.stringList.length == 3}",
      "exprText": "m.stringList.length == 3",
      "expected": "true"
     },
     {
      "expression": "{!m.stringList[4]}",
      "exprText": "m.stringList[4]",
      "expected": "undefined"
     },
     {
      "expression": "{!m.emptyList}",
      "exprText": "m.emptyList",
      "expected": "[]"
     },
     {
      "expression": "{!m.emptyList.length}",
      "exprText": "m.emptyList.length",
      "expected": "0"
     },
     {
      "expression": "{!m.emptyList[0]}",
      "exprText": "m.emptyList[0]",
      "expected": "undefined"
     },
     {
      "expression": "{!m.listOfList}",
      "exprText": "m.listOfList",
      "expected": "[['one','two','three'],['un','do','tres'],['ek','do','theen']]"
     },
     {
      "expression": "{!m.listOfList.length}",
      "exprText": "m.listOfList.length",
      "expected": "3"
     },
     {
      "expression": "{!m.listOfList[1][0]}",
      "exprText": "m.listOfList[1][0]",
      "expected": "'un'"
     },
     {
      "expression": "{!m.listOfList[1].length}",
      "exprText": "m.listOfList[1].length",
      "expected": "3"
     },
     {
      "expression": "{!m.stringMultiArray}",
      "exprText": "m.stringMultiArray",
      "expected": "[[['one'],['two','three']],[],[['a','b'],[]]]"
     },
     {
      "expression": "{!m.stringMultiArray.length}",
      "exprText": "m.stringMultiArray.length",
      "expected": "3"
     },
     {
      "expression": "{!m.stringMultiArray[0]}",
      "exprText": "m.stringMultiArray[0]",
      "expected": "[['one'],['two','three']]"
     },
     {
      "expression": "{!m.stringMultiArray[0].length}",
      "exprText": "m.stringMultiArray[0].length",
      "expected": "2"
     },
     {
      "expression": "{!m.stringMultiArray[0][0]}",
      "exprText": "m.stringMultiArray[0][0]",
      "expected": "['one']"
     },
     {
      "expression": "{!m.stringMultiArray[0][0][0]}",
      "exprText": "m.stringMultiArray[0][0][0]",
      "expected": "'one'"
     },
     {
      "expression": "{!m.stringMultiArray[1]}",
      "exprText": "m.stringMultiArray[1]",
      "expected": "[]"
     },
     {
      "expression": "{!m.stringMultiArray[1].length}",
      "exprText": "m.stringMultiArray[1].length",
      "expected": "0"
     },
     {
      "expression": "{!true && m.stringArray}",
      "exprText": "true && m.stringArray",
      "expected": "['red','green','blue']"
     },
     {
      "expression": "{!m.stringList || true}",
      "exprText": "m.stringList || true",
      "expected": "['one','two','three']"
     },
     {
      "expression": "{!m.stringArray - 1}",
      "exprText": "m.stringArray - 1",
      "expected": "NaN"
     },
     {
      "expression": "{!2 * m.stringArray}",
      "exprText": "2 * m.stringArray",
      "expected": "NaN"
     },
     {
      "expression": "{!m.stringArray / 2}",
      "exprText": "m.stringArray / 2",
      "expected": "NaN"
     },
     {
      "expression": "{!3 % m.stringArray}",
      "exprText": "3 % m.stringArray",
      "expected": "NaN"
     },
     {
      "expression": "{!m.stringArray > -1}",
      "exprText": "m.stringArray > -1",
      "expected": "false"
     },
     {
      "expression": "{!m.stringArray >= -1}",
      "exprText": "m.stringArray >= -1",
      "expected": "false"
     },
     {
      "expression": "{!m.stringArray < 0}",
      "exprText": "m.stringArray < 0",
      "expected": "false"
     },
     {
      "expression": "{!m.stringArray <= 0}",
      "exprText": "m.stringArray <= 0",
      "expected": "false"
     },
     {
      "expression": "{!-m.stringArray}",
      "exprText": "-m.stringArray",
      "expected": "NaN"
     },
     {
      "expression": "{!abs(m.stringArray)}",
      "exprText": "abs(m.stringArray)",
      "expected": "NaN"
     }
    ]
   }
  },
  "bodyAttribute.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "label": "Clear Body of Simple Cmp",
      "press": "{!c.clearSimpleCmpBody}",
      "aura:id": "clearSimpleCmpBody"
     },
     {
      "label": "Set Body of Simple Cmp",
      "press": "{!c.setSimpleCmpBody}",
      "aura:id": "setSimpleCmpBody"
     },
     {
      "label": "Keep one and add to Body of Simple Cmp",
      "press": "{!c.addSimpleCmpBody}",
      "aura:id": "addSimpleCmpBody"
     },
     {
      "label": "Clear Body of Simple Cmp",
      "press": "{!c.clearSimpleCmpBody}",
      "aura:id": "clearBodyFromSimpleCmp"
     },
     {
      "label": "Clear Body of Custom Cmp",
      "press": "{!c.clearCustomCmpBody}",
      "aura:id": "clearCustomCmpBody"
     },
     {
      "label": "Set Body of Custom Cmp",
      "press": "{!c.setCustomCmpBody}",
      "aura:id": "setCustomCmpBody"
     },
     {
      "label": "Keep one and add to Body of Custom Cmp",
      "press": "{!c.addCustomCmpBody}",
      "aura:id": "addCustomCmpBody"
     },
     {
      "label": "Clear Body of Custom Cmp",
      "press": "{!c.clearCustomCmpBody}",
      "aura:id": "clearBodyFromCustomCmp"
     }
    ],
    "expressionTest:bodyAttributeOfFacet": [
     {
      "aura:id": "customCmp"
     }
    ]
   }
  },
  "bodyAttributeOfFacet.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "byValue.cmp": {
   "attributes": {
    "initValue": {
     "name": "initValue",
     "type": "String"
    },
    "booleanValue": {
     "name": "booleanValue",
     "type": "Boolean",
     "default": "true"
    },
    "numberValue": {
     "name": "numberValue",
     "type": "Double",
     "default": "7357"
    },
    "stringValue": {
     "name": "stringValue",
     "type": "String",
     "default": "default string value"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "aura:id": "changeButton",
      "label": "Change Properties",
      "press": "{!c.changeProperties}"
     }
    ]
   }
  },
  "functions.cmp": {
   "attributes": {
    "integer": {
     "name": "integer",
     "type": "integer"
    },
    "double": {
     "name": "double",
     "type": "double"
    },
    "doubleString": {
     "name": "doubleString",
     "type": "String"
    },
    "string": {
     "name": "string",
     "type": "String"
    },
    "emptyString": {
     "name": "emptyString",
     "type": "String"
    },
    "Infinity": {
     "name": "Infinity",
     "type": "double"
    },
    "NegativeInfinity": {
     "name": "NegativeInfinity",
     "type": "double"
    },
    "NaN": {
     "name": "NaN",
     "type": "double"
    },
    "nullObj": {
     "name": "nullObj",
     "type": "Object"
    },
    "nullList": {
     "name": "nullList",
     "type": "List"
    },
    "object": {
     "name": "object",
     "type": "Object"
    },
    "map": {
     "name": "map",
     "type": "Map",
     "default": "{ key1: 'zero', key2: 0, key3: { key4: 0 } }"
    },
    "list": {
     "name": "list",
     "type": "List",
     "default": "1,2,3"
    },
    "listWithNull": {
     "name": "listWithNull",
     "type": "List"
    },
    "listWithList": {
     "name": "listWithList",
     "type": "List"
    },
    "listWithNested4Layers": {
     "name": "listWithNested4Layers",
     "type": "List"
    },
    "listWithLoop": {
     "name": "listWithLoop",
     "type": "List"
    },
    "label0": {
     "name": "label0",
     "type": "String"
    },
    "label1": {
     "name": "label1",
     "type": "String"
    },
    "label2": {
     "name": "label2",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "expressionTest:test": [
     {
      "expression": "{!v.integer}",
      "exprText": "v.integer",
      "expected": "7"
     },
     {
      "expression": "{!v.double}",
      "exprText": "v.double",
      "expected": "3.1"
     },
     {
      "expression": "{!v.doubleString}",
      "exprText": "v.doubleString",
      "expected": "'2.1'"
     },
     {
      "expression": "{!v.string}",
      "exprText": "v.string",
      "expected": "'Component'"
     },
     {
      "expression": "{!v.emptyString}",
      "exprText": "v.emptyString",
      "expected": "''"
     },
     {
      "expression": "{!v.Infinity}",
      "exprText": "v.Infinity",
      "expected": "Infinity"
     },
     {
      "expression": "{!v.NegativeInfinity}",
      "exprText": "v.NegativeInfinity",
      "expected": "-Infinity"
     },
     {
      "expression": "{!v.NaN}",
      "exprText": "v.NaN",
      "expected": "NaN"
     },
     {
      "expression": "{!m.date}",
      "exprText": "m.date",
      "expected": "'2004-09-23T16:30:00.000Z'"
     },
     {
      "expression": "{!true == false}",
      "exprText": "true == false",
      "expected": "false"
     },
     {
      "expression": "{!false eq false}",
      "exprText": "false eq false",
      "expected": "true"
     },
     {
      "expression": "{!equals(false, false)}",
      "exprText": "equals(false, false)",
      "expected": "true"
     },
     {
      "expression": "{!1 == 3}",
      "exprText": "1 == 3",
      "expected": "false"
     },
     {
      "expression": "{!2 == 2.0}",
      "exprText": "2 == 2.0",
      "expected": "true"
     },
     {
      "expression": "{!2 == '2'}",
      "exprText": "2 == '2'",
      "expected": "false"
     },
     {
      "expression": "{!'bum' == 'bum'}",
      "exprText": "'bum' == 'bum'",
      "expected": "true"
     },
     {
      "expression": "{!'Bum' == 'bum'}",
      "exprText": "'Bum' == 'bum'",
      "expected": "false"
     },
     {
      "expression": "{!'' == false}",
      "exprText": "'' == false",
      "expected": "false"
     },
     {
      "expression": "{!(1/0) == (2/0)}",
      "exprText": "(1/0) == (2/0)",
      "expected": "true"
     },
     {
      "expression": "{!m.integer == 411}",
      "exprText": "m.integer == 411",
      "expected": "true"
     },
     {
      "expression": "{!m.integerString == 511}",
      "exprText": "m.integerString == 511",
      "expected": "false"
     },
     {
      "expression": "{!m.integerString == '511'}",
      "exprText": "m.integerString == '511'",
      "expected": "true"
     },
     {
      "expression": "{!v.Infinity == v.Infinity}",
      "exprText": "v.Infinity == v.Infinity",
      "expected": "true"
     },
     {
      "expression": "{!m.infinity == m.infinity}",
      "exprText": "m.infinity == m.infinity",
      "expected": "true"
     },
     {
      "expression": "{!m.infinityFloat == m.infinityFloat}",
      "exprText": "m.infinityFloat == m.infinityFloat",
      "expected": "true"
     },
     {
      "expression": "{!v.NegativeInfinity == v.NegativeInfinity}",
      "exprText": "v.NegativeInfinity == v.NegativeInfinity",
      "expected": "true"
     },
     {
      "expression": "{!v.Infinity == v.NegativeInfinity}",
      "exprText": "v.Infinity == v.NegativeInfinity",
      "expected": "false"
     },
     {
      "expression": "{!m.infinityFloat == m.infinity}",
      "exprText": "m.infinityFloat == m.infinity",
      "expected": "true"
     },
     {
      "expression": "{!m.naN == v.NaN}",
      "exprText": "m.naN == v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!m.naN == m.naN}",
      "exprText": "m.naN == m.naN",
      "expected": "false"
     },
     {
      "expression": "{!v.nullObj == null}",
      "exprText": "v.nullObj == null",
      "expected": "true"
     },
     {
      "expression": "{!v.nullObj == false}",
      "exprText": "v.nullObj == false",
      "expected": "false"
     },
     {
      "expression": "{!v.nullObj == true}",
      "exprText": "v.nullObj == true",
      "expected": "false"
     },
     {
      "expression": "{!v.nullObj == 0}",
      "exprText": "v.nullObj == 0",
      "expected": "false"
     },
     {
      "expression": "{!v.nullObj == ''}",
      "exprText": "v.nullObj == ''",
      "expected": "false"
     },
     {
      "expression": "{!m.date == '2004-09-23T16:30:00.000Z'}",
      "exprText": "m.date == '2004-09-23T16:30:00.000Z'",
      "expected": "true"
     },
     {
      "expression": "{!false != false}",
      "exprText": "false != false",
      "expected": "false"
     },
     {
      "expression": "{!true != false}",
      "exprText": "true != false",
      "expected": "true"
     },
     {
      "expression": "{!m.booleanFalse ne false}",
      "exprText": "m.booleanFalse ne false",
      "expected": "false"
     },
     {
      "expression": "{!notequals(false, m.booleanTrue)}",
      "exprText": "notequals(false, m.booleanTrue)",
      "expected": "true"
     },
     {
      "expression": "{!2 != '2'}",
      "exprText": "2 != '2'",
      "expected": "true"
     },
     {
      "expression": "{!0 != false}",
      "exprText": "0 != false",
      "expected": "true"
     },
     {
      "expression": "{!v.NaN != v.NaN}",
      "exprText": "v.NaN != v.NaN",
      "expected": "true"
     },
     {
      "expression": "{!v.nullObj != v.nullObj}",
      "exprText": "v.nullObj != v.nullObj",
      "expected": "false"
     },
     {
      "expression": "{!v.nullObj != false}",
      "exprText": "v.nullObj != false",
      "expected": "true"
     },
     {
      "expression": "{!true && false}",
      "exprText": "true && false",
      "expected": "false"
     },
     {
      "expression": "{!and(true, m.booleanTrue)}",
      "exprText": "and(true, m.booleanTrue)",
      "expected": "true"
     },
     {
      "expression": "{!1 && 2}",
      "exprText": "1 && 2",
      "expected": "2"
     },
     {
      "expression": "{!0 && 2}",
      "exprText": "0 && 2",
      "expected": "0"
     },
     {
      "expression": "{!'0' && 2}",
      "exprText": "'0' && 2",
      "expected": "2"
     },
     {
      "expression": "{!'false' && 2}",
      "exprText": "'false' && 2",
      "expected": "2"
     },
     {
      "expression": "{!'' && 2}",
      "exprText": "'' && 2",
      "expected": "''"
     },
     {
      "expression": "{!v.NaN && 2}",
      "exprText": "v.NaN && 2",
      "expected": "NaN"
     },
     {
      "expression": "{!9 && v.integer}",
      "exprText": "9 && v.integer",
      "expected": "7"
     },
     {
      "expression": "{!9 && v.double}",
      "exprText": "9 && v.double",
      "expected": "3.1"
     },
     {
      "expression": "{!9 && v.doubleString}",
      "exprText": "9 && v.doubleString",
      "expected": "'2.1'"
     },
     {
      "expression": "{!9 && v.string}",
      "exprText": "9 && v.string",
      "expected": "'Component'"
     },
     {
      "expression": "{!9 && v.emptyString}",
      "exprText": "9 && v.emptyString",
      "expected": "''"
     },
     {
      "expression": "{!false || false}",
      "exprText": "false || false",
      "expected": "false"
     },
     {
      "expression": "{!or(true, false)}",
      "exprText": "or(true, false)",
      "expected": "true"
     },
     {
      "expression": "{!0 || 2}",
      "exprText": "0 || 2",
      "expected": "2"
     },
     {
      "expression": "{!1 || 2}",
      "exprText": "1 || 2",
      "expected": "1"
     },
     {
      "expression": "{!'0' || 2}",
      "exprText": "'0' || 2",
      "expected": "'0'"
     },
     {
      "expression": "{!'false' || 2}",
      "exprText": "'false' || 2",
      "expected": "'false'"
     },
     {
      "expression": "{!'' || m.double}",
      "exprText": "'' || m.double",
      "expected": "4.1"
     },
     {
      "expression": "{!v.NaN || m.string}",
      "exprText": "v.NaN || m.string",
      "expected": "'Model'"
     },
     {
      "expression": "{!!true}",
      "exprText": "!true",
      "expected": "false"
     },
     {
      "expression": "{!not(false)}",
      "exprText": "not(false)",
      "expected": "true"
     },
     {
      "expression": "{!!0}",
      "exprText": "!0",
      "expected": "true"
     },
     {
      "expression": "{!!7}",
      "exprText": "!7",
      "expected": "false"
     },
     {
      "expression": "{!!'0'}",
      "exprText": "!'0'",
      "expected": "false"
     },
     {
      "expression": "{!!'false'}",
      "exprText": "!'false'",
      "expected": "false"
     },
     {
      "expression": "{!!''}",
      "exprText": "!''",
      "expected": "true"
     },
     {
      "expression": "{!!v.NaN}",
      "exprText": "!v.NaN",
      "expected": "true"
     },
     {
      "expression": "{!!v.string}",
      "exprText": "!v.string",
      "expected": "false"
     },
     {
      "expression": "{!!v.emptyString}",
      "exprText": "!v.emptyString",
      "expected": "true"
     },
     {
      "expression": "{!true ? 'yes' : 'no'}",
      "exprText": "true ? 'yes' : 'no'",
      "expected": "'yes'"
     },
     {
      "expression": "{!false ? 'yes' : 'no'}",
      "exprText": "false ? 'yes' : 'no'",
      "expected": "'no'"
     },
     {
      "expression": "{!true ? v.nullObj : 'no'}",
      "exprText": "true ? null : 'no'",
      "expected": "null"
     },
     {
      "expression": "{!false ? 'yes' : v.nullObj}",
      "exprText": "false ? 'yes' : null",
      "expected": "null"
     },
     {
      "expression": "{!v.nullObj ? 'yes' : 'no'}",
      "exprText": "null ? 'yes' : null",
      "expected": "'no'"
     },
     {
      "expression": "{!if(true, 'yes')}",
      "exprText": "if(true, 'yes')",
      "expected": "'yes'"
     },
     {
      "expression": "{!if(false, 'yes')}",
      "exprText": "if(false, 'yes')",
      "expected": "''"
     },
     {
      "expression": "{!if(true, 'yes', 'no')}",
      "exprText": "if(true, 'yes', 'no')",
      "expected": "'yes'"
     },
     {
      "expression": "{!if(false, 'yes', 'no')}",
      "exprText": "if(false, 'yes', 'no')",
      "expected": "'no'"
     },
     {
      "expression": "{!0 ? 'yes' : 'no'}",
      "exprText": "0 ? 'yes' : 'no'",
      "expected": "'no'"
     },
     {
      "expression": "{!2.1 ? 'yes' : 'no'}",
      "exprText": "2.1 ? 'yes' : 'no'",
      "expected": "'yes'"
     },
     {
      "expression": "{!'0' ? 'yes' : 'no'}",
      "exprText": "'0' ? 'yes' : 'no'",
      "expected": "'yes'"
     },
     {
      "expression": "{!'true' ? 'yes' : 'no'}",
      "exprText": "'true' ? 'yes' : 'no'",
      "expected": "'yes'"
     },
     {
      "expression": "{!'false' ? 'yes' : 'no'}",
      "exprText": "'false' ? 'yes' : 'no'",
      "expected": "'yes'"
     },
     {
      "expression": "{!'' ? 'yes' : 'no'}",
      "exprText": "'' ? 'yes' : 'no'",
      "expected": "'no'"
     },
     {
      "expression": "{!v.NaN ? 'yes' : 'no'}",
      "exprText": "v.NaN ? 'yes' : 'no'",
      "expected": "'no'"
     },
     {
      "expression": "{!3146431.43266 + 937.1652}",
      "exprText": "3146431.43266 + 937.1652",
      "expected": "3147368.59786"
     },
     {
      "expression": "{!0 + 0}",
      "exprText": "0 + 0",
      "expected": "0"
     },
     {
      "expression": "{!0 + 'x'}",
      "exprText": "0 + 'x'",
      "expected": "'0x'"
     },
     {
      "expression": "{!'a' + v.double}",
      "exprText": "'a' + v.double",
      "expected": "'a3.1'"
     },
     {
      "expression": "{!'a' + 'x'}",
      "exprText": "'a' + 'x'",
      "expected": "'ax'"
     },
     {
      "expression": "{!3 + ''}",
      "exprText": "3 + ''",
      "expected": "'3'"
     },
     {
      "expression": "{!'' + 3}",
      "exprText": "3 + ''",
      "expected": "'3'"
     },
     {
      "expression": "{!m.emptyString + '3'}",
      "exprText": "m.emptyString + '3'",
      "expected": "'3'"
     },
     {
      "expression": "{!'3' + '3'}",
      "exprText": "'3' + '3'",
      "expected": "'33'"
     },
     {
      "expression": "{!v.Infinity + 2}",
      "exprText": "v.Infinity + 2",
      "expected": "Infinity"
     },
     {
      "expression": "{!v.Infinity + v.NegativeInfinity}",
      "exprText": "v.Infinity + v.NegativeInfinity",
      "expected": "NaN"
     },
     {
      "expression": "{!v.Infinity + 'AndBeyond'}",
      "exprText": "v.Infinity + 'AndBeyond'",
      "expected": "'InfinityAndBeyond'"
     },
     {
      "expression": "{!'To' + v.NegativeInfinity}",
      "exprText": "'To' + v.NegativeInfinity",
      "expected": "'To-Infinity'"
     },
     {
      "expression": "{!1 + v.NaN}",
      "exprText": "1 + v.NaN",
      "expected": "NaN"
     },
     {
      "expression": "{!'100' + v.NaN}",
      "exprText": "'100' + v.NaN",
      "expected": "'100NaN'"
     },
     {
      "expression": "{!m.date + 5}",
      "exprText": "m.date + 5",
      "expected": "'2004-09-23T16:30:00.000Z5'"
     },
     {
      "expression": "{!m.date + '8'}",
      "exprText": "m.date + '8'",
      "expected": "'2004-09-23T16:30:00.000Z8'"
     },
     {
      "expression": "{!v.nullObj + 1}",
      "exprText": "v.nullObj + 1",
      "expected": "1"
     },
     {
      "expression": "{!v.nullObj + 'b'}",
      "exprText": "v.nullObj + 'b'",
      "expected": "'b'"
     },
     {
      "expression": "{!v.nullObj + 2.5}",
      "exprText": "v.nullObj + 2.5",
      "expected": "2.5"
     },
     {
      "expression": "{!'b' + v.nullObj}",
      "exprText": "'b' + v.nullObj",
      "expected": "'b'"
     },
     {
      "expression": "{!v.nullObj + v.nullObj}",
      "exprText": "v.nullObj + v.nullObj",
      "expected": "''"
     },
     {
      "expression": "{!'' + (-0.0)}",
      "exprText": "'' + (-0.0)",
      "expected": "'0'"
     },
     {
      "expression": "{!v.nullList + 'a'}",
      "exprText": "v.nullList + 'a'",
      "expected": "'a'"
     },
     {
      "expression": "{!v.list + 'a'}",
      "exprText": "v.list + 'a'",
      "expected": "'1,2,3a'"
     },
     {
      "expression": "{!v.listWithNull + ''}",
      "exprText": "v.listWithNull + ''",
      "expected": "',a'"
     },
     {
      "expression": "{!v.listWithList + ''}",
      "exprText": "v.listWithList + ''",
      "expected": "',a,,b,c'"
     },
     {
      "expression": "{!v.listWithNested4Layers + ''}",
      "exprText": "v.listWithNested4Layers + ''",
      "expected": "'6,7,4,5,2,3,0,1,b'"
     },
     {
      "expression": "{!v.listWithLoop + ''}",
      "exprText": "v.listWithLoop + ''",
      "expected": "'0,1,'"
     },
     {
      "expression": "{!v.map + ''}",
      "exprText": "v.map + ''",
      "expected": "'[object Object]'"
     },
     {
      "expression": "{!add(m.integer, 2.0)}",
      "exprText": "add(m.integer, 2.0)",
      "expected": "413"
     },
     {
      "expression": "{!concat(4.1,v.integer)}",
      "exprText": "concat(4.1,v.integer)",
      "expected": "11.1"
     },
     {
      "expression": "{!3 - 1}",
      "exprText": "3 - 1",
      "expected": "2"
     },
     {
      "expression": "{!sub(2, 2.0)}",
      "exprText": "sub(2, 2.0)",
      "expected": "0"
     },
     {
      "expression": "{!subtract(4, 2)}",
      "exprText": "subtract(4, 2)",
      "expected": "2"
     },
     {
      "expression": "{!2 - null}",
      "exprText": "2 - null",
      "expected": "2"
     },
     {
      "expression": "{!3 - '5o'}",
      "exprText": "3 - '5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!3 - ''}",
      "exprText": "3 - ''",
      "expected": "3"
     },
     {
      "expression": "{!'5o' - 3}",
      "exprText": "'5o' - 3",
      "expected": "NaN"
     },
     {
      "expression": "{!'' - 3}",
      "exprText": "'' - 3",
      "expected": "-3"
     },
     {
      "expression": "{!'5o' - '5o'}",
      "exprText": "'5o' - '5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!'' - ''}",
      "exprText": "'' - ''",
      "expected": "0"
     },
     {
      "expression": "{!v.Infinity - 2}",
      "exprText": "v.Infinity - 2",
      "expected": "Infinity"
     },
     {
      "expression": "{!3 - v.Infinity}",
      "exprText": "3 - v.Infinity",
      "expected": "-Infinity"
     },
     {
      "expression": "{!3 - v.NaN}",
      "exprText": "3 - v.NaN",
      "expected": "NaN"
     },
     {
      "expression": "{!3 - '1'}",
      "exprText": "3 - '1'",
      "expected": "2"
     },
     {
      "expression": "{!'4' - 1}",
      "exprText": "'4' - 1",
      "expected": "3"
     },
     {
      "expression": "{!'3' - '5'}",
      "exprText": "'3' - '5'",
      "expected": "-2"
     },
     {
      "expression": "{!m.double - m.integerString}",
      "exprText": "m.double - m.integerString",
      "expected": "-506.9"
     },
     {
      "expression": "{!1 * 1.1}",
      "exprText": "1 * 1.1",
      "expected": "1.1"
     },
     {
      "expression": "{!mult(0, 3)}",
      "exprText": "mult(0, 3)",
      "expected": "0"
     },
     {
      "expression": "{!multiply(-2, -.1)}",
      "exprText": "multiply(-2, -.1)",
      "expected": ".2"
     },
     {
      "expression": "{!5 * '5o'}",
      "exprText": "5 * '5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!'5o' * 9}",
      "exprText": "'5o' * 9",
      "expected": "NaN"
     },
     {
      "expression": "{!'5o' * '5o'}",
      "exprText": "'5o' * '5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!1e200 * 1e200}",
      "exprText": "1e200 * 1e200",
      "expected": "Infinity"
     },
     {
      "expression": "{!-1e200 * 1e200}",
      "exprText": "-1e200 * 1e200",
      "expected": "-Infinity"
     },
     {
      "expression": "{!v.Infinity * v.Infinity}",
      "exprText": "v.Infinity * v.Infinity",
      "expected": "Infinity"
     },
     {
      "expression": "{!0 * v.Infinity}",
      "exprText": "0 * v.Infinity",
      "expected": "NaN"
     },
     {
      "expression": "{!2 * '1.1'}",
      "exprText": "2 * '1.1'",
      "expected": "2.2"
     },
     {
      "expression": "{!'1.3' * 4}",
      "exprText": "'1.3' * 4",
      "expected": "5.2"
     },
     {
      "expression": "{!'7' * '3.1'}",
      "exprText": "'7' * '3.1'",
      "expected": "21.7"
     },
     {
      "expression": "{!1 * v.NaN}",
      "exprText": "1 * v.NaN",
      "expected": "NaN"
     },
     {
      "expression": "{!m.double * '2'}",
      "exprText": "m.double * '2'",
      "expected": "8.2"
     },
     {
      "expression": "{!3 / 2}",
      "exprText": "3 / 2",
      "expected": "1.5"
     },
     {
      "expression": "{!div(4, 2)}",
      "exprText": "div(4, 2)",
      "expected": "2"
     },
     {
      "expression": "{!divide(5, 2)}",
      "exprText": "divide(5, 2)",
      "expected": "2.5"
     },
     {
      "expression": "{!0 / 0}",
      "exprText": "0 / 0",
      "expected": "NaN"
     },
     {
      "expression": "{!5 / 0}",
      "exprText": "5 / 0",
      "expected": "Infinity"
     },
     {
      "expression": "{!-1 / 0}",
      "exprText": "-1 / 0",
      "expected": "-Infinity"
     },
     {
      "expression": "{!3 / '5o'}",
      "exprText": "3 / '5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!'5o' / 3}",
      "exprText": "'5o' / 3",
      "expected": "NaN"
     },
     {
      "expression": "{!'5o' / '5o'}",
      "exprText": "'5o' / '5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!'5.5' / '1.1'}",
      "exprText": "'5.5' / '1.1'",
      "expected": "5"
     },
     {
      "expression": "{!5 / v.NegativeInfinity}",
      "exprText": "5 / v.NegativeInfinity",
      "expected": "0"
     },
     {
      "expression": "{!v.Infinity / v.Infinity}",
      "exprText": "v.Infinity / v.Infinity",
      "expected": "NaN"
     },
     {
      "expression": "{!1 / v.NaN}",
      "exprText": "1 / v.NaN",
      "expected": "NaN"
     },
     {
      "expression": "{!m.double / '2'}",
      "exprText": "m.double / '2'",
      "expected": "2.05"
     },
     {
      "expression": "{!23 % 4}",
      "exprText": "23 % 4",
      "expected": "3"
     },
     {
      "expression": "{!mod(23, 4)}",
      "exprText": "mod(23, 4)",
      "expected": "3"
     },
     {
      "expression": "{!modulus(23, 4)}",
      "exprText": "modulus(23, 4)",
      "expected": "3"
     },
     {
      "expression": "{!3 % 0}",
      "exprText": "3 % 0",
      "expected": "NaN"
     },
     {
      "expression": "{!0 % 3}",
      "exprText": "0 % 3",
      "expected": "0"
     },
     {
      "expression": "{!0 % 0}",
      "exprText": "0 % 0",
      "expected": "NaN"
     },
     {
      "expression": "{!3 % '5o'}",
      "exprText": "3 % '5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!'5o' % 3}",
      "exprText": "'5o' % 3",
      "expected": "NaN"
     },
     {
      "expression": "{!'5o' % '5o'}",
      "exprText": "'5o' % '5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!'23' % '4'}",
      "exprText": "'23' % '4'",
      "expected": "3"
     },
     {
      "expression": "{!3 % v.Infinity}",
      "exprText": "3 % v.Infinity",
      "expected": "3"
     },
     {
      "expression": "{!v.Infinity % 3}",
      "exprText": "v.Infinity % 3",
      "expected": "NaN"
     },
     {
      "expression": "{!1 % v.NaN}",
      "exprText": "1 % v.NaN",
      "expected": "NaN"
     },
     {
      "expression": "{!m.integer % '2'}",
      "exprText": "m.integer % '2'",
      "expected": "1"
     },
     {
      "expression": "{!5 > 2}",
      "exprText": "5 > 2",
      "expected": "true"
     },
     {
      "expression": "{!2 gt 2}",
      "exprText": "2 gt 2",
      "expected": "false"
     },
     {
      "expression": "{!greaterthan(3, 2)}",
      "exprText": "greaterthan(3, 2)",
      "expected": "true"
     },
     {
      "expression": "{!9000 > '5o'}",
      "exprText": "9000 > '5o'",
      "expected": "false"
     },
     {
      "expression": "{!'5o' > 4}",
      "exprText": "'5o' > 4",
      "expected": "false"
     },
     {
      "expression": "{!'5o' > '4o'}",
      "exprText": "'5o' > '4o'",
      "expected": "true"
     },
     {
      "expression": "{!'5' > '3.9'}",
      "exprText": "'5' > '3.9'",
      "expected": "true"
     },
     {
      "expression": "{!'5b' > '5a'}",
      "exprText": "'5b' > '5a'",
      "expected": "true"
     },
     {
      "expression": "{!'5A' > '5a'}",
      "exprText": "'5A' > '5a'",
      "expected": "false"
     },
     {
      "expression": "{!v.Infinity > v.Infinity}",
      "exprText": "v.Infinity > v.Infinity",
      "expected": "false"
     },
     {
      "expression": "{!true > false}",
      "exprText": "true > false",
      "expected": "true"
     },
     {
      "expression": "{!0 > ''}",
      "exprText": "0 > ''",
      "expected": "false"
     },
     {
      "expression": "{!true > 0}",
      "exprText": "true > 0",
      "expected": "true"
     },
     {
      "expression": "{!true > 1}",
      "exprText": "true > 1",
      "expected": "false"
     },
     {
      "expression": "{!v.Infinity > -v.Infinity}",
      "exprText": "v.Infinity > -v.Infinity",
      "expected": "true"
     },
     {
      "expression": "{!0 > v.NaN}",
      "exprText": "0 > v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!'zz' > v.NaN}",
      "exprText": "'zz' > v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!v.Infinity > v.NaN}",
      "exprText": "v.Infinity > v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN > 0}",
      "exprText": "v.NaN > 0",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN > '5o'}",
      "exprText": "v.NaN > '5o'",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN > v.Infinity}",
      "exprText": "v.NaN > v.Infinity",
      "expected": "false"
     },
     {
      "expression": "{!m.dateLater > m.date}",
      "exprText": "m.dateLater > m.date",
      "expected": "true"
     },
     {
      "expression": "{!m.date > m.dateLater}",
      "exprText": "m.date > m.dateLater",
      "expected": "false"
     },
     {
      "expression": "{!m.calendarLater > m.calendar}",
      "exprText": "m.calendarLater > m.calendar",
      "expected": "true"
     },
     {
      "expression": "{!m.calendar > m.calendarLater}",
      "exprText": "m.calendar > m.calendarLater",
      "expected": "false"
     },
     {
      "expression": "{!m.calendar > m.date}",
      "exprText": "m.calendar > m.date",
      "expected": "true"
     },
     {
      "expression": "{!5 >= 2}",
      "exprText": "5 >= 2",
      "expected": "true"
     },
     {
      "expression": "{!2 ge 2}",
      "exprText": "2 ge 2",
      "expected": "true"
     },
     {
      "expression": "{!greaterthanorequal(3, 2)}",
      "exprText": "greaterthanorequal(3, 2)",
      "expected": "true"
     },
     {
      "expression": "{!9000 >= '5o'}",
      "exprText": "9000 >= '5o'",
      "expected": "false"
     },
     {
      "expression": "{!'5o' >= 4}",
      "exprText": "'5o' >= 4",
      "expected": "false"
     },
     {
      "expression": "{!'5o' >= '4o'}",
      "exprText": "'5o' >= '4o'",
      "expected": "true"
     },
     {
      "expression": "{!'5' >= '3.9'}",
      "exprText": "'5' >= '3.9'",
      "expected": "true"
     },
     {
      "expression": "{!'5b' >= '5a'}",
      "exprText": "'5b' >= '5a'",
      "expected": "true"
     },
     {
      "expression": "{!'5A' >= '5a'}",
      "exprText": "'5A' >= '5a'",
      "expected": "false"
     },
     {
      "expression": "{!v.Infinity >= v.Infinity}",
      "exprText": "v.Infinity >= v.Infinity",
      "expected": "true"
     },
     {
      "expression": "{!true >= false}",
      "exprText": "true >= false",
      "expected": "true"
     },
     {
      "expression": "{!0 >= ''}",
      "exprText": "0 >= ''",
      "expected": "true"
     },
     {
      "expression": "{!true >= 0}",
      "exprText": "true >= 0",
      "expected": "true"
     },
     {
      "expression": "{!true >= 1}",
      "exprText": "true >= 1",
      "expected": "true"
     },
     {
      "expression": "{!v.Infinity >= -v.Infinity}",
      "exprText": "v.Infinity >= -v.Infinity",
      "expected": "true"
     },
     {
      "expression": "{!0 >= v.NaN}",
      "exprText": "0 >= v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!'5o' >= v.NaN}",
      "exprText": "'5o' >= v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!'zz' >= v.NaN}",
      "exprText": "'zz' >= v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!v.Infinity >= v.NaN}",
      "exprText": "v.Infinity >= v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN >= 0}",
      "exprText": "v.NaN >= 0",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN >= '5o'}",
      "exprText": "v.NaN >= '5o'",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN >= v.Infinity}",
      "exprText": "v.NaN >= v.Infinity",
      "expected": "false"
     },
     {
      "expression": "{!m.dateLater >= m.date}",
      "exprText": "m.dateLater >= m.date",
      "expected": "true"
     },
     {
      "expression": "{!m.date >= m.dateLater}",
      "exprText": "m.date >= m.dateLater",
      "expected": "false"
     },
     {
      "expression": "{!m.calendarLater >= m.calendar}",
      "exprText": "m.calendarLater >= m.calendar",
      "expected": "true"
     },
     {
      "expression": "{!m.calendar >= m.calendarLater}",
      "exprText": "m.calendar >= m.calendarLater",
      "expected": "false"
     },
     {
      "expression": "{!m.calendar >= m.date}",
      "exprText": "m.calendar >= m.date",
      "expected": "true"
     },
     {
      "expression": "{!5 < 2}",
      "exprText": "5 < 2",
      "expected": "false"
     },
     {
      "expression": "{!2 lt 2}",
      "exprText": "2 lt 2",
      "expected": "false"
     },
     {
      "expression": "{!lessthan(3, 2)}",
      "exprText": "lessthan(3, 2)",
      "expected": "false"
     },
     {
      "expression": "{!9000 < '5o'}",
      "exprText": "9000 < '5o'",
      "expected": "false"
     },
     {
      "expression": "{!'5o' < 4}",
      "exprText": "'5o' < 4",
      "expected": "false"
     },
     {
      "expression": "{!'5o' < '4o'}",
      "exprText": "'5o' < '4o'",
      "expected": "false"
     },
     {
      "expression": "{!'5' < '3.9'}",
      "exprText": "'5' < '3.9'",
      "expected": "false"
     },
     {
      "expression": "{!'5b' < '5a'}",
      "exprText": "'5b' < '5a'",
      "expected": "false"
     },
     {
      "expression": "{!'5A' < '5a'}",
      "exprText": "'5A' < '5a'",
      "expected": "true"
     },
     {
      "expression": "{!v.Infinity < v.Infinity}",
      "exprText": "v.Infinity < v.Infinity",
      "expected": "false"
     },
     {
      "expression": "{!true < false}",
      "exprText": "true < false",
      "expected": "false"
     },
     {
      "expression": "{!0 < ''}",
      "exprText": "0 < ''",
      "expected": "false"
     },
     {
      "expression": "{!true < 0}",
      "exprText": "true < 0",
      "expected": "false"
     },
     {
      "expression": "{!true < 1}",
      "exprText": "true < 1",
      "expected": "false"
     },
     {
      "expression": "{!v.Infinity < -v.Infinity}",
      "exprText": "v.Infinity < -v.Infinity",
      "expected": "false"
     },
     {
      "expression": "{!0 < v.NaN}",
      "exprText": "0 < v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!'5o' < v.NaN}",
      "exprText": "'5o' < v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!'zz' < v.NaN}",
      "exprText": "'zz' < v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!v.Infinity < v.NaN}",
      "exprText": "v.Infinity < v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN < 0}",
      "exprText": "v.NaN < 0",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN < '5o'}",
      "exprText": "v.NaN < '5o'",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN < v.Infinity}",
      "exprText": "v.NaN < v.Infinity",
      "expected": "false"
     },
     {
      "expression": "{!m.dateLater < m.date}",
      "exprText": "m.dateLater < m.date",
      "expected": "false"
     },
     {
      "expression": "{!m.date < m.dateLater}",
      "exprText": "m.date < m.dateLater",
      "expected": "true"
     },
     {
      "expression": "{!m.calendarLater < m.calendar}",
      "exprText": "m.calendarLater < m.calendar",
      "expected": "false"
     },
     {
      "expression": "{!m.calendar < m.calendarLater}",
      "exprText": "m.calendar < m.calendarLater",
      "expected": "true"
     },
     {
      "expression": "{!m.calendar < m.date}",
      "exprText": "m.calendar < m.date",
      "expected": "false"
     },
     {
      "expression": "{!5 <= 2}",
      "exprText": "5 <= 2",
      "expected": "false"
     },
     {
      "expression": "{!2 le 2}",
      "exprText": "2 le 2",
      "expected": "true"
     },
     {
      "expression": "{!lessthanorequal(3, 2)}",
      "exprText": "lessthanorequal(3, 2)",
      "expected": "false"
     },
     {
      "expression": "{!9000 <= '5o'}",
      "exprText": "9000 <= '5o'",
      "expected": "false"
     },
     {
      "expression": "{!'5o' <= 4}",
      "exprText": "'5o' <= 4",
      "expected": "false"
     },
     {
      "expression": "{!'5o' <= '4o'}",
      "exprText": "'5o' <= '4o'",
      "expected": "false"
     },
     {
      "expression": "{!'5' <= '3.9'}",
      "exprText": "'5' <= '3.9'",
      "expected": "false"
     },
     {
      "expression": "{!'5b' <= '5a'}",
      "exprText": "'5b' <= '5a'",
      "expected": "false"
     },
     {
      "expression": "{!'5A' <= '5a'}",
      "exprText": "'5A' <= '5a'",
      "expected": "true"
     },
     {
      "expression": "{!v.Infinity <= v.Infinity}",
      "exprText": "v.Infinity <= v.Infinity",
      "expected": "true"
     },
     {
      "expression": "{!true <= false}",
      "exprText": "true <= false",
      "expected": "false"
     },
     {
      "expression": "{!0 <= ''}",
      "exprText": "0 <= ''",
      "expected": "true"
     },
     {
      "expression": "{!true <= 0}",
      "exprText": "true <= 0",
      "expected": "false"
     },
     {
      "expression": "{!true <= 1}",
      "exprText": "true <= 1",
      "expected": "true"
     },
     {
      "expression": "{!v.Infinity <= -v.Infinity}",
      "exprText": "v.Infinity <= -v.Infinity",
      "expected": "false"
     },
     {
      "expression": "{!0 <= v.NaN}",
      "exprText": "0 <= v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!'5o' <= v.NaN}",
      "exprText": "'5o' <= v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!'zz' <= v.NaN}",
      "exprText": "'zz' <= v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!v.Infinity <= v.NaN}",
      "exprText": "v.Infinity <= v.NaN",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN <= 0}",
      "exprText": "v.NaN <= 0",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN <= '5o'}",
      "exprText": "v.NaN <= '5o'",
      "expected": "false"
     },
     {
      "expression": "{!v.NaN <= v.Infinity}",
      "exprText": "v.NaN <= v.Infinity",
      "expected": "false"
     },
     {
      "expression": "{!m.dateLater <= m.date}",
      "exprText": "m.dateLater <= m.date",
      "expected": "false"
     },
     {
      "expression": "{!m.date <= m.dateLater}",
      "exprText": "m.date <= m.dateLater",
      "expected": "true"
     },
     {
      "expression": "{!m.calendarLater <= m.calendar}",
      "exprText": "m.calendarLater <= m.calendar",
      "expected": "false"
     },
     {
      "expression": "{!m.calendar <= m.calendarLater}",
      "exprText": "m.calendar <= m.calendarLater",
      "expected": "true"
     },
     {
      "expression": "{!m.calendar <= m.date}",
      "exprText": "m.calendar <= m.date",
      "expected": "false"
     },
     {
      "expression": "{!-1}",
      "exprText": "-1",
      "expected": "-1"
     },
     {
      "expression": "{!neg(2)}",
      "exprText": "neg(2)",
      "expected": "-2"
     },
     {
      "expression": "{!negate(3)}",
      "exprText": "negate(3)",
      "expected": "-3"
     },
     {
      "expression": "{!negate(-3)}",
      "exprText": "negate(-3)",
      "expected": "3"
     },
     {
      "expression": "{!-v.NaN}",
      "exprText": "-v.NaN",
      "expected": "NaN"
     },
     {
      "expression": "{!-v.Infinity}",
      "exprText": "-v.Infinity",
      "expected": "-Infinity"
     },
     {
      "expression": "{!-'5o'}",
      "exprText": "-'5o'",
      "expected": "NaN"
     },
     {
      "expression": "{!-'5'}",
      "exprText": "-'5'",
      "expected": "-5"
     },
     {
      "expression": "{!-''}",
      "exprText": "-''",
      "expected": "0"
     },
     {
      "expression": "{!-m.double}",
      "exprText": "-m.double",
      "expected": "-4.1"
     },
     {
      "expression": "{!abs(3)}",
      "exprText": "abs(3)",
      "expected": "3"
     },
     {
      "expression": "{!abs(-2.1)}",
      "exprText": "abs(-2.1)",
      "expected": "2.1"
     },
     {
      "expression": "{!abs('-5')}",
      "exprText": "abs('-5')",
      "expected": "5"
     },
     {
      "expression": "{!abs('-5o')}",
      "exprText": "abs('-5o')",
      "expected": "NaN"
     },
     {
      "expression": "{!abs('')}",
      "exprText": "abs('')",
      "expected": "0"
     },
     {
      "expression": "{!abs(-v.Infinity)}",
      "exprText": "abs(-v.Infinity)",
      "expected": "Infinity"
     },
     {
      "expression": "{!abs(m.NaN)}",
      "exprText": "abs(m.NaN)",
      "expected": "NaN"
     },
     {
      "expression": "{!abs(v.double)}",
      "exprText": "abs(v.double)",
      "expected": "3.1"
     },
     {
      "expression": "{!empty(null)}",
      "exprText": "empty(null)",
      "expected": "true"
     },
     {
      "expression": "{!empty(true)}",
      "exprText": "empty(true)",
      "expected": "false"
     },
     {
      "expression": "{!empty(false)}",
      "exprText": "empty(false)",
      "expected": "false"
     },
     {
      "expression": "{!empty(0)}",
      "exprText": "empty(0)",
      "expected": "false"
     },
     {
      "expression": "{!empty(0.0)}",
      "exprText": "empty(0.0)",
      "expected": "false"
     },
     {
      "expression": "{!empty(m.integer)}",
      "exprText": "empty(m.integer)",
      "expected": "false"
     },
     {
      "expression": "{!empty(m.double)}",
      "exprText": "empty(m.double)",
      "expected": "false"
     },
     {
      "expression": "{!empty(v.NaN)}",
      "exprText": "empty(v.NaN)",
      "expected": "false"
     },
     {
      "expression": "{!empty('')}",
      "exprText": "empty('')",
      "expected": "true"
     },
     {
      "expression": "{!empty('Random')}",
      "exprText": "empty('Random')",
      "expected": "false"
     },
     {
      "expression": "{!empty(m.stringEmpty)}",
      "exprText": "empty(m.stringEmpty)",
      "expected": "true"
     },
     {
      "expression": "{!empty(m.string)}",
      "exprText": "empty(m.string)",
      "expected": "false"
     },
     {
      "expression": "{!empty(m.emptyList)}",
      "exprText": "empty(m.emptyList)",
      "expected": "true"
     },
     {
      "expression": "{!empty(m.stringList)}",
      "exprText": "empty(m.stringList)",
      "expected": "false"
     },
     {
      "expression": "{!empty(m.objectNull)}",
      "exprText": "empty(m.objectNull)",
      "expected": "true"
     },
     {
      "expression": "{!empty(v.object)}",
      "exprText": "empty(v.object)",
      "expected": "true"
     },
     {
      "expression": "{!format()}",
      "exprText": "format()",
      "expected": "''"
     },
     {
      "expression": "{!format(null)}",
      "exprText": "format(null)",
      "expected": "''"
     },
     {
      "expression": "{!format(undefined)}",
      "exprText": "format(undefined)",
      "expected": "''"
     },
     {
      "expression": "{!format(true)}",
      "exprText": "format(true)",
      "expected": "'true'"
     },
     {
      "expression": "{!format(false)}",
      "exprText": "format(false)",
      "expected": "'false'"
     },
     {
      "expression": "{!format(123)}",
      "exprText": "format(123)",
      "expected": "'123'"
     },
     {
      "expression": "{!format(123.4)}",
      "exprText": "format(123.4)",
      "expected": "'123.4'"
     },
     {
      "expression": "{!format(0)}",
      "exprText": "format(0)",
      "expected": "'0'"
     },
     {
      "expression": "{!format(0.0)}",
      "exprText": "format(0.0)",
      "expected": "'0'"
     },
     {
      "expression": "{!format('abc')}",
      "exprText": "format('abc')",
      "expected": "'abc'"
     },
     {
      "expression": "{!format('')}",
      "exprText": "format('')",
      "expected": "''"
     },
     {
      "expression": "{!format(NaN)}",
      "exprText": "format(NaN)",
      "expected": "''"
     },
     {
      "expression": "{!format(v.label2, null, undefined)}",
      "exprText": "format(v.label2, null, undefined",
      "expected": "'Hello  and '"
     },
     {
      "expression": "{!format(v.label2, true, false)}",
      "exprText": "format(v.label2, v.true, false)",
      "expected": "'Hello true and false'"
     },
     {
      "expression": "{!format(v.label2, 123, 123.4)}",
      "exprText": "format(v.label2, 123, 123.4)",
      "expected": "'Hello 123 and 123.4'"
     },
     {
      "expression": "{!format(v.label2, 0, 0.0)}",
      "exprText": "format(v.label2, 0, 0.0)",
      "expected": "'Hello 0 and 0'"
     },
     {
      "expression": "{!format(v.label2, m.stringEmpty, m.string)}",
      "exprText": "format(v.label2, m.stringEmpty, m.string)",
      "expected": "'Hello  and Model'"
     },
     {
      "expression": "{!format(v.label2, m.objectNull, m.object)}",
      "exprText": "format(v.label2, m.objectNull, m.object)",
      "expected": "'Hello  and '"
     },
     {
      "expression": "{!format(v.label2, m.emptyList, m.stringList)}",
      "exprText": "format(v.label2, m.emptyList, m.stringList)",
      "expected": "'Hello  and one,two,three'"
     },
     {
      "expression": "{!format(v.label0)}",
      "exprText": "format(v.label0)",
      "expected": "'Hello'"
     },
     {
      "expression": "{!format(v.label1)}",
      "exprText": "format(v.label1)",
      "expected": "'Hello {0}'"
     },
     {
      "expression": "{!format(v.label2)}",
      "exprText": "format(v.label2)",
      "expected": "'Hello {0} and {1}'"
     },
     {
      "expression": "{!format(v.label1)}",
      "exprText": "format(v.label1)",
      "expected": "'Hello {0}'"
     },
     {
      "expression": "{!format(v.label1, NaN)}",
      "exprText": "format(v.label1, NaN)",
      "expected": "'Hello '"
     },
     {
      "expression": "{!format(v.label1, v.string)}",
      "exprText": "format(v.label1, v.string)",
      "expected": "'Hello Component'"
     },
     {
      "expression": "{!format(v.label1, v.string, v.integer)}",
      "exprText": "format(v.label1, v.string, v.integer)",
      "expected": "'Hello Component'"
     },
     {
      "expression": "{!m.booleanTrue && v.string == 'Model' ? null : abs(v.Infinity) >= m.double && (m.double + m.doubleString + 1)}",
      "exprText": "m.booleanTrue && v.string == 'Model' ? null : abs(v.Infinity) >= m.double && (m.double + m.doubleString + 1)",
      "expected": "'4.15.11'"
     },
     {
      "expression": "{!concat(abs((div(mult(4,((sub((neg(v.double)),'1.1')))),v.doubleString-.1))),' magnitude')}",
      "exprText": "concat(abs((div(mult(4,((sub((neg(v.double)),'1.1')))),v.doubleString-.1))),' magnitude')",
      "expected": "'8.4 magnitude'"
     },
     {
      "expression": "{!if(or(m.calendar gt m.infinity,m.double*m.date lt m.emptyString),v.double/m.dateLater,7*'11'-4*2)}",
      "exprText": "if(or(m.calendar gt m.infinity,m.double*m.date lt m.emptyString),v.double/m.dateLater,7*'11'-4*2)",
      "expected": "69"
     }
    ]
   }
  },
  "mapValue.cmp": {
   "attributes": {
    "map": {
     "name": "map",
     "type": "Map"
    },
    "triggers": {
     "name": "triggers",
     "type": "Map",
     "default": "{ trigger: 'zero', triggerCount: 0, nested: { count: 0 } }"
    },
    "triggers2": {
     "name": "triggers2",
     "type": "Map",
     "default": "{ trigger: 'zero', triggerCount: 0, nested: { count: 1 } }"
    },
    "fribble": {
     "name": "fribble",
     "type": "Boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.triggers2}",
     "action": "{!c.noop}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "aura:id": "outputText",
      "value": "{!m.map.subkey}"
     }
    ]
   }
  },
  "null.cmp": {
   "attributes": {
    "isNull": {
     "name": "isNull",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "expressionTest:test": [
     {
      "expression": "{!null}",
      "exprText": "null",
      "expected": "null"
     },
     {
      "expression": "{!v.isNull}",
      "exprText": "v.isNull",
      "expected": "null"
     },
     {
      "expression": "{!undefined}",
      "exprText": "undefined",
      "expected": "undefined"
     },
     {
      "expression": "{!!null}",
      "exprText": "!null",
      "expected": "true"
     },
     {
      "expression": "{!null == true}",
      "exprText": "null == true",
      "expected": "false"
     },
     {
      "expression": "{!null == false}",
      "exprText": "null == false",
      "expected": "false"
     },
     {
      "expression": "{!null == ''}",
      "exprText": "null == ''",
      "expected": "false"
     },
     {
      "expression": "{!null == 0}",
      "exprText": "null == 0",
      "expected": "false"
     },
     {
      "expression": "{!null == null}",
      "exprText": "null == null",
      "expected": "true"
     },
     {
      "expression": "{!null == undefined}",
      "exprText": "null == undefined",
      "expected": "true"
     },
     {
      "expression": "{!null == m.naN}",
      "exprText": "null == m.naN",
      "expected": "false"
     },
     {
      "expression": "{!NaN == m.naN}",
      "exprText": "NaN == m.naN",
      "expected": "false"
     },
     {
      "expression": "{!'NaN' == m.naN}",
      "exprText": "'NaN' == m.naN",
      "expected": "false"
     },
     {
      "expression": "{!''+null/null == ''+m.naN}",
      "exprText": "NaN == m.naN",
      "expected": "true"
     },
     {
      "expression": "{!null != null}",
      "exprText": "null != null",
      "expected": "false"
     },
     {
      "expression": "{!null != undefined}",
      "exprText": "null != undefined",
      "expected": "false"
     },
     {
      "expression": "{!null != m.naN}",
      "exprText": "null != m.naN",
      "expected": "true"
     },
     {
      "expression": "{!true && null}",
      "exprText": "true && null",
      "expected": "null"
     },
     {
      "expression": "{!null && null}",
      "exprText": "null && null",
      "expected": "null"
     },
     {
      "expression": "{!null && true}",
      "exprText": "null && true",
      "expected": "null"
     },
     {
      "expression": "{!false || null}",
      "exprText": "false || null",
      "expected": "null"
     },
     {
      "expression": "{!null || true}",
      "exprText": "null || true",
      "expected": "true"
     },
     {
      "expression": "{!null || null}",
      "exprText": "null || null",
      "expected": "null"
     },
     {
      "expression": "{!null ? 'yes' : 'no'}",
      "exprText": "null ? 'yes' : 'no'",
      "expected": "'no'"
     },
     {
      "expression": "{!true ? null : 'no'}",
      "exprText": "true ? null : 'no'",
      "expected": "null"
     },
     {
      "expression": "{!false ? 'yes' : null}",
      "exprText": "false ? 'yes' : null",
      "expected": "null"
     },
     {
      "expression": "{!null + 1}",
      "exprText": "null + 1",
      "expected": "1"
     },
     {
      "expression": "{!null + 'b'}",
      "exprText": "null + 'b'",
      "expected": "'b'"
     },
     {
      "expression": "{!2.5 + null}",
      "exprText": "2.5 + null",
      "expected": "2.5"
     },
     {
      "expression": "{!'c' + null}",
      "exprText": "'c' + null",
      "expected": "'c'"
     },
     {
      "expression": "{!null + null}",
      "exprText": "null + null",
      "expected": "''"
     },
     {
      "expression": "{!2 - null}",
      "exprText": "2 - null",
      "expected": "2"
     },
     {
      "expression": "{!null - 3.1}",
      "exprText": "null - 3.1",
      "expected": "-3.1"
     },
     {
      "expression": "{!null - null}",
      "exprText": "null - null",
      "expected": "0"
     },
     {
      "expression": "{!3 * null}",
      "exprText": "3 * null",
      "expected": "0"
     },
     {
      "expression": "{!null * -.1}",
      "exprText": "null * -.1",
      "expected": "0"
     },
     {
      "expression": "{!null * null}",
      "exprText": "null * null",
      "expected": "0"
     },
     {
      "expression": "{!3 / null}",
      "exprText": "3 / null",
      "expected": "Infinity"
     },
     {
      "expression": "{!null / 3}",
      "exprText": "null / 3",
      "expected": "0"
     },
     {
      "expression": "{!null / null}",
      "exprText": "null / null",
      "expected": "NaN"
     },
     {
      "expression": "{!3 % null}",
      "exprText": "3 % null",
      "expected": "NaN"
     },
     {
      "expression": "{!null % 3}",
      "exprText": "null % 3",
      "expected": "0"
     },
     {
      "expression": "{!null % null}",
      "exprText": "null % null",
      "expected": "NaN"
     },
     {
      "expression": "{!1 > null}",
      "exprText": "1 > null",
      "expected": "true"
     },
     {
      "expression": "{!null > 0}",
      "exprText": "null > 0",
      "expected": "false"
     },
     {
      "expression": "{!null > null}",
      "exprText": "null > null",
      "expected": "false"
     },
     {
      "expression": "{!0 >= null}",
      "exprText": "0 >= null",
      "expected": "true"
     },
     {
      "expression": "{!null >= 1}",
      "exprText": "null >= 1",
      "expected": "false"
     },
     {
      "expression": "{!null >= null}",
      "exprText": "null >= null",
      "expected": "true"
     },
     {
      "expression": "{!0 < null}",
      "exprText": "0 < null",
      "expected": "false"
     },
     {
      "expression": "{!null < 1}",
      "exprText": "null < 1",
      "expected": "true"
     },
     {
      "expression": "{!null < null}",
      "exprText": "null < null",
      "expected": "false"
     },
     {
      "expression": "{!1 <= null}",
      "exprText": "1 <= null",
      "expected": "false"
     },
     {
      "expression": "{!null <= 0}",
      "exprText": "null <= 0",
      "expected": "true"
     },
     {
      "expression": "{!null <= null}",
      "exprText": "null <= null",
      "expected": "true"
     },
     {
      "expression": "{!-null}",
      "exprText": "-null",
      "expected": "0"
     },
     {
      "expression": "{!abs(null)}",
      "exprText": "abs(null)",
      "expected": "0"
     },
     {
      "expression": "{!m.stringNull}",
      "exprText": "m.stringNull",
      "expected": "null"
     },
     {
      "expression": "{!m.integerNull}",
      "exprText": "m.integerNull",
      "expected": "null"
     },
     {
      "expression": "{!m.doubleNull}",
      "exprText": "m.doubleNull",
      "expected": "null"
     },
     {
      "expression": "{!m.objectNull}",
      "exprText": "m.objectNull",
      "expected": "null"
     },
     {
      "expression": "{!!m.stringNull}",
      "exprText": "!m.stringNull",
      "expected": "true"
     },
     {
      "expression": "{!!m.objectNull}",
      "exprText": "!m.objectNull",
      "expected": "true"
     },
     {
      "expression": "{!null == m.stringNull}",
      "exprText": "null == m.stringNull",
      "expected": "true"
     },
     {
      "expression": "{!null == m.integerNull}",
      "exprText": "null == m.integerNull",
      "expected": "true"
     },
     {
      "expression": "{!null == m.doubleNull}",
      "exprText": "null == m.doubleNull",
      "expected": "true"
     },
     {
      "expression": "{!null == m.objectNull}",
      "exprText": "null == m.objectNull",
      "expected": "true"
     }
    ]
   }
  },
  "simpleValue.cmp": {
   "attributes": {
    "booleanValue": {
     "name": "booleanValue",
     "type": "Boolean"
    },
    "integerValue": {
     "name": "integerValue",
     "type": "Integer"
    },
    "stringValue": {
     "name": "stringValue",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.stringValue}",
     "action": "{!c.onValueChange}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "suite.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test.cmp": {
   "attributes": {
    "expression": {
     "name": "expression",
     "type": "Object"
    },
    "exprText": {
     "name": "exprText",
     "type": "String"
    },
    "expected": {
     "name": "expected",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "undefined.cmp": {
   "attributes": {
    "isNotSet": {
     "name": "isNotSet",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "expressionTest:test": [
     {
      "expression": "{!undefined}",
      "exprText": "undefined",
      "expected": "undefined"
     },
     {
      "expression": "{!v.isNotSet}",
      "exprText": "v.isNotSet",
      "expected": "undefined"
     },
     {
      "expression": "{!!undefined}",
      "exprText": "!undefined",
      "expected": "true"
     },
     {
      "expression": "{!undefined == true}",
      "exprText": "undefined == true",
      "expected": "false"
     },
     {
      "expression": "{!undefined == false}",
      "exprText": "undefined == false",
      "expected": "false"
     },
     {
      "expression": "{!undefined == ''}",
      "exprText": "undefined == ''",
      "expected": "false"
     },
     {
      "expression": "{!undefined == 0}",
      "exprText": "undefined == 0",
      "expected": "false"
     },
     {
      "expression": "{!undefined == m.naN}",
      "exprText": "undefined == m.naN",
      "expected": "false"
     },
     {
      "expression": "{!undefined != undefined}",
      "exprText": "undefined != undefined",
      "expected": "false"
     },
     {
      "expression": "{!undefined != m.naN}",
      "exprText": "undefined != m.naN",
      "expected": "true"
     },
     {
      "expression": "{!true && undefined}",
      "exprText": "true && undefined",
      "expected": "undefined"
     },
     {
      "expression": "{!undefined && undefined}",
      "exprText": "undefined && undefined",
      "expected": "undefined"
     },
     {
      "expression": "{!undefined && true}",
      "exprText": "undefined && true",
      "expected": "undefined"
     },
     {
      "expression": "{!false || undefined}",
      "exprText": "false || undefined",
      "expected": "undefined"
     },
     {
      "expression": "{!undefined || true}",
      "exprText": "undefined || true",
      "expected": "true"
     },
     {
      "expression": "{!undefined || undefined}",
      "exprText": "undefined || undefined",
      "expected": "undefined"
     },
     {
      "expression": "{!undefined ? 'yes' : 'no'}",
      "exprText": "undefined ? 'yes' : 'no'",
      "expected": "'no'"
     },
     {
      "expression": "{!true ? undefined : 'no'}",
      "exprText": "true ? undefined : 'no'",
      "expected": "undefined"
     },
     {
      "expression": "{!false ? 'yes' : undefined}",
      "exprText": "false ? 'yes' : undefined",
      "expected": "undefined"
     },
     {
      "expression": "{!undefined + 1}",
      "exprText": "undefined + 1",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined + 'b'}",
      "exprText": "undefined + 'b'",
      "expected": "'b'"
     },
     {
      "expression": "{!2.5 + undefined}",
      "exprText": "2.5 + undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!'c' + undefined}",
      "exprText": "'c' + undefined",
      "expected": "'c'"
     },
     {
      "expression": "{!undefined + undefined}",
      "exprText": "undefined + undefined",
      "expected": "''"
     },
     {
      "expression": "{!2 - undefined}",
      "exprText": "2 - undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined - 3.1}",
      "exprText": "undefined - 3.1",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined - undefined}",
      "exprText": "undefined - undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!3 * undefined}",
      "exprText": "3 * undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined * -.1}",
      "exprText": "undefined * -.1",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined * undefined}",
      "exprText": "undefined * undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!3 / undefined}",
      "exprText": "3 / undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined / 3}",
      "exprText": "undefined / 3",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined / undefined}",
      "exprText": "undefined / undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!3 % undefined}",
      "exprText": "3 % undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined % 3}",
      "exprText": "undefined % 3",
      "expected": "NaN"
     },
     {
      "expression": "{!undefined % undefined}",
      "exprText": "undefined % undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!1 > undefined}",
      "exprText": "1 > undefined",
      "expected": "false"
     },
     {
      "expression": "{!undefined > 0}",
      "exprText": "undefined > 0",
      "expected": "false"
     },
     {
      "expression": "{!undefined > undefined}",
      "exprText": "undefined > undefined",
      "expected": "false"
     },
     {
      "expression": "{!0 >= undefined}",
      "exprText": "0 >= undefined",
      "expected": "false"
     },
     {
      "expression": "{!undefined >= 1}",
      "exprText": "undefined >= 1",
      "expected": "false"
     },
     {
      "expression": "{!undefined >= undefined}",
      "exprText": "undefined >= undefined",
      "expected": "false"
     },
     {
      "expression": "{!0 < undefined}",
      "exprText": "0 < undefined",
      "expected": "false"
     },
     {
      "expression": "{!undefined < 1}",
      "exprText": "undefined < 1",
      "expected": "false"
     },
     {
      "expression": "{!undefined < undefined}",
      "exprText": "undefined < undefined",
      "expected": "false"
     },
     {
      "expression": "{!1 <= undefined}",
      "exprText": "1 <= undefined",
      "expected": "false"
     },
     {
      "expression": "{!undefined <= 0}",
      "exprText": "undefined <= 0",
      "expected": "false"
     },
     {
      "expression": "{!undefined <= undefined}",
      "exprText": "undefined <= undefined",
      "expected": "false"
     },
     {
      "expression": "{!-undefined}",
      "exprText": "-undefined",
      "expected": "NaN"
     },
     {
      "expression": "{!abs(undefined)}",
      "exprText": "abs(undefined)",
      "expected": "NaN"
     }
    ]
   }
  }
 },
 "frameworkPerformanceTest": {
  "createHTMLComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "gvpTest": {
  "basicTest.cmp": {
   "attributes": {
    "xxx": {
     "name": "xxx",
     "type": "String",
     "default": "none"
    },
    "attributeLabel": {
     "name": "attributeLabel",
     "type": "String",
     "default": "{!$Label.Related_Lists.task_mode_today}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "browserProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "contextGVPTest.cmp": {
   "attributes": {
    "name": {
     "type": "String",
     "name": "name"
    },
    "value": {
     "type": "String",
     "name": "value"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {
    "updateGvpValue": {
     "name": {
      "type": "String",
      "name": "name"
     },
     "value": {
      "type": "String",
      "name": "value"
     }
    }
   },
   "dependencies": {}
  },
  "customGVPInitInTemplateTest.cmp": {
   "attributes": {
    "valueChanged": {
     "name": "valueChanged",
     "type": "Boolean",
     "default": "false"
    },
    "gvpValue": {
     "name": "gvpValue",
     "type": "String",
     "default": "{!$CustomInitInTemplate.task_mode_today}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.gvpValue}",
     "action": "{!c.valueChanged}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "customGVPTemplate.cmp": {
   "attributes": {
    "stringValue": {
     "default": "Default",
     "type": "String",
     "name": "stringValue"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ]
   }
  },
  "customGVPTest.cmp": {
   "attributes": {
    "stringValue": {
     "default": "Default",
     "type": "String",
     "name": "stringValue"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamicLabels.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "dynamicTypeTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "innerCmpWithLabel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "labelProvider.cmp": {
   "attributes": {
    "simplevalue1": {
     "name": "simplevalue1",
     "type": "Object"
    },
    "simplevalue2": {
     "name": "simplevalue2",
     "type": "Object"
    },
    "simplevalue3": {
     "name": "simplevalue3",
     "type": "Object"
    },
    "simplevalue4": {
     "name": "simplevalue4",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "loadFromStorage.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "loadFromStorageTemplate.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "auraPreInitBlock"
     }
    ]
   }
  },
  "newLabels.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://gvpTest:parseLabels"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "LabelAsAttribute",
      "class": "{!$Label.Related_Lists.task_mode_today}",
      "value": "LabelAsAttribute"
     }
    ],
    "gvpTest:innerCmpWithLabel": [
     {
      "aura:id": "innerCmp"
     }
    ]
   }
  },
  "parseLabels.cmp": {
   "attributes": {
    "xxx": {
     "name": "xxx",
     "type": "String",
     "default": "none"
    },
    "yyy": {
     "name": "yyy",
     "type": "String",
     "default": "none"
    }
   },
   "imports": {
    "gvpTest:parseLabelsLibrary": {
     "library": "gvpTest:parseLabelsLibrary",
     "property": "pll"
    }
   },
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "voiceOverTest.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "withPersistentStorage.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "ifTest": {
  "testIf.cmp": {
   "attributes": {
    "thang": {
     "name": "thang",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.thang}"
     },
     {
      "isTrue": "{! !v.thang}"
     },
     {
      "isTrue": "false"
     },
     {
      "isTrue": "true"
     }
    ]
   }
  },
  "testIfElse.cmp": {
   "attributes": {
    "thang": {
     "name": "thang",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.thang}"
     },
     {
      "isTrue": "{! !v.thang}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ]
   }
  },
  "testIfNested.cmp": {
   "attributes": {
    "outer": {
     "name": "outer",
     "type": "Boolean"
    },
    "inner": {
     "name": "inner",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.outer}"
     },
     {
      "isTrue": "{!v.inner}"
     },
     {
      "isTrue": "{! !v.inner}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ],
    "ifTest:testIfElse": [
     {
      "thang": "{!v.inner}"
     }
    ]
   }
  },
  "testIfServer.cmp": {
   "attributes": {
    "thang": {
     "name": "thang",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.thang}"
     },
     {
      "isTrue": "{! !v.thang}"
     },
     {
      "isTrue": "false"
     },
     {
      "isTrue": "true"
     }
    ]
   }
  },
  "testIfWithIterationInside.cmp": {
   "attributes": {
    "bool1": {
     "name": "bool1",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "press": "{!c.toggleBool1}",
      "label": "toggle bool1 to load new array with different range",
      "aura:id": "toggleBool1"
     }
    ],
    "aura:renderif": [
     {
      "isTrue": "{!v.bool1}"
     }
    ],
    "iterationTest:iterationWithIfInside": [
     {
      "start": "1",
      "end": "10"
     },
     {
      "start": "11",
      "end": "20"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "testIfWithModel.cmp": {
   "attributes": {
    "attr": {
     "name": "attr",
     "type": "String",
     "default": "defaultValue"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testRenderIfNested.cmp": {
   "attributes": {
    "outer": {
     "name": "outer",
     "type": "Boolean"
    },
    "inner": {
     "name": "inner",
     "type": "Boolean"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderif": [
     {
      "isTrue": "{!v.outer}"
     },
     {
      "isTrue": "{!v.inner}"
     },
     {
      "isTrue": "{!v.inner}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     },
     {
      "attribute": "else"
     }
    ],
    "ui:button": [
     {
      "aura:id": "io TT",
      "label": "Set TT",
      "press": "{!c.press}"
     },
     {
      "aura:id": "io TF",
      "label": "Set TF",
      "press": "{!c.press}"
     },
     {
      "aura:id": "io FT",
      "label": "Set FT",
      "press": "{!c.press}"
     },
     {
      "aura:id": "io FF",
      "label": "Set FF",
      "press": "{!c.press}"
     },
     {
      "aura:id": "oi TT",
      "label": "Set TT",
      "press": "{!c.press}"
     },
     {
      "aura:id": "oi TF",
      "label": "Set TF",
      "press": "{!c.press}"
     },
     {
      "aura:id": "oi FT",
      "label": "Set FT",
      "press": "{!c.press}"
     },
     {
      "aura:id": "oi FF",
      "label": "Set FF",
      "press": "{!c.press}"
     }
    ]
   }
  }
 },
 "integrationService": {
  "noHistoryService.cmp": {
   "attributes": {
    "txt": {
     "name": "txt",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "aura:locationChange",
     "action": "{!c.locationChange}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "simpleStub.cmp": {
   "attributes": {
    "placeholder": {
     "name": "placeholder",
     "type": "String",
     "default": "placeholder"
    },
    "localId": {
     "name": "localId",
     "type": "String",
     "default": "localId"
    },
    "desc": {
     "name": "desc",
     "type": "String",
     "default": "ui:button"
    },
    "attrMap": {
     "name": "attrMap",
     "type": "Map",
     "default": "{}"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "iterationPerformanceTest": {
  "iterationBatchOperations.cmp": {
   "attributes": {
    "initialState": {
     "name": "initialState",
     "type": "Object"
    },
    "iterationItems": {
     "name": "iterationItems",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!v.iterationItems}",
      "var": "i"
     }
    ]
   }
  }
 },
 "iterationTest": {
  "arrayIteration.cmp": {
   "attributes": {
    "newCmp": {
     "name": "newCmp",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "markup://iterationTest:arrayIterationPreloaded"
     }
    ]
   }
  },
  "arrayIterationNotPreloaded.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String[]",
     "description": "The list of messages to be displayed."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.value}",
      "var": "message"
     }
    ]
   }
  },
  "arrayIterationPreloaded.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String[]",
     "description": "The list of messages to be displayed."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.value}",
      "var": "message"
     }
    ]
   }
  },
  "basicIteration.cmp": {
   "attributes": {
    "showIteration": {
     "name": "showIteration",
     "type": "Boolean",
     "default": "true"
    },
    "items": {
     "name": "items",
     "type": "List"
    },
    "start": {
     "name": "start",
     "type": "Object"
    },
    "end": {
     "name": "end",
     "type": "Object"
    },
    "iterationCompleteFired": {
     "name": "iterationCompleteFired",
     "type": "Boolean",
     "default": "false"
    },
    "iterationCompleteOperation": {
     "name": "iterationCompleteOperation",
     "type": "String",
     "default": ""
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "aura:id": "if",
      "isTrue": "{!v.showIteration}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ],
    "aura:if": [
     {
      "isTrue": "{!v.showIteration}"
     },
     {
      "isTrue": "{!v.showIteration}"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!v.items}",
      "var": "var",
      "indexVar": "idx",
      "start": "{!v.start}",
      "end": "{!v.end}",
      "iterationComplete": "{!c.iterationComplete}"
     }
    ]
   }
  },
  "cmpWithDefaultAtt.cmp": {
   "attributes": {
    "messages": {
     "name": "messages",
     "type": "List"
    },
    "color": {
     "name": "color",
     "type": "string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "box",
      "items": "{!v.messages}",
      "var": "message",
      "indexVar": "index"
     }
    ]
   }
  },
  "cmpWithDefaultAtt2.cmp": {
   "attributes": {
    "messages": {
     "name": "messages",
     "type": "List",
     "default": "Default A, Default B"
    },
    "color": {
     "name": "color",
     "type": "string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "box",
      "items": "{!v.messages}",
      "var": "message",
      "indexVar": "index"
     }
    ]
   }
  },
  "componentIteration.cmp": {
   "attributes": {
    "start": {
     "name": "start",
     "type": "Integer"
    },
    "end": {
     "name": "end",
     "type": "Integer"
    },
    "cmps": {
     "name": "cmps",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!v.cmps}",
      "var": "var",
      "indexVar": "idx",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ]
   }
  },
  "diffTypeOfChildren.cmp": {
   "attributes": {
    "start": {
     "name": "start",
     "type": "Integer"
    },
    "end": {
     "name": "end",
     "type": "Integer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!m.innerData}",
      "var": "var",
      "indexVar": "idx",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ],
    "iterationTest:iterationChildWJSProvider": [
     {
      "aura:id": "childWithJSProvider",
      "strAttribute": "{!var}"
     }
    ]
   }
  },
  "iterationArrayValueChange_ArrayFromAttribute.cmp": {
   "attributes": {
    "listdata": {
     "name": "listdata",
     "type": "List"
    },
    "start": {
     "name": "start",
     "type": "integer",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "100"
    },
    "indexToChange": {
     "name": "indexToChange",
     "type": "integer",
     "default": "0"
    },
    "newValueToChange": {
     "name": "newValueToChange",
     "type": "string",
     "default": "new value to edit"
    },
    "indexToInsert": {
     "name": "indexToInsert",
     "type": "string",
     "default": "0"
    },
    "newValueToInsert": {
     "name": "newValueToInsert",
     "type": "string",
     "default": "new value to insert"
    },
    "indexToDelete": {
     "name": "indexToDelete",
     "type": "string",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:inputNumber": [
     {
      "class": "inputNumber_indexToChange",
      "value": "{!v.indexToChange}"
     }
    ],
    "ui:inputText": [
     {
      "class": "inputText_newValueToChange",
      "value": "{!v.newValueToChange}"
     }
    ],
    "ui:button": [
     {
      "class": "button_changeValue_iteration",
      "press": "{!c.changeOneValueOnIterationItems}",
      "label": "Change Item in Iteration"
     },
     {
      "class": "button_changeValue_attribute",
      "press": "{!c.changeOneValueInAttribute}",
      "label": "Change Item in Attribute"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "iterationOnArrayAttribute",
      "items": "{!v.listdata}",
      "var": "item",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ]
   }
  },
  "iterationArrayValueChange_ArrayFromAttribute_PassThroughValue.cmp": {
   "attributes": {
    "listdata": {
     "name": "listdata",
     "type": "List"
    },
    "start": {
     "name": "start",
     "type": "integer",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "100"
    },
    "indexToChange": {
     "name": "indexToChange",
     "type": "integer",
     "default": "0"
    },
    "newValueToChange": {
     "name": "newValueToChange",
     "type": "string",
     "default": "new value to edit"
    },
    "indexToInsert": {
     "name": "indexToInsert",
     "type": "string",
     "default": "0"
    },
    "newValueToInsert": {
     "name": "newValueToInsert",
     "type": "string",
     "default": "new value to insert"
    },
    "indexToDelete": {
     "name": "indexToDelete",
     "type": "string",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iterationOnArrayAttributePassthrough",
      "items": "{!v.listdata}",
      "var": "item",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ],
    "auratest:eventCounter": [
     {
      "aura:id": "passThroughValueArrayAttribute",
      "passthrough": "{!item}"
     }
    ]
   }
  },
  "iterationArrayValueChange_ArrayFromModel.cmp": {
   "attributes": {
    "start": {
     "name": "start",
     "type": "integer",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "100"
    },
    "indexToChange": {
     "name": "indexToChange",
     "type": "integer",
     "default": "0"
    },
    "newValueToChange": {
     "name": "newValueToChange",
     "type": "string",
     "default": "new value to edit"
    },
    "indexToInsert": {
     "name": "indexToInsert",
     "type": "string",
     "default": "0"
    },
    "newValueToInsert": {
     "name": "newValueToInsert",
     "type": "string",
     "default": "new value to insert"
    },
    "indexToDelete": {
     "name": "indexToDelete",
     "type": "string",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:inputNumber": [
     {
      "class": "inputNumber_indexToChange",
      "value": "{!v.indexToChange}"
     }
    ],
    "ui:inputText": [
     {
      "class": "inputText_newValueToChange",
      "value": "{!v.newValueToChange}"
     }
    ],
    "ui:button": [
     {
      "class": "button_changeValue_iteration",
      "press": "{!c.changeOneValueOnIterationItems}",
      "label": "Change Item in Iteration"
     },
     {
      "class": "button_changeValue_model",
      "press": "{!c.changeOneValueInModel}",
      "label": "Change Item in Attribute"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "iterationOnArrayModel",
      "items": "{!m.dataIntList}",
      "var": "item",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ]
   }
  },
  "iterationArrayValueChange_ArrayFromModel_PassThroughValue.cmp": {
   "attributes": {
    "start": {
     "name": "start",
     "type": "integer",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "100"
    },
    "indexToChange": {
     "name": "indexToChange",
     "type": "integer",
     "default": "0"
    },
    "newValueToChange": {
     "name": "newValueToChange",
     "type": "string",
     "default": "new value to edit"
    },
    "indexToInsert": {
     "name": "indexToInsert",
     "type": "string",
     "default": "0"
    },
    "newValueToInsert": {
     "name": "newValueToInsert",
     "type": "string",
     "default": "new value to insert"
    },
    "indexToDelete": {
     "name": "indexToDelete",
     "type": "string",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iterationOnArrayModelPassthrough",
      "items": "{!m.dataIntList}",
      "var": "item",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ],
    "auratest:eventCounter": [
     {
      "aura:id": "passThroughValueArrayModel",
      "passthrough": "{!item}"
     }
    ]
   }
  },
  "iterationArrayValueChange_ObjectFromAttribute.cmp": {
   "attributes": {
    "mapdata": {
     "name": "mapdata",
     "type": "Object"
    },
    "start": {
     "name": "start",
     "type": "integer",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "100"
    },
    "indexToChange": {
     "name": "indexToChange",
     "type": "integer",
     "default": "0"
    },
    "newValueToChange": {
     "name": "newValueToChange",
     "type": "string",
     "default": "new value to edit"
    },
    "indexToInsert": {
     "name": "indexToInsert",
     "type": "string",
     "default": "0"
    },
    "newValueToInsert": {
     "name": "newValueToInsert",
     "type": "string",
     "default": "new value to insert"
    },
    "indexToDelete": {
     "name": "indexToDelete",
     "type": "string",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iterationOnMapAttribute",
      "items": "{!v.mapdata.items}",
      "var": "item",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ]
   }
  },
  "iterationArrayValueChange_ObjectFromAttribute_PassThroughValue.cmp": {
   "attributes": {
    "mapdata": {
     "name": "mapdata",
     "type": "Object"
    },
    "start": {
     "name": "start",
     "type": "integer",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "100"
    },
    "indexToChange": {
     "name": "indexToChange",
     "type": "integer",
     "default": "0"
    },
    "newValueToChange": {
     "name": "newValueToChange",
     "type": "string",
     "default": "new value to edit"
    },
    "indexToInsert": {
     "name": "indexToInsert",
     "type": "string",
     "default": "0"
    },
    "newValueToInsert": {
     "name": "newValueToInsert",
     "type": "string",
     "default": "new value to insert"
    },
    "indexToDelete": {
     "name": "indexToDelete",
     "type": "string",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.doInit}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iterationOnMapAttributePassthrough",
      "items": "{!v.mapdata.items}",
      "var": "item",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ],
    "auratest:eventCounter": [
     {
      "aura:id": "passThroughValueObjectAttribute",
      "passthroughObj": "{!item}"
     }
    ]
   }
  },
  "iterationArrayValueChange_ObjectFromModel.cmp": {
   "attributes": {
    "start": {
     "name": "start",
     "type": "integer",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "100"
    },
    "indexToChange": {
     "name": "indexToChange",
     "type": "integer",
     "default": "0"
    },
    "newValueToChange": {
     "name": "newValueToChange",
     "type": "string",
     "default": "new value to edit"
    },
    "indexToInsert": {
     "name": "indexToInsert",
     "type": "string",
     "default": "0"
    },
    "newValueToInsert": {
     "name": "newValueToInsert",
     "type": "string",
     "default": "new value to insert"
    },
    "indexToDelete": {
     "name": "indexToDelete",
     "type": "string",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iterationOnMapModel",
      "items": "{!m.mapdata.items}",
      "var": "item",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ]
   }
  },
  "iterationArrayValueChange_ObjectFromModel_PassThroughValue.cmp": {
   "attributes": {
    "start": {
     "name": "start",
     "type": "integer",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "100"
    },
    "indexToChange": {
     "name": "indexToChange",
     "type": "integer",
     "default": "0"
    },
    "newValueToChange": {
     "name": "newValueToChange",
     "type": "string",
     "default": "new value to edit"
    },
    "indexToInsert": {
     "name": "indexToInsert",
     "type": "string",
     "default": "0"
    },
    "newValueToInsert": {
     "name": "newValueToInsert",
     "type": "string",
     "default": "new value to insert"
    },
    "indexToDelete": {
     "name": "indexToDelete",
     "type": "string",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iterationOnMapModelPassthrough",
      "items": "{!m.mapdata.items}",
      "var": "item",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ],
    "auratest:eventCounter": [
     {
      "aura:id": "passThroughValueObjectModel",
      "passthroughObj": "{!item}"
     }
    ]
   }
  },
  "iterationChildWJSProvider.cmp": {
   "attributes": {
    "strAttribute": {
     "type": "String",
     "name": "strAttribute"
    },
    "newStrAttribute": {
     "type": "String",
     "name": "newStrAttribute"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "iterationChildWithModel.cmp": {
   "attributes": {
    "fromiteration": {
     "name": "fromiteration",
     "type": "string"
    },
    "fromparent": {
     "name": "fromparent",
     "type": "string"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "iterationOfCmpWithDefaultAtt.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "loop",
      "items": "blue,green,yellow,orange,red",
      "var": "color"
     }
    ],
    "iterationTest:cmpWithDefaultAtt": [
     {
      "color": "{!color}"
     },
     {
      "aura:id": "aqua",
      "color": "aqua"
     }
    ],
    "iterationTest:cmpWithDefaultAtt2": [
     {
      "aura:id": "black",
      "color": "black"
     },
     {
      "aura:id": "brown",
      "color": "brown"
     }
    ]
   }
  },
  "iterationTemplateChange.cmp": {
   "attributes": {
    "items": {
     "name": "items",
     "type": "List"
    },
    "status": {
     "name": "status",
     "type": "String",
     "default": "Initial",
     "description": "Used to update status of iteration for testing purposes"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!v.items}",
      "var": "item",
      "indexVar": "index"
     }
    ]
   }
  },
  "iterationWJSProviderOnly.cmp": {
   "attributes": {
    "cmpDescriptorName": {
     "name": "cmpDescriptorName",
     "type": "String",
     "description": "What component to provide"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "ifTest:*",
      "type": "COMPONENT"
     }
    ]
   }
  },
  "iterationWJSProviderOnlyList.cmp": {
   "attributes": {
    "items": {
     "name": "items",
     "type": "String[]",
     "default": "ifTest:testIf,ifTest:testIfElse,ifTest:testIfNested,ifTest:testIfServer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.items}",
      "var": "item"
     }
    ],
    "iterationTest:iterationWJSProviderOnly": [
     {
      "aura:id": "iterCmp",
      "cmpDescriptorName": "{!item}"
     }
    ]
   }
  },
  "iterationWithBodyTemplate.cmp": {
   "attributes": {
    "items": {
     "name": "items",
     "type": "List",
     "default": "1,2,3"
    },
    "stringAttr": {
     "name": "stringAttr",
     "type": "String",
     "default": "iterationWithBodyTemplate."
    },
    "itemTemplate": {
     "name": "itemTemplate",
     "type": "Aura.ComponentDefRef[]",
     "required": "true",
     "description": "A ComponentDefRef to use as the template for each generated row in the list."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iter",
      "items": "{!v.items}",
      "var": "row",
      "indexVar": "itemIndex",
      "body": "{!v.itemTemplate}"
     }
    ]
   }
  },
  "iterationWithBodyTemplateConsumer.cmp": {
   "attributes": {
    "stringAttr": {
     "name": "stringAttr",
     "type": "String",
     "default": "DefaultText."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "iterationTest:iterationWithBodyTemplate": [
     {
      "aura:id": "iterationCmp"
     },
     {
      "aura:id": "iterationAttributeData"
     }
    ],
    "aura:set": [
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "itemTemplate"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!m.string}"
     },
     {
      "value": "{!v.stringAttr}"
     }
    ]
   }
  },
  "iterationWithIfInside.cmp": {
   "attributes": {
    "list": {
     "name": "list",
     "type": "List"
    },
    "start": {
     "name": "start",
     "type": "integer",
     "default": "4"
    },
    "end": {
     "name": "end",
     "type": "integer",
     "default": "14"
    },
    "showEven": {
     "name": "showEven",
     "type": "Boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "press": "{!c.toggleEvenOdd}",
      "label": "toggleEvenOdd",
      "aura:id": "toggleEvenOdd",
      "class": "toggleEvenOdd"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!m.dataIntList}",
      "var": "number",
      "indexVar": "index",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ],
    "aura:renderif": [
     {
      "isTrue": "{!v.showEven}"
     },
     {
      "isTrue": "{! (mod(index,2)==0) ? 'true':'false'}"
     },
     {
      "isTrue": "{! (mod(index,2)==1) ? 'true':'false'}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "iterationWithLabelInside.cmp": {
   "attributes": {
    "data": {
     "name": "data",
     "type": "List"
    },
    "className": {
     "name": "className",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!v.data}",
     "action": "{!c.dataChange}"
    },
    "destroy": {
     "name": "destroy",
     "value": "{!this}",
     "action": "{!c.onDestroy}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.data}",
      "var": "i"
     }
    ],
    "ui:outputText": [
     {
      "aura:id": "fieldName",
      "value": "{!i.fieldName}"
     }
    ],
    "aura:label": [
     {
      "value": "{!i.oldValue == null ? \n                    (i.newValue == null ? 'ovalN_nvalN' : 'ovalN_nvalNN') : \n                    (i.newValue == null ? 'ovalNN_nvalN' : 'ovalNN_nvalNN') }"
     }
    ]
   }
  },
  "iterationWithModel.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.stringList}",
      "var": "item"
     },
     {
      "items": "{!m.stringList}",
      "var": "item",
      "forceServer": "true"
     }
    ],
    "iterationTest:iterationWithModelInnerCmp": [
     {
      "aura:id": "innerCmp",
      "value": "{!item}"
     }
    ],
    "ui:button": [
     {
      "aura:id": "addRow",
      "label": "Click here to add item",
      "press": "{!c.addRow}"
     },
     {
      "aura:id": "removeRow",
      "label": "Click here to remove item",
      "press": "{!c.removeRow}"
     }
    ],
    "iterationTest:iterationWrapper": [
     {
      "aura:id": "innerCmpWrapper",
      "value": "{!item}"
     }
    ]
   }
  },
  "iterationWithModelInnerCmp.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "iterationWrapper.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "default": "hello"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "iterationTest:iterationWithModelInnerCmp": [
     {
      "value": "{!v.value}"
     }
    ]
   }
  },
  "modifyDefRef.cmp": {
   "attributes": {
    "items": {
     "name": "items",
     "type": "List"
    },
    "cdr": {
     "name": "cdr",
     "type": "Aura.ComponentDefRef[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.items}",
      "var": "thing",
      "body": "{!v.cdr}"
     }
    ]
   }
  },
  "nestedIteration.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.data}",
      "var": "outer",
      "indexVar": "index",
      "start": "13",
      "end": "19"
     },
     {
      "items": "{!m.innerData}",
      "var": "inner",
      "indexVar": "index"
     }
    ]
   }
  },
  "nestedIterationServer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.data}",
      "var": "outer",
      "indexVar": "index",
      "start": "13",
      "end": "19"
     },
     {
      "items": "{!m.innerData}",
      "var": "inner",
      "indexVar": "index"
     }
    ]
   }
  },
  "resetIteration.cmp": {
   "attributes": {
    "data": {
     "name": "data",
     "type": "Object"
    },
    "innerClassName": {
     "name": "innerClassName",
     "type": "String"
    },
    "_initialized": {
     "name": "_initialized",
     "type": "String",
     "access": "PRIVATE",
     "description": "ACCESS CHECK FIX. PLEASE INVESTIGATE."
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v._initialized}"
     }
    ],
    "aura:iteration": [
     {
      "items": "{!v.data.elements}",
      "var": "item"
     }
    ],
    "iterationTest:iterationWithLabelInside": [
     {
      "data": "{!item.changes}",
      "className": "{!v.innerClassName}",
      "aura:id": "innerCmp"
     }
    ]
   }
  },
  "simpleIteration.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.data}",
      "var": "itsavar"
     },
     {
      "items": "{!m.data}",
      "var": "stuff",
      "indexVar": "index",
      "start": "6",
      "end": "10"
     },
     {
      "items": "{!m.data}",
      "var": "stuff",
      "start": "9",
      "end": "10"
     }
    ],
    "iterationTest:iterationChildWithModel": [
     {
      "aura:id": "childwithmodel",
      "fromiteration": "{!stuff.whatever}",
      "fromparent": "{!m.derp}"
     }
    ],
    "ui:outputText": [
     {
      "value": "",
      "aura:id": "outputText",
      "class": "outputText"
     }
    ]
   }
  },
  "simpleIterationServer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.data}",
      "var": "itsavar"
     },
     {
      "items": "{!m.data}",
      "var": "stuff",
      "indexVar": "index",
      "start": "6",
      "end": "10"
     },
     {
      "items": "{!m.data}",
      "var": "stuff",
      "start": "9",
      "end": "10"
     }
    ],
    "iterationTest:iterationChildWithModel": [
     {
      "aura:id": "childwithmodel",
      "fromiteration": "{!stuff.whatever}",
      "fromparent": "{!m.derp}"
     }
    ]
   }
  },
  "startAndEndIndexWithDefaults.cmp": {
   "attributes": {
    "items": {
     "name": "items",
     "type": "List"
    },
    "setIndexesInInit": {
     "name": "setIndexesInInit",
     "type": "Boolean",
     "default": "true"
    },
    "start": {
     "name": "start",
     "type": "Object",
     "default": "0"
    },
    "end": {
     "name": "end",
     "type": "Object",
     "default": "1"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "value": "{!this}",
     "action": "{!c.init}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!v.items}",
      "var": "var",
      "indexVar": "idx",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ]
   }
  },
  "typeIteration.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!m.stringListNull}",
      "var": "x"
     },
     {
      "items": "{!m.emptyList}",
      "var": "x"
     },
     {
      "items": "{!m.stringList}",
      "var": "x",
      "indexVar": "i"
     },
     {
      "items": "{!m.integerList}",
      "var": "x",
      "indexVar": "i"
     },
     {
      "items": "{!m.booleanList}",
      "var": "x",
      "indexVar": "i"
     },
     {
      "items": "{!m.listOfList}",
      "var": "x",
      "indexVar": "i"
     },
     {
      "items": "{!x}",
      "var": "y",
      "indexVar": "j"
     }
    ],
    "ui:inputText": [
     {
      "value": "{!x+7}"
     },
     {
      "size": "{!i+3}",
      "value": "{!i+3}",
      "maxlength": "{!x+3}"
     },
     {
      "value": "{!i}",
      "disabled": "{!x}"
     },
     {
      "value": "{!y + ' is from [' + i + ',' + j + ']'}"
     }
    ],
    "iterationTest:componentIteration": [
     {
      "start": "0",
      "end": "2",
      "aura:id": "componentArray"
     },
     {
      "start": "0",
      "end": "0",
      "aura:id": "emptyComponentArray"
     }
    ],
    "aura:set": [
     {
      "attribute": "cmps"
     }
    ],
    "aura:text": [
     {
      "value": "textOnBody",
      "aura:id": "text"
     }
    ]
   }
  },
  "withLazyComponents.cmp": {
   "attributes": {
    "start": {
     "name": "start",
     "type": "Integer"
    },
    "end": {
     "name": "end",
     "type": "Integer"
    },
    "slowFacet": {
     "name": "slowFacet",
     "type": "boolean",
     "default": "false"
    },
    "fastFacet": {
     "name": "fastFacet",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:if": [
     {
      "isTrue": "{!v.slowFacet}"
     },
     {
      "isTrue": "{!v.fastFacet}"
     }
    ],
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!m.innerData}",
      "var": "var",
      "indexVar": "idx",
      "start": "{!v.start}",
      "end": "{!v.end}"
     },
     {
      "aura:id": "iterationWithAttributes",
      "items": "{!m.innerData}",
      "var": "var",
      "indexVar": "idx",
      "start": "{!v.start}",
      "end": "{!v.end}"
     }
    ],
    "loadLevelTest:serverComponent": [
     {
      "aura:id": "lazy",
      "waitId": "{!'withLazyComponents'+idx}",
      "aura:load": "lazy"
     },
     {
      "aura:id": "lazy",
      "waitId": "withAttributes",
      "aura:load": "lazy"
     }
    ],
    "aura:expression": [
     {
      "value": "{!var}",
      "aura:id": "lazyWithAttributes",
      "aura:load": "lazy"
     }
    ]
   }
  }
 },
 "lintTest": {
  "basic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "listTest": {
  "listDataProvider.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "provide": {
     "name": "provide",
     "action": "{!c.provide}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "testListAttrItemTemplate.cmp": {
   "attributes": {
    "itemFromDataProvider": {
     "name": "itemFromDataProvider",
     "type": "String",
     "default": "tiger"
    },
    "itemFromThisComp": {
     "name": "itemFromThisComp",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "testListAttributeEvaluation.cmp": {
   "attributes": {
    "extraString": {
     "type": "String",
     "name": "extraString",
     "default": "cat",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:list": [
     {
      "aura:id": "simpleList",
      "itemVar": "listItemX"
     }
    ],
    "aura:set": [
     {
      "attribute": "itemTemplate"
     },
     {
      "attribute": "dataProvider"
     }
    ],
    "listTest:testListAttrItemTemplate": [
     {
      "itemFromDataProvider": "{!listItemX}",
      "itemFromThisComp": "{!v.extraString}"
     }
    ],
    "listTest:listDataProvider": [
     {}
    ]
   }
  }
 },
 "loadLevelTest": {
  "NonPreloadedServerComponent.cmp": {
   "attributes": {
    "waitId": {
     "type": "String",
     "name": "waitId"
    },
    "stringAttribute": {
     "type": "String",
     "name": "stringAttribute"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "clientComponent.cmp": {
   "attributes": {
    "first": {
     "name": "first",
     "type": "String"
    },
    "last": {
     "name": "last",
     "type": "String"
    },
    "arrayOfMaps": {
     "name": "arrayOfMaps",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "clientProvidesServerCmp.cmp": {
   "attributes": {
    "value": {
     "name": "value",
     "type": "String",
     "default": "default text"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "loadLevelTest:clientWithServerChild"
     }
    ]
   }
  },
  "clientWithLazyClientChild.cmp": {
   "attributes": {
    "status": {
     "name": "status",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "undefined": {
     "event": "aura:doneWaiting",
     "action": "{!c.doneWaiting}"
    }
   },
   "methods": {},
   "dependencies": {
    "ui:button": [
     {
      "press": "{!c.makeClient}",
      "label": "Push for client component"
     },
     {
      "press": "{!c.makeServer}",
      "label": "Push for server component",
      "aura:id": "makeServer"
     },
     {
      "press": "{!c.makeExclusiveServer}",
      "label": "Push for exclusive server component"
     }
    ]
   }
  },
  "clientWithServerChild.cmp": {
   "attributes": {
    "stringAttribute": {
     "name": "stringAttribute",
     "type": "String",
     "default": "clientWithServerChild"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "loadLevelTest:NonPreloadedServerComponent": [
     {
      "stringAttribute": "set by clientWithServerChild"
     }
    ]
   }
  },
  "createNewCmp.cmp": {
   "attributes": {
    "testAttr": {
     "name": "testAttr",
     "type": "String",
     "default": "testValue"
    },
    "testAttr2": {
     "name": "testAttr2",
     "type": "Integer",
     "default": "22"
    },
    "arrayOfMaps": {
     "name": "arrayOfMaps",
     "type": "Object[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "action": "{!c.doInit}",
     "value": "{!this}"
    }
   },
   "methods": {},
   "dependencies": {
    "aura:dependency": [
     {
      "resource": "aura:renderIf"
     },
     {
      "resource": "loadLevelTest:clientComponent"
     },
     {
      "resource": "loadLevelTest:serverComponent"
     },
     {
      "resource": "loadLevelTest:clientWithServerChild"
     },
     {
      "resource": "loadLevelTest:clientProvidesServerCmp"
     }
    ]
   }
  },
  "displayBoolean.cmp": {
   "attributes": {
    "bool": {
     "type": "Boolean",
     "name": "bool"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.bool}"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "displayMap.cmp": {
   "attributes": {
    "stringAttribute": {
     "name": "stringAttribute",
     "type": "String",
     "default": "barFoo"
    },
    "map": {
     "name": "map",
     "type": "Map"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "ui:outputText": [
     {
      "value": "{!v.map.propRef}"
     },
     {
      "value": "{!v.map.map2.propRef}"
     }
    ]
   }
  },
  "displayNumber.cmp": {
   "attributes": {
    "number": {
     "type": "Integer",
     "name": "number"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "displayStringArray.cmp": {
   "attributes": {
    "StringArray": {
     "name": "StringArray",
     "type": "String[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "items": "{!v.StringArray}",
      "var": "i"
     }
    ]
   }
  },
  "lazyLoadBasicTypes.cmp": {
   "attributes": {
    "stringAttribute": {
     "name": "stringAttribute",
     "type": "String",
     "default": "lazyLoading"
    },
    "waitId": {
     "name": "waitId",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "loadLevelTest:serverComponent": [
     {
      "aura:id": "lazy",
      "aura:load": "lazy",
      "waitId": "{!v.waitId}"
     }
    ],
    "aura:label": [
     {
      "value": "one {0} two",
      "aura:id": "labelWithoutBody",
      "aura:load": "lazy"
     }
    ],
    "aura:text": [
     {
      "value": "lazyLoading",
      "aura:id": "text",
      "aura:load": "lazy"
     }
    ]
   }
  },
  "lazyLoadHelper.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "lazyLoadInRenderIf.cmp": {
   "attributes": {
    "flip": {
     "name": "flip",
     "type": "boolean",
     "default": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.flip}"
     }
    ],
    "loadLevelTest:serverComponent": [
     {
      "aura:id": "lazyrenderIf",
      "waitId": "lazyrenderIf",
      "aura:load": "LAZY"
     },
     {
      "aura:id": "lazyelse",
      "waitId": "lazyelse",
      "aura:load": "LAZY"
     }
    ],
    "aura:set": [
     {
      "attribute": "else"
     }
    ]
   }
  },
  "loadLevel.cmp": {
   "attributes": {
    "testLazy": {
     "name": "testLazy",
     "type": "boolean",
     "default": "false"
    },
    "testExclusive": {
     "name": "testExclusive",
     "type": "boolean",
     "default": "false"
    },
    "testNestedLazy": {
     "name": "testNestedLazy",
     "type": "boolean",
     "default": "false"
    },
    "testMissingRequiredAttribute": {
     "name": "testMissingRequiredAttribute",
     "type": "boolean",
     "default": "false"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:renderIf": [
     {
      "isTrue": "{!v.testLazy}"
     },
     {
      "isTrue": "{!v.testExclusive}"
     },
     {
      "isTrue": "{!v.testNestedLazy}"
     },
     {
      "isTrue": "{!v.testMissingRequiredAttribute}"
     }
    ],
    "loadLevelTest:serverComponent": [
     {
      "aura:id": "lazy",
      "waitId": "lazy",
      "aura:load": "lazy"
     },
     {
      "aura:id": "exclusive",
      "waitId": "exclusive",
      "aura:load": "exclusive"
     }
    ],
    "loadLevelTest:serverWithLazyChild": [
     {
      "aura:id": "nestedLazy",
      "waitId": "nestedLazy",
      "aura:load": "lazy"
     }
    ],
    "loadLevelTest:clientComponent": [
     {
      "aura:id": "lazyClient",
      "aura:load": "lazy"
     }
    ],
    "loadlevelTest:serverComponentWReqAttr": [
     {
      "aura:id": "lazyWReqAttr",
      "waitId": "lazyWReqAttr",
      "aura:load": "lazy"
     }
    ]
   }
  },
  "loadSimpleAttributes.cmp": {
   "attributes": {
    "stringAttribute": {
     "name": "stringAttribute",
     "type": "String"
    },
    "integerAttribute": {
     "name": "integerAttribute",
     "type": "Integer"
    },
    "booleanAttribute": {
     "name": "booleanAttribute",
     "type": "Boolean"
    },
    "waitId": {
     "name": "waitId",
     "type": "String"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:expression": [
     {
      "value": "{!v.stringAttribute}",
      "aura:id": "stringAttribute",
      "aura:load": "lazy"
     }
    ],
    "loadLevelTest:serverComponent": [
     {
      "aura:id": "lazy",
      "waitId": "{!v.waitId}",
      "aura:load": "lazy"
     }
    ],
    "loadLevelTest:displayNumber": [
     {
      "number": "{!v.integerAttribute}",
      "aura:id": "integerAttribute",
      "aura:load": "lazy"
     }
    ],
    "loadLevelTest:displayBoolean": [
     {
      "bool": "{!v.booleanAttribute}",
      "aura:id": "booleanAttribute",
      "aura:load": "lazy"
     }
    ]
   }
  },
  "newCmpHalfLoad.cmp": {
   "attributes": {
    "receiverCmp": {
     "name": "receiverCmp",
     "type": "String",
     "default": "loadLevelTest:newCmpWithValueProvider"
    },
    "receiverCmpAuraId": {
     "name": "receiverCmpAuraId",
     "type": "String",
     "default": "receiverCmp"
    },
    "controllerFuncToCreateCmp": {
     "name": "controllerFuncToCreateCmp",
     "type": "String",
     "default": "c.createCmpByFetchingDefFromServer"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "newCmpWithValueProvider.cmp": {
   "attributes": {
    "stringAttribute": {
     "name": "stringAttribute",
     "type": "String",
     "default": "fooBar"
    },
    "nameAttribute": {
     "name": "nameAttribute",
     "type": "String",
     "default": "Washington"
    },
    "numberAttribute": {
     "type": "Integer",
     "name": "numberAttribute"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "loadLevelTest:serverComponent": [
     {}
    ],
    "ui:button": [
     {
      "press": "{!c.createCmpWithMapValuePropRefValueFromServer}",
      "label": "Push for component",
      "aura:id": "button_createCmp"
     }
    ]
   }
  },
  "serverComponent.cmp": {
   "attributes": {
    "waitId": {
     "type": "String",
     "name": "waitId"
    },
    "stringAttribute": {
     "type": "String",
     "name": "stringAttribute"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "serverComponentWReqAttr.cmp": {
   "attributes": {
    "waitId": {
     "type": "String",
     "name": "waitId"
    },
    "stringAttribute": {
     "type": "String",
     "name": "stringAttribute",
     "required": "true"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "serverWithInnerServerCmp.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "loadLevelTest:clientWithServerChild": [
     {}
    ]
   }
  },
  "serverWithLazyChild.cmp": {
   "attributes": {
    "waitId": {
     "type": "String",
     "name": "waitId"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "loadLevelTest:serverComponent": [
     {
      "aura:load": "lazy",
      "waitId": "lazyKid",
      "aura:id": "kid"
     }
    ]
   }
  },
  "simpleImplementation1.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "simpleImplementation2.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "sleepyServerComponent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "metricsPluginTest": {
  "auraContextPlugin.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "clientService.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "componentService.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "registerNewPlugin.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "miscTest": {
  "aura_iteration.cmp": {
   "attributes": {
    "tochange": {
     "name": "tochange",
     "type": "Integer"
    },
    "newvalue": {
     "name": "newvalue",
     "type": "string"
    },
    "newEndIndex": {
     "name": "newEndIndex",
     "type": "Integer",
     "default": "26"
    },
    "inputValue": {
     "name": "inputValue",
     "type": "string"
    },
    "count": {
     "name": "count",
     "type": "integer",
     "required": "false",
     "default": "1"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:iteration": [
     {
      "aura:id": "iteration",
      "items": "{!m.data}",
      "var": "stuff1",
      "indexVar": "index1",
      "start": "0",
      "end": "{!v.count}"
     },
     {
      "aura:id": "innerIteration",
      "items": "{!m.data}",
      "var": "stuff",
      "indexVar": "index",
      "start": "0",
      "end": "{!v.newEndIndex}"
     }
    ],
    "ui:outputText": [
     {
      "value": "{!stuff.letters}"
     }
    ],
    "ui:inputNumber": [
     {
      "value": "{!v.tochange}",
      "class": "itemIndex"
     },
     {
      "value": "{!v.count}",
      "class": "pageCount"
     }
    ],
    "ui:inputText": [
     {
      "value": "{!v.newvalue}",
      "class": "itemValue"
     },
     {
      "value": "{!v.inputValue}",
      "class": "pageSize"
     }
    ],
    "ui:button": [
     {
      "press": "{!c.changeOneValue}",
      "class": "changeValue",
      "label": "Go"
     },
     {
      "press": "{!c.changeEndIndex}",
      "class": "changePageSize",
      "label": "Go"
     },
     {
      "class": "changePageCount",
      "label": "Go"
     }
    ]
   }
  }
 },
 "namespaceDefTest": {
  "testStyleTokens.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "renderingTest": {
  "arrayValues.cmp": {
   "attributes": {
    "simpleValueArray": {
     "type": "String[]",
     "name": "simpleValueArray"
    },
    "componentArray": {
     "type": "Aura.Component[]",
     "name": "componentArray"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "bodyRendering.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "renderingTest:renderCounter": [
     {
      "index": "1"
     },
     {
      "index": "2"
     },
     {
      "index": "3"
     },
     {
      "index": "4"
     }
    ]
   }
  },
  "cmpWithRenderer.cmp": {
   "attributes": {
    "renderCounter": {
     "name": "renderCounter",
     "type": "Integer",
     "default": "0"
    },
    "rerenderCounter": {
     "name": "rerenderCounter",
     "type": "Integer",
     "default": "0"
    },
    "unrenderCounter": {
     "name": "unrenderCounter",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "cmpWithRendererExtendWithRenderer.cmp": {
   "attributes": {
    "extendRenderCounter": {
     "name": "extendRenderCounter",
     "type": "Integer",
     "default": "0"
    },
    "extendRerenderCounter": {
     "name": "extendRerenderCounter",
     "type": "Integer",
     "default": "0"
    },
    "extendUnrenderCounter": {
     "name": "extendUnrenderCounter",
     "type": "Integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "cmpWithRendererExtendWithoutRenderer.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "conditionalRendering.cmp": {
   "attributes": {
    "stuffToRender": {
     "name": "stuffToRender",
     "type": "Object"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "exception.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "html.cmp": {
   "attributes": {
    "styleClass": {
     "name": "styleClass",
     "type": "String",
     "default": "styleClass"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "renderCounter.cmp": {
   "attributes": {
    "index": {
     "name": "index",
     "type": "integer"
    },
    "renderCount": {
     "name": "renderCount",
     "type": "integer",
     "default": "0"
    },
    "rerenderCount": {
     "name": "rerenderCount",
     "type": "integer",
     "default": "0"
    },
    "unrenderCount": {
     "name": "unrenderCount",
     "type": "integer",
     "default": "0"
    },
    "onloadCount": {
     "name": "onloadCount",
     "type": "integer",
     "default": "0"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "test.cmp": {
   "attributes": {
    "stringAttribute": {
     "type": "String",
     "name": "stringAttribute",
     "default": "London"
    },
    "flag": {
     "type": "Boolean",
     "name": "flag",
     "default": "true"
    },
    "cmps": {
     "name": "cmps",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:text": [
     {
      "value": "textOnBody",
      "aura:id": "localtext"
     },
     {
      "value": "textInsideFacet",
      "aura:id": "text"
     }
    ],
    "renderingTest:arrayValues": [
     {
      "aura:id": "arrayFacet",
      "simpleValueArray": "{!m.stringList}"
     }
    ],
    "aura:set": [
     {
      "attribute": "componentArray"
     }
    ],
    "renderingTest:conditionalRendering": [
     {
      "stuffToRender": "{!v.flag?v.cmps:v.stringAttribute}",
      "aura:id": "conditionalRendering"
     }
    ]
   }
  },
  "testEventHandlerChain.cmp": {
   "attributes": {
    "stringValue": {
     "type": "String",
     "name": "stringValue",
     "default": "London"
    }
   },
   "imports": {},
   "events": {
    "A": {
     "name": "A",
     "type": "handleEventTest:event"
    }
   },
   "handlers": {
    "A": {
     "name": "A",
     "action": "{!c.handler3}"
    },
    "undefined": {
     "event": "handleEventTest:applicationEvent",
     "action": "{!c.handler2}"
    }
   },
   "methods": {},
   "dependencies": {
    "renderingTest:arrayValues": [
     {
      "aura:id": "arrayFacet",
      "simpleValueArray": "{!m.stringList}"
     }
    ],
    "aura:set": [
     {
      "attribute": "componentArray"
     }
    ]
   }
  }
 },
 "setAttributesTest": {
  "abstract.cmp": {
   "attributes": {
    "SimpleAttribute": {
     "name": "SimpleAttribute",
     "type": "string",
     "default": "abstractX"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "abstractCmpExtension.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "SimpleAttribute",
      "value": "abstractExtensionX"
     }
    ]
   }
  },
  "anotherChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "attributesChild.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "city",
      "value": "Seattle (default child)"
     },
     {
      "attribute": "state",
      "value": "Washington (default child)"
     },
     {
      "attribute": "address"
     }
    ]
   }
  },
  "attributesParent.cmp": {
   "attributes": {
    "city": {
     "name": "city",
     "type": "String",
     "default": "San Francisco (default parent)"
    },
    "state": {
     "name": "state",
     "type": "String",
     "default": "California (default parent)"
    },
    "address": {
     "name": "address",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "child.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "SimpleAttribute",
      "value": "childX"
     }
    ]
   }
  },
  "cmpTotestAbstractCmp.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "setAttributesTest:abstract": [
     {
      "aura:id": "id"
     }
    ]
   }
  },
  "cmpTotestInterface.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "setAttributesTest:interface": [
     {
      "aura:id": "id"
     }
    ]
   }
  },
  "grandparent.cmp": {
   "attributes": {
    "SimpleAttribute": {
     "name": "SimpleAttribute",
     "type": "java://String",
     "default": "grandparentX"
    },
    "ComponentTypeAttribute": {
     "name": "ComponentTypeAttribute",
     "type": "Aura.Component[]"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "test:test_button": [
     {
      "label": "grandParentX_Button"
     }
    ]
   }
  },
  "implementation.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "SimpleAttribute",
      "value": "implementationX"
     }
    ]
   }
  },
  "parent.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {
    "aura:set": [
     {
      "attribute": "SimpleAttribute",
      "value": "parentX"
     }
    ]
   }
  },
  "typeCoercion.cmp": {
   "attributes": {
    "stringAttribute": {
     "name": "stringAttribute",
     "type": "String"
    },
    "stringArrayAttribute": {
     "name": "stringArrayAttribute",
     "type": "String[]"
    },
    "listAttribute": {
     "name": "listAttribute",
     "type": "List"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "validationTest": {
  "basic.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 },
 "valueChange": {
  "componentInit.cmp": {
   "attributes": {
    "strAttribute": {
     "name": "strAttribute",
     "type": "String",
     "default": "foo"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "action": "{!c.facetInit}",
     "value": "{!facet}"
    }
   },
   "methods": {},
   "dependencies": {
    "valueChange:facetInit": [
     {
      "aura:id": "facet"
     }
    ]
   }
  },
  "facetInit.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "action": "{!c.facetInit}",
     "value": "{!this}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "newComponentInit.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {
    "init": {
     "name": "init",
     "action": "{!c.newComponentInit}",
     "value": "{!this}"
    }
   },
   "methods": {},
   "dependencies": {}
  },
  "simpleValueChange.cmp": {
   "attributes": {
    "observed": {
     "name": "observed",
     "type": "String",
     "default": "first"
    },
    "observedB": {
     "name": "observedB",
     "type": "string",
     "default": "observedB"
    },
    "observedC": {
     "name": "observedC",
     "type": "string",
     "default": "observedC"
    }
   },
   "imports": {},
   "events": {},
   "handlers": {
    "change": {
     "name": "change",
     "value": "{!m.unchained}",
     "action": "{!c.unchainedChange}"
    }
   },
   "methods": {},
   "dependencies": {
    "test:ballot": [
     {
      "aura:id": "ballot"
     }
    ]
   }
  }
 },
 "whitespaceBehaviorTest": {
  "optimizeWhitespace.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  },
  "preserveWhitespace.cmp": {
   "attributes": {},
   "imports": {},
   "events": {},
   "handlers": {},
   "methods": {},
   "dependencies": {}
  }
 }
}